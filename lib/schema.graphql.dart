class Input$ArticlePageOrderByInput {
  factory Input$ArticlePageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$ArticlePageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ArticlePageOrderByInput._(this._$data);

  factory Input$ArticlePageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : fromJson$Enum$OrderBy((l$MainBody as String));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$ArticlePageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MainBody => (_$data['MainBody'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] =
          l$MainBody == null ? null : toJson$Enum$OrderBy(l$MainBody);
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$ArticlePageOrderByInput<Input$ArticlePageOrderByInput>
      get copyWith => CopyWith$Input$ArticlePageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ArticlePageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ArticlePageOrderByInput<TRes> {
  factory CopyWith$Input$ArticlePageOrderByInput(
    Input$ArticlePageOrderByInput instance,
    TRes Function(Input$ArticlePageOrderByInput) then,
  ) = _CopyWithImpl$Input$ArticlePageOrderByInput;

  factory CopyWith$Input$ArticlePageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ArticlePageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$ArticlePageOrderByInput<TRes>
    implements CopyWith$Input$ArticlePageOrderByInput<TRes> {
  _CopyWithImpl$Input$ArticlePageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ArticlePageOrderByInput _instance;

  final TRes Function(Input$ArticlePageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ArticlePageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MainBody != _undefined) 'MainBody': (MainBody as Enum$OrderBy?),
        if (MainContentArea != _undefined)
          'MainContentArea': (MainContentArea
              as Input$ContentAreaItemModelSearchOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$ArticlePageOrderByInput<TRes>
    implements CopyWith$Input$ArticlePageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ArticlePageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$ArticlePageWhereInput {
  factory Input$ArticlePageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ArticlePageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ArticlePageWhereInput?>? $_not,
    List<Input$ArticlePageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$ArticlePageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ArticlePageWhereInput._(this._$data);

  factory Input$ArticlePageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MainBody as Map<String, dynamic>));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ArticlePageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ArticlePageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ArticlePageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$ArticlePageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MainBody =>
      (_$data['MainBody'] as Input$SearchableStringFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$ArticlePageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$ArticlePageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$ArticlePageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$ArticlePageWhereInput?>?);

  List<Input$ArticlePageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$ArticlePageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] = l$MainBody?.toJson();
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ArticlePageWhereInput<Input$ArticlePageWhereInput>
      get copyWith => CopyWith$Input$ArticlePageWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ArticlePageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ArticlePageWhereInput<TRes> {
  factory CopyWith$Input$ArticlePageWhereInput(
    Input$ArticlePageWhereInput instance,
    TRes Function(Input$ArticlePageWhereInput) then,
  ) = _CopyWithImpl$Input$ArticlePageWhereInput;

  factory CopyWith$Input$ArticlePageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ArticlePageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ArticlePageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ArticlePageWhereInput?>? $_not,
    List<Input$ArticlePageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get MainContentArea;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$ArticlePageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ArticlePageWhereInput<
                      Input$ArticlePageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$ArticlePageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ArticlePageWhereInput<
                      Input$ArticlePageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$ArticlePageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ArticlePageWhereInput<
                      Input$ArticlePageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$ArticlePageWhereInput<TRes>
    implements CopyWith$Input$ArticlePageWhereInput<TRes> {
  _CopyWithImpl$Input$ArticlePageWhereInput(
    this._instance,
    this._then,
  );

  final Input$ArticlePageWhereInput _instance;

  final TRes Function(Input$ArticlePageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ArticlePageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MainBody != _undefined)
          'MainBody': (MainBody as Input$SearchableStringFilterInput?),
        if (MainContentArea != _undefined)
          'MainContentArea':
              (MainContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$ArticlePageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$ArticlePageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$ArticlePageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody {
    final local$MainBody = _instance.MainBody;
    return local$MainBody == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MainBody, (e) => call(MainBody: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$ArticlePageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ArticlePageWhereInput<
                          Input$ArticlePageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$ArticlePageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$ArticlePageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ArticlePageWhereInput<
                          Input$ArticlePageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$ArticlePageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$ArticlePageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ArticlePageWhereInput<
                          Input$ArticlePageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$ArticlePageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$ArticlePageWhereInput<TRes>
    implements CopyWith$Input$ArticlePageWhereInput<TRes> {
  _CopyWithStubImpl$Input$ArticlePageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ArticlePageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ArticlePageWhereInput?>? $_not,
    List<Input$ArticlePageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$BlobModelOrderByInput {
  factory Input$BlobModelOrderByInput({
    Enum$OrderBy? Id,
    Enum$OrderBy? Url,
  }) =>
      Input$BlobModelOrderByInput._({
        if (Id != null) r'Id': Id,
        if (Url != null) r'Url': Url,
      });

  Input$BlobModelOrderByInput._(this._$data);

  factory Input$BlobModelOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] =
          l$Id == null ? null : fromJson$Enum$OrderBy((l$Id as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    return Input$BlobModelOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Id => (_$data['Id'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id == null ? null : toJson$Enum$OrderBy(l$Id);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    return result$data;
  }

  CopyWith$Input$BlobModelOrderByInput<Input$BlobModelOrderByInput>
      get copyWith => CopyWith$Input$BlobModelOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$BlobModelOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Id = Id;
    final l$Url = Url;
    return Object.hashAll([
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Url') ? l$Url : const {},
    ]);
  }
}

abstract class CopyWith$Input$BlobModelOrderByInput<TRes> {
  factory CopyWith$Input$BlobModelOrderByInput(
    Input$BlobModelOrderByInput instance,
    TRes Function(Input$BlobModelOrderByInput) then,
  ) = _CopyWithImpl$Input$BlobModelOrderByInput;

  factory CopyWith$Input$BlobModelOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$BlobModelOrderByInput;

  TRes call({
    Enum$OrderBy? Id,
    Enum$OrderBy? Url,
  });
}

class _CopyWithImpl$Input$BlobModelOrderByInput<TRes>
    implements CopyWith$Input$BlobModelOrderByInput<TRes> {
  _CopyWithImpl$Input$BlobModelOrderByInput(
    this._instance,
    this._then,
  );

  final Input$BlobModelOrderByInput _instance;

  final TRes Function(Input$BlobModelOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Id = _undefined,
    Object? Url = _undefined,
  }) =>
      _then(Input$BlobModelOrderByInput._({
        ..._instance._$data,
        if (Id != _undefined) 'Id': (Id as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
      }));
}

class _CopyWithStubImpl$Input$BlobModelOrderByInput<TRes>
    implements CopyWith$Input$BlobModelOrderByInput<TRes> {
  _CopyWithStubImpl$Input$BlobModelOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Id,
    Enum$OrderBy? Url,
  }) =>
      _res;
}

class Input$BlobModelWhereInput {
  factory Input$BlobModelWhereInput({
    Input$StringFilterInput? Id,
    Input$StringFilterInput? Url,
  }) =>
      Input$BlobModelWhereInput._({
        if (Id != null) r'Id': Id,
        if (Url != null) r'Url': Url,
      });

  Input$BlobModelWhereInput._(this._$data);

  factory Input$BlobModelWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] = l$Id == null
          ? null
          : Input$StringFilterInput.fromJson((l$Id as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    return Input$BlobModelWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Id => (_$data['Id'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$BlobModelWhereInput<Input$BlobModelWhereInput> get copyWith =>
      CopyWith$Input$BlobModelWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$BlobModelWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Id = Id;
    final l$Url = Url;
    return Object.hashAll([
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Url') ? l$Url : const {},
    ]);
  }
}

abstract class CopyWith$Input$BlobModelWhereInput<TRes> {
  factory CopyWith$Input$BlobModelWhereInput(
    Input$BlobModelWhereInput instance,
    TRes Function(Input$BlobModelWhereInput) then,
  ) = _CopyWithImpl$Input$BlobModelWhereInput;

  factory CopyWith$Input$BlobModelWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$BlobModelWhereInput;

  TRes call({
    Input$StringFilterInput? Id,
    Input$StringFilterInput? Url,
  });
  CopyWith$Input$StringFilterInput<TRes> get Id;
  CopyWith$Input$StringFilterInput<TRes> get Url;
}

class _CopyWithImpl$Input$BlobModelWhereInput<TRes>
    implements CopyWith$Input$BlobModelWhereInput<TRes> {
  _CopyWithImpl$Input$BlobModelWhereInput(
    this._instance,
    this._then,
  );

  final Input$BlobModelWhereInput _instance;

  final TRes Function(Input$BlobModelWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Id = _undefined,
    Object? Url = _undefined,
  }) =>
      _then(Input$BlobModelWhereInput._({
        ..._instance._$data,
        if (Id != _undefined) 'Id': (Id as Input$StringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Id {
    final local$Id = _instance.Id;
    return local$Id == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Id, (e) => call(Id: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }
}

class _CopyWithStubImpl$Input$BlobModelWhereInput<TRes>
    implements CopyWith$Input$BlobModelWhereInput<TRes> {
  _CopyWithStubImpl$Input$BlobModelWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Id,
    Input$StringFilterInput? Url,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Id =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);
}

class Input$BoolFilterInput {
  factory Input$BoolFilterInput({
    int? boost,
    bool? eq,
    bool? exist,
    bool? notEq,
  }) =>
      Input$BoolFilterInput._({
        if (boost != null) r'boost': boost,
        if (eq != null) r'eq': eq,
        if (exist != null) r'exist': exist,
        if (notEq != null) r'notEq': notEq,
      });

  Input$BoolFilterInput._(this._$data);

  factory Input$BoolFilterInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('boost')) {
      final l$boost = data['boost'];
      result$data['boost'] = (l$boost as int?);
    }
    if (data.containsKey('eq')) {
      final l$eq = data['eq'];
      result$data['eq'] = (l$eq as bool?);
    }
    if (data.containsKey('exist')) {
      final l$exist = data['exist'];
      result$data['exist'] = (l$exist as bool?);
    }
    if (data.containsKey('notEq')) {
      final l$notEq = data['notEq'];
      result$data['notEq'] = (l$notEq as bool?);
    }
    return Input$BoolFilterInput._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get boost => (_$data['boost'] as int?);

  bool? get eq => (_$data['eq'] as bool?);

  bool? get exist => (_$data['exist'] as bool?);

  bool? get notEq => (_$data['notEq'] as bool?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('boost')) {
      final l$boost = boost;
      result$data['boost'] = l$boost;
    }
    if (_$data.containsKey('eq')) {
      final l$eq = eq;
      result$data['eq'] = l$eq;
    }
    if (_$data.containsKey('exist')) {
      final l$exist = exist;
      result$data['exist'] = l$exist;
    }
    if (_$data.containsKey('notEq')) {
      final l$notEq = notEq;
      result$data['notEq'] = l$notEq;
    }
    return result$data;
  }

  CopyWith$Input$BoolFilterInput<Input$BoolFilterInput> get copyWith =>
      CopyWith$Input$BoolFilterInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$BoolFilterInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$boost = boost;
    final lOther$boost = other.boost;
    if (_$data.containsKey('boost') != other._$data.containsKey('boost')) {
      return false;
    }
    if (l$boost != lOther$boost) {
      return false;
    }
    final l$eq = eq;
    final lOther$eq = other.eq;
    if (_$data.containsKey('eq') != other._$data.containsKey('eq')) {
      return false;
    }
    if (l$eq != lOther$eq) {
      return false;
    }
    final l$exist = exist;
    final lOther$exist = other.exist;
    if (_$data.containsKey('exist') != other._$data.containsKey('exist')) {
      return false;
    }
    if (l$exist != lOther$exist) {
      return false;
    }
    final l$notEq = notEq;
    final lOther$notEq = other.notEq;
    if (_$data.containsKey('notEq') != other._$data.containsKey('notEq')) {
      return false;
    }
    if (l$notEq != lOther$notEq) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$boost = boost;
    final l$eq = eq;
    final l$exist = exist;
    final l$notEq = notEq;
    return Object.hashAll([
      _$data.containsKey('boost') ? l$boost : const {},
      _$data.containsKey('eq') ? l$eq : const {},
      _$data.containsKey('exist') ? l$exist : const {},
      _$data.containsKey('notEq') ? l$notEq : const {},
    ]);
  }
}

abstract class CopyWith$Input$BoolFilterInput<TRes> {
  factory CopyWith$Input$BoolFilterInput(
    Input$BoolFilterInput instance,
    TRes Function(Input$BoolFilterInput) then,
  ) = _CopyWithImpl$Input$BoolFilterInput;

  factory CopyWith$Input$BoolFilterInput.stub(TRes res) =
      _CopyWithStubImpl$Input$BoolFilterInput;

  TRes call({
    int? boost,
    bool? eq,
    bool? exist,
    bool? notEq,
  });
}

class _CopyWithImpl$Input$BoolFilterInput<TRes>
    implements CopyWith$Input$BoolFilterInput<TRes> {
  _CopyWithImpl$Input$BoolFilterInput(
    this._instance,
    this._then,
  );

  final Input$BoolFilterInput _instance;

  final TRes Function(Input$BoolFilterInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? boost = _undefined,
    Object? eq = _undefined,
    Object? exist = _undefined,
    Object? notEq = _undefined,
  }) =>
      _then(Input$BoolFilterInput._({
        ..._instance._$data,
        if (boost != _undefined) 'boost': (boost as int?),
        if (eq != _undefined) 'eq': (eq as bool?),
        if (exist != _undefined) 'exist': (exist as bool?),
        if (notEq != _undefined) 'notEq': (notEq as bool?),
      }));
}

class _CopyWithStubImpl$Input$BoolFilterInput<TRes>
    implements CopyWith$Input$BoolFilterInput<TRes> {
  _CopyWithStubImpl$Input$BoolFilterInput(this._res);

  TRes _res;

  call({
    int? boost,
    bool? eq,
    bool? exist,
    bool? notEq,
  }) =>
      _res;
}

class Input$ButtonBlockOrderByInput {
  factory Input$ButtonBlockOrderByInput({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? ButtonLink,
    Enum$OrderBy? ButtonText,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$ButtonBlockOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (ButtonLink != null) r'ButtonLink': ButtonLink,
        if (ButtonText != null) r'ButtonText': ButtonText,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ButtonBlockOrderByInput._(this._$data);

  factory Input$ButtonBlockOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('ButtonLink')) {
      final l$ButtonLink = data['ButtonLink'];
      result$data['ButtonLink'] = l$ButtonLink == null
          ? null
          : fromJson$Enum$OrderBy((l$ButtonLink as String));
    }
    if (data.containsKey('ButtonText')) {
      final l$ButtonText = data['ButtonText'];
      result$data['ButtonText'] = l$ButtonText == null
          ? null
          : fromJson$Enum$OrderBy((l$ButtonText as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$ButtonBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Enum$OrderBy? get ButtonLink => (_$data['ButtonLink'] as Enum$OrderBy?);

  Enum$OrderBy? get ButtonText => (_$data['ButtonText'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('ButtonLink')) {
      final l$ButtonLink = ButtonLink;
      result$data['ButtonLink'] =
          l$ButtonLink == null ? null : toJson$Enum$OrderBy(l$ButtonLink);
    }
    if (_$data.containsKey('ButtonText')) {
      final l$ButtonText = ButtonText;
      result$data['ButtonText'] =
          l$ButtonText == null ? null : toJson$Enum$OrderBy(l$ButtonText);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$ButtonBlockOrderByInput<Input$ButtonBlockOrderByInput>
      get copyWith => CopyWith$Input$ButtonBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ButtonBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$ButtonLink = ButtonLink;
    final lOther$ButtonLink = other.ButtonLink;
    if (_$data.containsKey('ButtonLink') !=
        other._$data.containsKey('ButtonLink')) {
      return false;
    }
    if (l$ButtonLink != lOther$ButtonLink) {
      return false;
    }
    final l$ButtonText = ButtonText;
    final lOther$ButtonText = other.ButtonText;
    if (_$data.containsKey('ButtonText') !=
        other._$data.containsKey('ButtonText')) {
      return false;
    }
    if (l$ButtonText != lOther$ButtonText) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$ButtonLink = ButtonLink;
    final l$ButtonText = ButtonText;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('ButtonLink') ? l$ButtonLink : const {},
      _$data.containsKey('ButtonText') ? l$ButtonText : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ButtonBlockOrderByInput<TRes> {
  factory CopyWith$Input$ButtonBlockOrderByInput(
    Input$ButtonBlockOrderByInput instance,
    TRes Function(Input$ButtonBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$ButtonBlockOrderByInput;

  factory CopyWith$Input$ButtonBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ButtonBlockOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? ButtonLink,
    Enum$OrderBy? ButtonText,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$ButtonBlockOrderByInput<TRes>
    implements CopyWith$Input$ButtonBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$ButtonBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ButtonBlockOrderByInput _instance;

  final TRes Function(Input$ButtonBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? ButtonLink = _undefined,
    Object? ButtonText = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ButtonBlockOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (ButtonLink != _undefined)
          'ButtonLink': (ButtonLink as Enum$OrderBy?),
        if (ButtonText != _undefined)
          'ButtonText': (ButtonText as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$ButtonBlockOrderByInput<TRes>
    implements CopyWith$Input$ButtonBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ButtonBlockOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? ButtonLink,
    Enum$OrderBy? ButtonText,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$ButtonBlockWhereInput {
  factory Input$ButtonBlockWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$StringFilterInput? ButtonLink,
    Input$SearchableStringFilterInput? ButtonText,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ButtonBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ButtonBlockWhereInput?>? $_not,
    List<Input$ButtonBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$ButtonBlockWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (ButtonLink != null) r'ButtonLink': ButtonLink,
        if (ButtonText != null) r'ButtonText': ButtonText,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ButtonBlockWhereInput._(this._$data);

  factory Input$ButtonBlockWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('ButtonLink')) {
      final l$ButtonLink = data['ButtonLink'];
      result$data['ButtonLink'] = l$ButtonLink == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ButtonLink as Map<String, dynamic>));
    }
    if (data.containsKey('ButtonText')) {
      final l$ButtonText = data['ButtonText'];
      result$data['ButtonText'] = l$ButtonText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$ButtonText as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ButtonBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ButtonBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ButtonBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$ButtonBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$StringFilterInput? get ButtonLink =>
      (_$data['ButtonLink'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get ButtonText =>
      (_$data['ButtonText'] as Input$SearchableStringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$ButtonBlockWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$ButtonBlockWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$ButtonBlockWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$ButtonBlockWhereInput?>?);

  List<Input$ButtonBlockWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$ButtonBlockWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('ButtonLink')) {
      final l$ButtonLink = ButtonLink;
      result$data['ButtonLink'] = l$ButtonLink?.toJson();
    }
    if (_$data.containsKey('ButtonText')) {
      final l$ButtonText = ButtonText;
      result$data['ButtonText'] = l$ButtonText?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ButtonBlockWhereInput<Input$ButtonBlockWhereInput>
      get copyWith => CopyWith$Input$ButtonBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ButtonBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$ButtonLink = ButtonLink;
    final lOther$ButtonLink = other.ButtonLink;
    if (_$data.containsKey('ButtonLink') !=
        other._$data.containsKey('ButtonLink')) {
      return false;
    }
    if (l$ButtonLink != lOther$ButtonLink) {
      return false;
    }
    final l$ButtonText = ButtonText;
    final lOther$ButtonText = other.ButtonText;
    if (_$data.containsKey('ButtonText') !=
        other._$data.containsKey('ButtonText')) {
      return false;
    }
    if (l$ButtonText != lOther$ButtonText) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$ButtonLink = ButtonLink;
    final l$ButtonText = ButtonText;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('ButtonLink') ? l$ButtonLink : const {},
      _$data.containsKey('ButtonText') ? l$ButtonText : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ButtonBlockWhereInput<TRes> {
  factory CopyWith$Input$ButtonBlockWhereInput(
    Input$ButtonBlockWhereInput instance,
    TRes Function(Input$ButtonBlockWhereInput) then,
  ) = _CopyWithImpl$Input$ButtonBlockWhereInput;

  factory CopyWith$Input$ButtonBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ButtonBlockWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$StringFilterInput? ButtonLink,
    Input$SearchableStringFilterInput? ButtonText,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ButtonBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ButtonBlockWhereInput?>? $_not,
    List<Input$ButtonBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$StringFilterInput<TRes> get ButtonLink;
  CopyWith$Input$SearchableStringFilterInput<TRes> get ButtonText;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$ButtonBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ButtonBlockWhereInput<
                      Input$ButtonBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$ButtonBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ButtonBlockWhereInput<
                      Input$ButtonBlockWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$ButtonBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ButtonBlockWhereInput<
                      Input$ButtonBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$ButtonBlockWhereInput<TRes>
    implements CopyWith$Input$ButtonBlockWhereInput<TRes> {
  _CopyWithImpl$Input$ButtonBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$ButtonBlockWhereInput _instance;

  final TRes Function(Input$ButtonBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? ButtonLink = _undefined,
    Object? ButtonText = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ButtonBlockWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (ButtonLink != _undefined)
          'ButtonLink': (ButtonLink as Input$StringFilterInput?),
        if (ButtonText != _undefined)
          'ButtonText': (ButtonText as Input$SearchableStringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$ButtonBlockWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$ButtonBlockWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$ButtonBlockWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ButtonLink {
    final local$ButtonLink = _instance.ButtonLink;
    return local$ButtonLink == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ButtonLink, (e) => call(ButtonLink: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get ButtonText {
    final local$ButtonText = _instance.ButtonText;
    return local$ButtonText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$ButtonText, (e) => call(ButtonText: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$ButtonBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ButtonBlockWhereInput<
                          Input$ButtonBlockWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$ButtonBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$ButtonBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ButtonBlockWhereInput<
                          Input$ButtonBlockWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$ButtonBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$ButtonBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ButtonBlockWhereInput<
                          Input$ButtonBlockWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$ButtonBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$ButtonBlockWhereInput<TRes>
    implements CopyWith$Input$ButtonBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$ButtonBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$StringFilterInput? ButtonLink,
    Input$SearchableStringFilterInput? ButtonText,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ButtonBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ButtonBlockWhereInput?>? $_not,
    List<Input$ButtonBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ButtonLink =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get ButtonText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$CategoryModelOrderByInput {
  factory Input$CategoryModelOrderByInput({
    Enum$OrderBy? Description,
    Enum$OrderBy? Id,
    Enum$OrderBy? Name,
  }) =>
      Input$CategoryModelOrderByInput._({
        if (Description != null) r'Description': Description,
        if (Id != null) r'Id': Id,
        if (Name != null) r'Name': Name,
      });

  Input$CategoryModelOrderByInput._(this._$data);

  factory Input$CategoryModelOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Description')) {
      final l$Description = data['Description'];
      result$data['Description'] = l$Description == null
          ? null
          : fromJson$Enum$OrderBy((l$Description as String));
    }
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] =
          l$Id == null ? null : fromJson$Enum$OrderBy((l$Id as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    return Input$CategoryModelOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Description => (_$data['Description'] as Enum$OrderBy?);

  Enum$OrderBy? get Id => (_$data['Id'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Description')) {
      final l$Description = Description;
      result$data['Description'] =
          l$Description == null ? null : toJson$Enum$OrderBy(l$Description);
    }
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id == null ? null : toJson$Enum$OrderBy(l$Id);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    return result$data;
  }

  CopyWith$Input$CategoryModelOrderByInput<Input$CategoryModelOrderByInput>
      get copyWith => CopyWith$Input$CategoryModelOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$CategoryModelOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Description = Description;
    final lOther$Description = other.Description;
    if (_$data.containsKey('Description') !=
        other._$data.containsKey('Description')) {
      return false;
    }
    if (l$Description != lOther$Description) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Description = Description;
    final l$Id = Id;
    final l$Name = Name;
    return Object.hashAll([
      _$data.containsKey('Description') ? l$Description : const {},
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Name') ? l$Name : const {},
    ]);
  }
}

abstract class CopyWith$Input$CategoryModelOrderByInput<TRes> {
  factory CopyWith$Input$CategoryModelOrderByInput(
    Input$CategoryModelOrderByInput instance,
    TRes Function(Input$CategoryModelOrderByInput) then,
  ) = _CopyWithImpl$Input$CategoryModelOrderByInput;

  factory CopyWith$Input$CategoryModelOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$CategoryModelOrderByInput;

  TRes call({
    Enum$OrderBy? Description,
    Enum$OrderBy? Id,
    Enum$OrderBy? Name,
  });
}

class _CopyWithImpl$Input$CategoryModelOrderByInput<TRes>
    implements CopyWith$Input$CategoryModelOrderByInput<TRes> {
  _CopyWithImpl$Input$CategoryModelOrderByInput(
    this._instance,
    this._then,
  );

  final Input$CategoryModelOrderByInput _instance;

  final TRes Function(Input$CategoryModelOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Description = _undefined,
    Object? Id = _undefined,
    Object? Name = _undefined,
  }) =>
      _then(Input$CategoryModelOrderByInput._({
        ..._instance._$data,
        if (Description != _undefined)
          'Description': (Description as Enum$OrderBy?),
        if (Id != _undefined) 'Id': (Id as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
      }));
}

class _CopyWithStubImpl$Input$CategoryModelOrderByInput<TRes>
    implements CopyWith$Input$CategoryModelOrderByInput<TRes> {
  _CopyWithStubImpl$Input$CategoryModelOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Description,
    Enum$OrderBy? Id,
    Enum$OrderBy? Name,
  }) =>
      _res;
}

class Input$CategoryModelWhereInput {
  factory Input$CategoryModelWhereInput({
    Input$StringFilterInput? Description,
    Input$IntFilterInput? Id,
    Input$StringFilterInput? Name,
  }) =>
      Input$CategoryModelWhereInput._({
        if (Description != null) r'Description': Description,
        if (Id != null) r'Id': Id,
        if (Name != null) r'Name': Name,
      });

  Input$CategoryModelWhereInput._(this._$data);

  factory Input$CategoryModelWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Description')) {
      final l$Description = data['Description'];
      result$data['Description'] = l$Description == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Description as Map<String, dynamic>));
    }
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] = l$Id == null
          ? null
          : Input$IntFilterInput.fromJson((l$Id as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$StringFilterInput.fromJson((l$Name as Map<String, dynamic>));
    }
    return Input$CategoryModelWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Description =>
      (_$data['Description'] as Input$StringFilterInput?);

  Input$IntFilterInput? get Id => (_$data['Id'] as Input$IntFilterInput?);

  Input$StringFilterInput? get Name =>
      (_$data['Name'] as Input$StringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Description')) {
      final l$Description = Description;
      result$data['Description'] = l$Description?.toJson();
    }
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$CategoryModelWhereInput<Input$CategoryModelWhereInput>
      get copyWith => CopyWith$Input$CategoryModelWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$CategoryModelWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Description = Description;
    final lOther$Description = other.Description;
    if (_$data.containsKey('Description') !=
        other._$data.containsKey('Description')) {
      return false;
    }
    if (l$Description != lOther$Description) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Description = Description;
    final l$Id = Id;
    final l$Name = Name;
    return Object.hashAll([
      _$data.containsKey('Description') ? l$Description : const {},
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Name') ? l$Name : const {},
    ]);
  }
}

abstract class CopyWith$Input$CategoryModelWhereInput<TRes> {
  factory CopyWith$Input$CategoryModelWhereInput(
    Input$CategoryModelWhereInput instance,
    TRes Function(Input$CategoryModelWhereInput) then,
  ) = _CopyWithImpl$Input$CategoryModelWhereInput;

  factory CopyWith$Input$CategoryModelWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$CategoryModelWhereInput;

  TRes call({
    Input$StringFilterInput? Description,
    Input$IntFilterInput? Id,
    Input$StringFilterInput? Name,
  });
  CopyWith$Input$StringFilterInput<TRes> get Description;
  CopyWith$Input$IntFilterInput<TRes> get Id;
  CopyWith$Input$StringFilterInput<TRes> get Name;
}

class _CopyWithImpl$Input$CategoryModelWhereInput<TRes>
    implements CopyWith$Input$CategoryModelWhereInput<TRes> {
  _CopyWithImpl$Input$CategoryModelWhereInput(
    this._instance,
    this._then,
  );

  final Input$CategoryModelWhereInput _instance;

  final TRes Function(Input$CategoryModelWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Description = _undefined,
    Object? Id = _undefined,
    Object? Name = _undefined,
  }) =>
      _then(Input$CategoryModelWhereInput._({
        ..._instance._$data,
        if (Description != _undefined)
          'Description': (Description as Input$StringFilterInput?),
        if (Id != _undefined) 'Id': (Id as Input$IntFilterInput?),
        if (Name != _undefined) 'Name': (Name as Input$StringFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Description {
    final local$Description = _instance.Description;
    return local$Description == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Description, (e) => call(Description: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get Id {
    final local$Id = _instance.Id;
    return local$Id == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(local$Id, (e) => call(Id: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Name, (e) => call(Name: e));
  }
}

class _CopyWithStubImpl$Input$CategoryModelWhereInput<TRes>
    implements CopyWith$Input$CategoryModelWhereInput<TRes> {
  _CopyWithStubImpl$Input$CategoryModelWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Description,
    Input$IntFilterInput? Id,
    Input$StringFilterInput? Name,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Description =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get Id =>
      CopyWith$Input$IntFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Name =>
      CopyWith$Input$StringFilterInput.stub(_res);
}

class Input$CityOrderByInput {
  factory Input$CityOrderByInput({
    Enum$OrderBy? City_Name,
    Enum$OrderBy? Description,
    Enum$OrderBy? Teaser_Text,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  }) =>
      Input$CityOrderByInput._({
        if (City_Name != null) r'City_Name': City_Name,
        if (Description != null) r'Description': Description,
        if (Teaser_Text != null) r'Teaser_Text': Teaser_Text,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
      });

  Input$CityOrderByInput._(this._$data);

  factory Input$CityOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('City_Name')) {
      final l$City_Name = data['City_Name'];
      result$data['City_Name'] = l$City_Name == null
          ? null
          : fromJson$Enum$OrderBy((l$City_Name as String));
    }
    if (data.containsKey('Description')) {
      final l$Description = data['Description'];
      result$data['Description'] = l$Description == null
          ? null
          : fromJson$Enum$OrderBy((l$Description as String));
    }
    if (data.containsKey('Teaser_Text')) {
      final l$Teaser_Text = data['Teaser_Text'];
      result$data['Teaser_Text'] = l$Teaser_Text == null
          ? null
          : fromJson$Enum$OrderBy((l$Teaser_Text as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    return Input$CityOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get City_Name => (_$data['City_Name'] as Enum$OrderBy?);

  Enum$OrderBy? get Description => (_$data['Description'] as Enum$OrderBy?);

  Enum$OrderBy? get Teaser_Text => (_$data['Teaser_Text'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('City_Name')) {
      final l$City_Name = City_Name;
      result$data['City_Name'] =
          l$City_Name == null ? null : toJson$Enum$OrderBy(l$City_Name);
    }
    if (_$data.containsKey('Description')) {
      final l$Description = Description;
      result$data['Description'] =
          l$Description == null ? null : toJson$Enum$OrderBy(l$Description);
    }
    if (_$data.containsKey('Teaser_Text')) {
      final l$Teaser_Text = Teaser_Text;
      result$data['Teaser_Text'] =
          l$Teaser_Text == null ? null : toJson$Enum$OrderBy(l$Teaser_Text);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    return result$data;
  }

  CopyWith$Input$CityOrderByInput<Input$CityOrderByInput> get copyWith =>
      CopyWith$Input$CityOrderByInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$CityOrderByInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$City_Name = City_Name;
    final lOther$City_Name = other.City_Name;
    if (_$data.containsKey('City_Name') !=
        other._$data.containsKey('City_Name')) {
      return false;
    }
    if (l$City_Name != lOther$City_Name) {
      return false;
    }
    final l$Description = Description;
    final lOther$Description = other.Description;
    if (_$data.containsKey('Description') !=
        other._$data.containsKey('Description')) {
      return false;
    }
    if (l$Description != lOther$Description) {
      return false;
    }
    final l$Teaser_Text = Teaser_Text;
    final lOther$Teaser_Text = other.Teaser_Text;
    if (_$data.containsKey('Teaser_Text') !=
        other._$data.containsKey('Teaser_Text')) {
      return false;
    }
    if (l$Teaser_Text != lOther$Teaser_Text) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$City_Name = City_Name;
    final l$Description = Description;
    final l$Teaser_Text = Teaser_Text;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    return Object.hashAll([
      _$data.containsKey('City_Name') ? l$City_Name : const {},
      _$data.containsKey('Description') ? l$Description : const {},
      _$data.containsKey('Teaser_Text') ? l$Teaser_Text : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
    ]);
  }
}

abstract class CopyWith$Input$CityOrderByInput<TRes> {
  factory CopyWith$Input$CityOrderByInput(
    Input$CityOrderByInput instance,
    TRes Function(Input$CityOrderByInput) then,
  ) = _CopyWithImpl$Input$CityOrderByInput;

  factory CopyWith$Input$CityOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$CityOrderByInput;

  TRes call({
    Enum$OrderBy? City_Name,
    Enum$OrderBy? Description,
    Enum$OrderBy? Teaser_Text,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  });
}

class _CopyWithImpl$Input$CityOrderByInput<TRes>
    implements CopyWith$Input$CityOrderByInput<TRes> {
  _CopyWithImpl$Input$CityOrderByInput(
    this._instance,
    this._then,
  );

  final Input$CityOrderByInput _instance;

  final TRes Function(Input$CityOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? City_Name = _undefined,
    Object? Description = _undefined,
    Object? Teaser_Text = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
  }) =>
      _then(Input$CityOrderByInput._({
        ..._instance._$data,
        if (City_Name != _undefined) 'City_Name': (City_Name as Enum$OrderBy?),
        if (Description != _undefined)
          'Description': (Description as Enum$OrderBy?),
        if (Teaser_Text != _undefined)
          'Teaser_Text': (Teaser_Text as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
      }));
}

class _CopyWithStubImpl$Input$CityOrderByInput<TRes>
    implements CopyWith$Input$CityOrderByInput<TRes> {
  _CopyWithStubImpl$Input$CityOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? City_Name,
    Enum$OrderBy? Description,
    Enum$OrderBy? Teaser_Text,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  }) =>
      _res;
}

class Input$CityWhereInput {
  factory Input$CityWhereInput({
    Input$SearchableStringFilterInput? City_Name,
    Input$SearchableStringFilterInput? Description,
    Input$SearchableStringFilterInput? Teaser_Text,
    List<Input$CityWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$CityWhereInput?>? $_not,
    List<Input$CityWhereInput?>? $_or,
  }) =>
      Input$CityWhereInput._({
        if (City_Name != null) r'City_Name': City_Name,
        if (Description != null) r'Description': Description,
        if (Teaser_Text != null) r'Teaser_Text': Teaser_Text,
        if ($_and != null) r'_and': $_and,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
      });

  Input$CityWhereInput._(this._$data);

  factory Input$CityWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('City_Name')) {
      final l$City_Name = data['City_Name'];
      result$data['City_Name'] = l$City_Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$City_Name as Map<String, dynamic>));
    }
    if (data.containsKey('Description')) {
      final l$Description = data['Description'];
      result$data['Description'] = l$Description == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Description as Map<String, dynamic>));
    }
    if (data.containsKey('Teaser_Text')) {
      final l$Teaser_Text = data['Teaser_Text'];
      result$data['Teaser_Text'] = l$Teaser_Text == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Teaser_Text as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$CityWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$CityWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$CityWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$CityWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SearchableStringFilterInput? get City_Name =>
      (_$data['City_Name'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Description =>
      (_$data['Description'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Teaser_Text =>
      (_$data['Teaser_Text'] as Input$SearchableStringFilterInput?);

  List<Input$CityWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$CityWhereInput?>?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$CityWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$CityWhereInput?>?);

  List<Input$CityWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$CityWhereInput?>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('City_Name')) {
      final l$City_Name = City_Name;
      result$data['City_Name'] = l$City_Name?.toJson();
    }
    if (_$data.containsKey('Description')) {
      final l$Description = Description;
      result$data['Description'] = l$Description?.toJson();
    }
    if (_$data.containsKey('Teaser_Text')) {
      final l$Teaser_Text = Teaser_Text;
      result$data['Teaser_Text'] = l$Teaser_Text?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$CityWhereInput<Input$CityWhereInput> get copyWith =>
      CopyWith$Input$CityWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$CityWhereInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$City_Name = City_Name;
    final lOther$City_Name = other.City_Name;
    if (_$data.containsKey('City_Name') !=
        other._$data.containsKey('City_Name')) {
      return false;
    }
    if (l$City_Name != lOther$City_Name) {
      return false;
    }
    final l$Description = Description;
    final lOther$Description = other.Description;
    if (_$data.containsKey('Description') !=
        other._$data.containsKey('Description')) {
      return false;
    }
    if (l$Description != lOther$Description) {
      return false;
    }
    final l$Teaser_Text = Teaser_Text;
    final lOther$Teaser_Text = other.Teaser_Text;
    if (_$data.containsKey('Teaser_Text') !=
        other._$data.containsKey('Teaser_Text')) {
      return false;
    }
    if (l$Teaser_Text != lOther$Teaser_Text) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$City_Name = City_Name;
    final l$Description = Description;
    final l$Teaser_Text = Teaser_Text;
    final l$$_and = $_and;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    return Object.hashAll([
      _$data.containsKey('City_Name') ? l$City_Name : const {},
      _$data.containsKey('Description') ? l$Description : const {},
      _$data.containsKey('Teaser_Text') ? l$Teaser_Text : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$CityWhereInput<TRes> {
  factory CopyWith$Input$CityWhereInput(
    Input$CityWhereInput instance,
    TRes Function(Input$CityWhereInput) then,
  ) = _CopyWithImpl$Input$CityWhereInput;

  factory CopyWith$Input$CityWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$CityWhereInput;

  TRes call({
    Input$SearchableStringFilterInput? City_Name,
    Input$SearchableStringFilterInput? Description,
    Input$SearchableStringFilterInput? Teaser_Text,
    List<Input$CityWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$CityWhereInput?>? $_not,
    List<Input$CityWhereInput?>? $_or,
  });
  CopyWith$Input$SearchableStringFilterInput<TRes> get City_Name;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Description;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Teaser_Text;
  TRes $_and(
      Iterable<Input$CityWhereInput?>? Function(
              Iterable<CopyWith$Input$CityWhereInput<Input$CityWhereInput>?>?)
          _fn);
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$CityWhereInput?>? Function(
              Iterable<CopyWith$Input$CityWhereInput<Input$CityWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$CityWhereInput?>? Function(
              Iterable<CopyWith$Input$CityWhereInput<Input$CityWhereInput>?>?)
          _fn);
}

class _CopyWithImpl$Input$CityWhereInput<TRes>
    implements CopyWith$Input$CityWhereInput<TRes> {
  _CopyWithImpl$Input$CityWhereInput(
    this._instance,
    this._then,
  );

  final Input$CityWhereInput _instance;

  final TRes Function(Input$CityWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? City_Name = _undefined,
    Object? Description = _undefined,
    Object? Teaser_Text = _undefined,
    Object? $_and = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
  }) =>
      _then(Input$CityWhereInput._({
        ..._instance._$data,
        if (City_Name != _undefined)
          'City_Name': (City_Name as Input$SearchableStringFilterInput?),
        if (Description != _undefined)
          'Description': (Description as Input$SearchableStringFilterInput?),
        if (Teaser_Text != _undefined)
          'Teaser_Text': (Teaser_Text as Input$SearchableStringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$CityWhereInput?>?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$CityWhereInput?>?),
        if ($_or != _undefined) '_or': ($_or as List<Input$CityWhereInput?>?),
      }));

  CopyWith$Input$SearchableStringFilterInput<TRes> get City_Name {
    final local$City_Name = _instance.City_Name;
    return local$City_Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$City_Name, (e) => call(City_Name: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Description {
    final local$Description = _instance.Description;
    return local$Description == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Description, (e) => call(Description: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Teaser_Text {
    final local$Teaser_Text = _instance.Teaser_Text;
    return local$Teaser_Text == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Teaser_Text, (e) => call(Teaser_Text: e));
  }

  TRes $_and(
          Iterable<Input$CityWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$CityWhereInput<Input$CityWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$CityWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$CityWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$CityWhereInput<Input$CityWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$CityWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$CityWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$CityWhereInput<Input$CityWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$CityWhereInput(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Input$CityWhereInput<TRes>
    implements CopyWith$Input$CityWhereInput<TRes> {
  _CopyWithStubImpl$Input$CityWhereInput(this._res);

  TRes _res;

  call({
    Input$SearchableStringFilterInput? City_Name,
    Input$SearchableStringFilterInput? Description,
    Input$SearchableStringFilterInput? Teaser_Text,
    List<Input$CityWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$CityWhereInput?>? $_not,
    List<Input$CityWhereInput?>? $_or,
  }) =>
      _res;

  CopyWith$Input$SearchableStringFilterInput<TRes> get City_Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Description =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Teaser_Text =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;
}

class Input$ContactBlockOrderByInput {
  factory Input$ContactBlockOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContactPageLink,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? LinkText,
    Enum$OrderBy? LinkUrl,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$ContactBlockOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContactPageLink != null) r'ContactPageLink': ContactPageLink,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (Heading != null) r'Heading': Heading,
        if (Image != null) r'Image': Image,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (LinkText != null) r'LinkText': LinkText,
        if (LinkUrl != null) r'LinkUrl': LinkUrl,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ContactBlockOrderByInput._(this._$data);

  factory Input$ContactBlockOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContactPageLink')) {
      final l$ContactPageLink = data['ContactPageLink'];
      result$data['ContactPageLink'] = l$ContactPageLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContactPageLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : fromJson$Enum$OrderBy((l$Heading as String));
    }
    if (data.containsKey('Image')) {
      final l$Image = data['Image'];
      result$data['Image'] = l$Image == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$Image as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('LinkText')) {
      final l$LinkText = data['LinkText'];
      result$data['LinkText'] = l$LinkText == null
          ? null
          : fromJson$Enum$OrderBy((l$LinkText as String));
    }
    if (data.containsKey('LinkUrl')) {
      final l$LinkUrl = data['LinkUrl'];
      result$data['LinkUrl'] = l$LinkUrl == null
          ? null
          : fromJson$Enum$OrderBy((l$LinkUrl as String));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$ContactBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContactPageLink =>
      (_$data['ContactPageLink'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Heading => (_$data['Heading'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get Image =>
      (_$data['Image'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get LinkText => (_$data['LinkText'] as Enum$OrderBy?);

  Enum$OrderBy? get LinkUrl => (_$data['LinkUrl'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContactPageLink')) {
      final l$ContactPageLink = ContactPageLink;
      result$data['ContactPageLink'] = l$ContactPageLink?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] =
          l$Heading == null ? null : toJson$Enum$OrderBy(l$Heading);
    }
    if (_$data.containsKey('Image')) {
      final l$Image = Image;
      result$data['Image'] = l$Image?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('LinkText')) {
      final l$LinkText = LinkText;
      result$data['LinkText'] =
          l$LinkText == null ? null : toJson$Enum$OrderBy(l$LinkText);
    }
    if (_$data.containsKey('LinkUrl')) {
      final l$LinkUrl = LinkUrl;
      result$data['LinkUrl'] =
          l$LinkUrl == null ? null : toJson$Enum$OrderBy(l$LinkUrl);
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$ContactBlockOrderByInput<Input$ContactBlockOrderByInput>
      get copyWith => CopyWith$Input$ContactBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContactBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContactPageLink = ContactPageLink;
    final lOther$ContactPageLink = other.ContactPageLink;
    if (_$data.containsKey('ContactPageLink') !=
        other._$data.containsKey('ContactPageLink')) {
      return false;
    }
    if (l$ContactPageLink != lOther$ContactPageLink) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$Image = Image;
    final lOther$Image = other.Image;
    if (_$data.containsKey('Image') != other._$data.containsKey('Image')) {
      return false;
    }
    if (l$Image != lOther$Image) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$LinkText = LinkText;
    final lOther$LinkText = other.LinkText;
    if (_$data.containsKey('LinkText') !=
        other._$data.containsKey('LinkText')) {
      return false;
    }
    if (l$LinkText != lOther$LinkText) {
      return false;
    }
    final l$LinkUrl = LinkUrl;
    final lOther$LinkUrl = other.LinkUrl;
    if (_$data.containsKey('LinkUrl') != other._$data.containsKey('LinkUrl')) {
      return false;
    }
    if (l$LinkUrl != lOther$LinkUrl) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContactPageLink = ContactPageLink;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$Heading = Heading;
    final l$Image = Image;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$LinkText = LinkText;
    final l$LinkUrl = LinkUrl;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContactPageLink') ? l$ContactPageLink : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('Image') ? l$Image : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('LinkText') ? l$LinkText : const {},
      _$data.containsKey('LinkUrl') ? l$LinkUrl : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContactBlockOrderByInput<TRes> {
  factory CopyWith$Input$ContactBlockOrderByInput(
    Input$ContactBlockOrderByInput instance,
    TRes Function(Input$ContactBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$ContactBlockOrderByInput;

  factory CopyWith$Input$ContactBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContactBlockOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContactPageLink,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? LinkText,
    Enum$OrderBy? LinkUrl,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContactPageLink;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$ContactBlockOrderByInput<TRes>
    implements CopyWith$Input$ContactBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$ContactBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContactBlockOrderByInput _instance;

  final TRes Function(Input$ContactBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContactPageLink = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? Heading = _undefined,
    Object? Image = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? LinkText = _undefined,
    Object? LinkUrl = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ContactBlockOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContactPageLink != _undefined)
          'ContactPageLink':
              (ContactPageLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (Heading != _undefined) 'Heading': (Heading as Enum$OrderBy?),
        if (Image != _undefined)
          'Image': (Image as Input$ContentModelReferenceOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (LinkText != _undefined) 'LinkText': (LinkText as Enum$OrderBy?),
        if (LinkUrl != _undefined) 'LinkUrl': (LinkUrl as Enum$OrderBy?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContactPageLink {
    final local$ContactPageLink = _instance.ContactPageLink;
    return local$ContactPageLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContactPageLink, (e) => call(ContactPageLink: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image {
    final local$Image = _instance.Image;
    return local$Image == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$Image, (e) => call(Image: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$ContactBlockOrderByInput<TRes>
    implements CopyWith$Input$ContactBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContactBlockOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContactPageLink,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? LinkText,
    Enum$OrderBy? LinkUrl,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContactPageLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$ContactBlockWhereInput {
  factory Input$ContactBlockWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContactPageLink,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? LinkText,
    Input$StringFilterInput? LinkUrl,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ContactBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContactBlockWhereInput?>? $_not,
    List<Input$ContactBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$ContactBlockWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContactPageLink != null) r'ContactPageLink': ContactPageLink,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (Heading != null) r'Heading': Heading,
        if (Image != null) r'Image': Image,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (LinkText != null) r'LinkText': LinkText,
        if (LinkUrl != null) r'LinkUrl': LinkUrl,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ContactBlockWhereInput._(this._$data);

  factory Input$ContactBlockWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContactPageLink')) {
      final l$ContactPageLink = data['ContactPageLink'];
      result$data['ContactPageLink'] = l$ContactPageLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContactPageLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Heading as Map<String, dynamic>));
    }
    if (data.containsKey('Image')) {
      final l$Image = data['Image'];
      result$data['Image'] = l$Image == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$Image as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('LinkText')) {
      final l$LinkText = data['LinkText'];
      result$data['LinkText'] = l$LinkText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$LinkText as Map<String, dynamic>));
    }
    if (data.containsKey('LinkUrl')) {
      final l$LinkUrl = data['LinkUrl'];
      result$data['LinkUrl'] = l$LinkUrl == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$LinkUrl as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContactBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContactBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContactBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$ContactBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContactPageLink =>
      (_$data['ContactPageLink'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Heading =>
      (_$data['Heading'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get Image =>
      (_$data['Image'] as Input$ContentModelReferenceWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get LinkText =>
      (_$data['LinkText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get LinkUrl =>
      (_$data['LinkUrl'] as Input$StringFilterInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$ContactBlockWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$ContactBlockWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$ContactBlockWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$ContactBlockWhereInput?>?);

  List<Input$ContactBlockWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$ContactBlockWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContactPageLink')) {
      final l$ContactPageLink = ContactPageLink;
      result$data['ContactPageLink'] = l$ContactPageLink?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] = l$Heading?.toJson();
    }
    if (_$data.containsKey('Image')) {
      final l$Image = Image;
      result$data['Image'] = l$Image?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('LinkText')) {
      final l$LinkText = LinkText;
      result$data['LinkText'] = l$LinkText?.toJson();
    }
    if (_$data.containsKey('LinkUrl')) {
      final l$LinkUrl = LinkUrl;
      result$data['LinkUrl'] = l$LinkUrl?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContactBlockWhereInput<Input$ContactBlockWhereInput>
      get copyWith => CopyWith$Input$ContactBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContactBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContactPageLink = ContactPageLink;
    final lOther$ContactPageLink = other.ContactPageLink;
    if (_$data.containsKey('ContactPageLink') !=
        other._$data.containsKey('ContactPageLink')) {
      return false;
    }
    if (l$ContactPageLink != lOther$ContactPageLink) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$Image = Image;
    final lOther$Image = other.Image;
    if (_$data.containsKey('Image') != other._$data.containsKey('Image')) {
      return false;
    }
    if (l$Image != lOther$Image) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$LinkText = LinkText;
    final lOther$LinkText = other.LinkText;
    if (_$data.containsKey('LinkText') !=
        other._$data.containsKey('LinkText')) {
      return false;
    }
    if (l$LinkText != lOther$LinkText) {
      return false;
    }
    final l$LinkUrl = LinkUrl;
    final lOther$LinkUrl = other.LinkUrl;
    if (_$data.containsKey('LinkUrl') != other._$data.containsKey('LinkUrl')) {
      return false;
    }
    if (l$LinkUrl != lOther$LinkUrl) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContactPageLink = ContactPageLink;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$Heading = Heading;
    final l$Image = Image;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$LinkText = LinkText;
    final l$LinkUrl = LinkUrl;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContactPageLink') ? l$ContactPageLink : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('Image') ? l$Image : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('LinkText') ? l$LinkText : const {},
      _$data.containsKey('LinkUrl') ? l$LinkUrl : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContactBlockWhereInput<TRes> {
  factory CopyWith$Input$ContactBlockWhereInput(
    Input$ContactBlockWhereInput instance,
    TRes Function(Input$ContactBlockWhereInput) then,
  ) = _CopyWithImpl$Input$ContactBlockWhereInput;

  factory CopyWith$Input$ContactBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContactBlockWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContactPageLink,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? LinkText,
    Input$StringFilterInput? LinkUrl,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ContactBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContactBlockWhereInput?>? $_not,
    List<Input$ContactBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContactPageLink;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$SearchableStringFilterInput<TRes> get LinkText;
  CopyWith$Input$StringFilterInput<TRes> get LinkUrl;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$ContactBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContactBlockWhereInput<
                      Input$ContactBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$ContactBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContactBlockWhereInput<
                      Input$ContactBlockWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$ContactBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContactBlockWhereInput<
                      Input$ContactBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$ContactBlockWhereInput<TRes>
    implements CopyWith$Input$ContactBlockWhereInput<TRes> {
  _CopyWithImpl$Input$ContactBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContactBlockWhereInput _instance;

  final TRes Function(Input$ContactBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContactPageLink = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? Heading = _undefined,
    Object? Image = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? LinkText = _undefined,
    Object? LinkUrl = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ContactBlockWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContactPageLink != _undefined)
          'ContactPageLink':
              (ContactPageLink as Input$ContentModelReferenceWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (Heading != _undefined)
          'Heading': (Heading as Input$SearchableStringFilterInput?),
        if (Image != _undefined)
          'Image': (Image as Input$ContentModelReferenceWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (LinkText != _undefined)
          'LinkText': (LinkText as Input$SearchableStringFilterInput?),
        if (LinkUrl != _undefined)
          'LinkUrl': (LinkUrl as Input$StringFilterInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$ContactBlockWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$ContactBlockWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$ContactBlockWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContactPageLink {
    final local$ContactPageLink = _instance.ContactPageLink;
    return local$ContactPageLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContactPageLink, (e) => call(ContactPageLink: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading {
    final local$Heading = _instance.Heading;
    return local$Heading == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Heading, (e) => call(Heading: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image {
    final local$Image = _instance.Image;
    return local$Image == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$Image, (e) => call(Image: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get LinkText {
    final local$LinkText = _instance.LinkText;
    return local$LinkText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$LinkText, (e) => call(LinkText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get LinkUrl {
    final local$LinkUrl = _instance.LinkUrl;
    return local$LinkUrl == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$LinkUrl, (e) => call(LinkUrl: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$ContactBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContactBlockWhereInput<
                          Input$ContactBlockWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$ContactBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$ContactBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContactBlockWhereInput<
                          Input$ContactBlockWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$ContactBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$ContactBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContactBlockWhereInput<
                          Input$ContactBlockWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$ContactBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$ContactBlockWhereInput<TRes>
    implements CopyWith$Input$ContactBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContactBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContactPageLink,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? LinkText,
    Input$StringFilterInput? LinkUrl,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ContactBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContactBlockWhereInput?>? $_not,
    List<Input$ContactBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContactPageLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get LinkText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get LinkUrl =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$ContactPageOrderByInput {
  factory Input$ContactPageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Enum$OrderBy? Email,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? Phone,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$ContactPageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (Email != null) r'Email': Email,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (Image != null) r'Image': Image,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (Phone != null) r'Phone': Phone,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ContactPageOrderByInput._(this._$data);

  factory Input$ContactPageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('Email')) {
      final l$Email = data['Email'];
      result$data['Email'] =
          l$Email == null ? null : fromJson$Enum$OrderBy((l$Email as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('Image')) {
      final l$Image = data['Image'];
      result$data['Image'] = l$Image == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$Image as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('Phone')) {
      final l$Phone = data['Phone'];
      result$data['Phone'] =
          l$Phone == null ? null : fromJson$Enum$OrderBy((l$Phone as String));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$ContactPageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Enum$OrderBy? get Email => (_$data['Email'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get Image =>
      (_$data['Image'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get Phone => (_$data['Phone'] as Enum$OrderBy?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('Email')) {
      final l$Email = Email;
      result$data['Email'] =
          l$Email == null ? null : toJson$Enum$OrderBy(l$Email);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('Image')) {
      final l$Image = Image;
      result$data['Image'] = l$Image?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('Phone')) {
      final l$Phone = Phone;
      result$data['Phone'] =
          l$Phone == null ? null : toJson$Enum$OrderBy(l$Phone);
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$ContactPageOrderByInput<Input$ContactPageOrderByInput>
      get copyWith => CopyWith$Input$ContactPageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContactPageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$Email = Email;
    final lOther$Email = other.Email;
    if (_$data.containsKey('Email') != other._$data.containsKey('Email')) {
      return false;
    }
    if (l$Email != lOther$Email) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$Image = Image;
    final lOther$Image = other.Image;
    if (_$data.containsKey('Image') != other._$data.containsKey('Image')) {
      return false;
    }
    if (l$Image != lOther$Image) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$Phone = Phone;
    final lOther$Phone = other.Phone;
    if (_$data.containsKey('Phone') != other._$data.containsKey('Phone')) {
      return false;
    }
    if (l$Phone != lOther$Phone) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$Email = Email;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$Image = Image;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$Phone = Phone;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('Email') ? l$Email : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('Image') ? l$Image : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('Phone') ? l$Phone : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContactPageOrderByInput<TRes> {
  factory CopyWith$Input$ContactPageOrderByInput(
    Input$ContactPageOrderByInput instance,
    TRes Function(Input$ContactPageOrderByInput) then,
  ) = _CopyWithImpl$Input$ContactPageOrderByInput;

  factory CopyWith$Input$ContactPageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContactPageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Enum$OrderBy? Email,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? Phone,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$ContactPageOrderByInput<TRes>
    implements CopyWith$Input$ContactPageOrderByInput<TRes> {
  _CopyWithImpl$Input$ContactPageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContactPageOrderByInput _instance;

  final TRes Function(Input$ContactPageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? Email = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? Image = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? Phone = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ContactPageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (Email != _undefined) 'Email': (Email as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (Image != _undefined)
          'Image': (Image as Input$ContentModelReferenceOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (Phone != _undefined) 'Phone': (Phone as Enum$OrderBy?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image {
    final local$Image = _instance.Image;
    return local$Image == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$Image, (e) => call(Image: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$ContactPageOrderByInput<TRes>
    implements CopyWith$Input$ContactPageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContactPageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Enum$OrderBy? Email,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? Phone,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$ContactPageWhereInput {
  factory Input$ContactPageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$SearchableStringFilterInput? Email,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$SearchableStringFilterInput? Phone,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ContactPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContactPageWhereInput?>? $_not,
    List<Input$ContactPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$ContactPageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (Email != null) r'Email': Email,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (Image != null) r'Image': Image,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (Phone != null) r'Phone': Phone,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ContactPageWhereInput._(this._$data);

  factory Input$ContactPageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('Email')) {
      final l$Email = data['Email'];
      result$data['Email'] = l$Email == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Email as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('Image')) {
      final l$Image = data['Image'];
      result$data['Image'] = l$Image == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$Image as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('Phone')) {
      final l$Phone = data['Phone'];
      result$data['Phone'] = l$Phone == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Phone as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContactPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContactPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContactPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$ContactPageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$SearchableStringFilterInput? get Email =>
      (_$data['Email'] as Input$SearchableStringFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$ContentModelReferenceWhereInput? get Image =>
      (_$data['Image'] as Input$ContentModelReferenceWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$SearchableStringFilterInput? get Phone =>
      (_$data['Phone'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$ContactPageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$ContactPageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$ContactPageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$ContactPageWhereInput?>?);

  List<Input$ContactPageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$ContactPageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('Email')) {
      final l$Email = Email;
      result$data['Email'] = l$Email?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('Image')) {
      final l$Image = Image;
      result$data['Image'] = l$Image?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('Phone')) {
      final l$Phone = Phone;
      result$data['Phone'] = l$Phone?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContactPageWhereInput<Input$ContactPageWhereInput>
      get copyWith => CopyWith$Input$ContactPageWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContactPageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$Email = Email;
    final lOther$Email = other.Email;
    if (_$data.containsKey('Email') != other._$data.containsKey('Email')) {
      return false;
    }
    if (l$Email != lOther$Email) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$Image = Image;
    final lOther$Image = other.Image;
    if (_$data.containsKey('Image') != other._$data.containsKey('Image')) {
      return false;
    }
    if (l$Image != lOther$Image) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$Phone = Phone;
    final lOther$Phone = other.Phone;
    if (_$data.containsKey('Phone') != other._$data.containsKey('Phone')) {
      return false;
    }
    if (l$Phone != lOther$Phone) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$Email = Email;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$Image = Image;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$Phone = Phone;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('Email') ? l$Email : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('Image') ? l$Image : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('Phone') ? l$Phone : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContactPageWhereInput<TRes> {
  factory CopyWith$Input$ContactPageWhereInput(
    Input$ContactPageWhereInput instance,
    TRes Function(Input$ContactPageWhereInput) then,
  ) = _CopyWithImpl$Input$ContactPageWhereInput;

  factory CopyWith$Input$ContactPageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContactPageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$SearchableStringFilterInput? Email,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$SearchableStringFilterInput? Phone,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ContactPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContactPageWhereInput?>? $_not,
    List<Input$ContactPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Email;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Phone;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$ContactPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContactPageWhereInput<
                      Input$ContactPageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$ContactPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContactPageWhereInput<
                      Input$ContactPageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$ContactPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContactPageWhereInput<
                      Input$ContactPageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$ContactPageWhereInput<TRes>
    implements CopyWith$Input$ContactPageWhereInput<TRes> {
  _CopyWithImpl$Input$ContactPageWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContactPageWhereInput _instance;

  final TRes Function(Input$ContactPageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? Email = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? Image = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? Phone = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ContactPageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (Email != _undefined)
          'Email': (Email as Input$SearchableStringFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (Image != _undefined)
          'Image': (Image as Input$ContentModelReferenceWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (Phone != _undefined)
          'Phone': (Phone as Input$SearchableStringFilterInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$ContactPageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$ContactPageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$ContactPageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Email {
    final local$Email = _instance.Email;
    return local$Email == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Email, (e) => call(Email: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image {
    final local$Image = _instance.Image;
    return local$Image == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$Image, (e) => call(Image: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Phone {
    final local$Phone = _instance.Phone;
    return local$Phone == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Phone, (e) => call(Phone: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$ContactPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContactPageWhereInput<
                          Input$ContactPageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$ContactPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$ContactPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContactPageWhereInput<
                          Input$ContactPageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$ContactPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$ContactPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContactPageWhereInput<
                          Input$ContactPageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$ContactPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$ContactPageWhereInput<TRes>
    implements CopyWith$Input$ContactPageWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContactPageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$SearchableStringFilterInput? Email,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$SearchableStringFilterInput? Phone,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ContactPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContactPageWhereInput?>? $_not,
    List<Input$ContactPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Email =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Phone =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$ContainerPageOrderByInput {
  factory Input$ContainerPageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$ContainerPageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ContainerPageOrderByInput._(this._$data);

  factory Input$ContainerPageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$ContainerPageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$ContainerPageOrderByInput<Input$ContainerPageOrderByInput>
      get copyWith => CopyWith$Input$ContainerPageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContainerPageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContainerPageOrderByInput<TRes> {
  factory CopyWith$Input$ContainerPageOrderByInput(
    Input$ContainerPageOrderByInput instance,
    TRes Function(Input$ContainerPageOrderByInput) then,
  ) = _CopyWithImpl$Input$ContainerPageOrderByInput;

  factory CopyWith$Input$ContainerPageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContainerPageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$ContainerPageOrderByInput<TRes>
    implements CopyWith$Input$ContainerPageOrderByInput<TRes> {
  _CopyWithImpl$Input$ContainerPageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContainerPageOrderByInput _instance;

  final TRes Function(Input$ContainerPageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ContainerPageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$ContainerPageOrderByInput<TRes>
    implements CopyWith$Input$ContainerPageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContainerPageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$ContainerPageWhereInput {
  factory Input$ContainerPageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ContainerPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContainerPageWhereInput?>? $_not,
    List<Input$ContainerPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$ContainerPageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ContainerPageWhereInput._(this._$data);

  factory Input$ContainerPageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContainerPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContainerPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContainerPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$ContainerPageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$ContainerPageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$ContainerPageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$ContainerPageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$ContainerPageWhereInput?>?);

  List<Input$ContainerPageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$ContainerPageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContainerPageWhereInput<Input$ContainerPageWhereInput>
      get copyWith => CopyWith$Input$ContainerPageWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContainerPageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContainerPageWhereInput<TRes> {
  factory CopyWith$Input$ContainerPageWhereInput(
    Input$ContainerPageWhereInput instance,
    TRes Function(Input$ContainerPageWhereInput) then,
  ) = _CopyWithImpl$Input$ContainerPageWhereInput;

  factory CopyWith$Input$ContainerPageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContainerPageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ContainerPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContainerPageWhereInput?>? $_not,
    List<Input$ContainerPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$ContainerPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContainerPageWhereInput<
                      Input$ContainerPageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$ContainerPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContainerPageWhereInput<
                      Input$ContainerPageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$ContainerPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContainerPageWhereInput<
                      Input$ContainerPageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$ContainerPageWhereInput<TRes>
    implements CopyWith$Input$ContainerPageWhereInput<TRes> {
  _CopyWithImpl$Input$ContainerPageWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContainerPageWhereInput _instance;

  final TRes Function(Input$ContainerPageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ContainerPageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$ContainerPageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$ContainerPageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$ContainerPageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$ContainerPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContainerPageWhereInput<
                          Input$ContainerPageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$ContainerPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$ContainerPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContainerPageWhereInput<
                          Input$ContainerPageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$ContainerPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$ContainerPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContainerPageWhereInput<
                          Input$ContainerPageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$ContainerPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$ContainerPageWhereInput<TRes>
    implements CopyWith$Input$ContainerPageWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContainerPageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$ContainerPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContainerPageWhereInput?>? $_not,
    List<Input$ContainerPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$ContentAreaItemModelSearchOrderByInput {
  factory Input$ContentAreaItemModelSearchOrderByInput({
    Input$ContentModelReferenceSearchOrderByInput? ContentLink,
    Enum$OrderBy? DisplayOption,
    Input$InlineBlockPropertyModelSearchOrderByInput? InlineBlock,
    Enum$OrderBy? Tag,
  }) =>
      Input$ContentAreaItemModelSearchOrderByInput._({
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (DisplayOption != null) r'DisplayOption': DisplayOption,
        if (InlineBlock != null) r'InlineBlock': InlineBlock,
        if (Tag != null) r'Tag': Tag,
      });

  Input$ContentAreaItemModelSearchOrderByInput._(this._$data);

  factory Input$ContentAreaItemModelSearchOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceSearchOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('DisplayOption')) {
      final l$DisplayOption = data['DisplayOption'];
      result$data['DisplayOption'] = l$DisplayOption == null
          ? null
          : fromJson$Enum$OrderBy((l$DisplayOption as String));
    }
    if (data.containsKey('InlineBlock')) {
      final l$InlineBlock = data['InlineBlock'];
      result$data['InlineBlock'] = l$InlineBlock == null
          ? null
          : Input$InlineBlockPropertyModelSearchOrderByInput.fromJson(
              (l$InlineBlock as Map<String, dynamic>));
    }
    if (data.containsKey('Tag')) {
      final l$Tag = data['Tag'];
      result$data['Tag'] =
          l$Tag == null ? null : fromJson$Enum$OrderBy((l$Tag as String));
    }
    return Input$ContentAreaItemModelSearchOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentModelReferenceSearchOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceSearchOrderByInput?);

  Enum$OrderBy? get DisplayOption => (_$data['DisplayOption'] as Enum$OrderBy?);

  Input$InlineBlockPropertyModelSearchOrderByInput? get InlineBlock =>
      (_$data['InlineBlock']
          as Input$InlineBlockPropertyModelSearchOrderByInput?);

  Enum$OrderBy? get Tag => (_$data['Tag'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('DisplayOption')) {
      final l$DisplayOption = DisplayOption;
      result$data['DisplayOption'] =
          l$DisplayOption == null ? null : toJson$Enum$OrderBy(l$DisplayOption);
    }
    if (_$data.containsKey('InlineBlock')) {
      final l$InlineBlock = InlineBlock;
      result$data['InlineBlock'] = l$InlineBlock?.toJson();
    }
    if (_$data.containsKey('Tag')) {
      final l$Tag = Tag;
      result$data['Tag'] = l$Tag == null ? null : toJson$Enum$OrderBy(l$Tag);
    }
    return result$data;
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<
          Input$ContentAreaItemModelSearchOrderByInput>
      get copyWith => CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentAreaItemModelSearchOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$DisplayOption = DisplayOption;
    final lOther$DisplayOption = other.DisplayOption;
    if (_$data.containsKey('DisplayOption') !=
        other._$data.containsKey('DisplayOption')) {
      return false;
    }
    if (l$DisplayOption != lOther$DisplayOption) {
      return false;
    }
    final l$InlineBlock = InlineBlock;
    final lOther$InlineBlock = other.InlineBlock;
    if (_$data.containsKey('InlineBlock') !=
        other._$data.containsKey('InlineBlock')) {
      return false;
    }
    if (l$InlineBlock != lOther$InlineBlock) {
      return false;
    }
    final l$Tag = Tag;
    final lOther$Tag = other.Tag;
    if (_$data.containsKey('Tag') != other._$data.containsKey('Tag')) {
      return false;
    }
    if (l$Tag != lOther$Tag) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentLink = ContentLink;
    final l$DisplayOption = DisplayOption;
    final l$InlineBlock = InlineBlock;
    final l$Tag = Tag;
    return Object.hashAll([
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('DisplayOption') ? l$DisplayOption : const {},
      _$data.containsKey('InlineBlock') ? l$InlineBlock : const {},
      _$data.containsKey('Tag') ? l$Tag : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> {
  factory CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
    Input$ContentAreaItemModelSearchOrderByInput instance,
    TRes Function(Input$ContentAreaItemModelSearchOrderByInput) then,
  ) = _CopyWithImpl$Input$ContentAreaItemModelSearchOrderByInput;

  factory CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentAreaItemModelSearchOrderByInput;

  TRes call({
    Input$ContentModelReferenceSearchOrderByInput? ContentLink,
    Enum$OrderBy? DisplayOption,
    Input$InlineBlockPropertyModelSearchOrderByInput? InlineBlock,
    Enum$OrderBy? Tag,
  });
  CopyWith$Input$ContentModelReferenceSearchOrderByInput<TRes> get ContentLink;
  CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput<TRes>
      get InlineBlock;
}

class _CopyWithImpl$Input$ContentAreaItemModelSearchOrderByInput<TRes>
    implements CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> {
  _CopyWithImpl$Input$ContentAreaItemModelSearchOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContentAreaItemModelSearchOrderByInput _instance;

  final TRes Function(Input$ContentAreaItemModelSearchOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? ContentLink = _undefined,
    Object? DisplayOption = _undefined,
    Object? InlineBlock = _undefined,
    Object? Tag = _undefined,
  }) =>
      _then(Input$ContentAreaItemModelSearchOrderByInput._({
        ..._instance._$data,
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceSearchOrderByInput?),
        if (DisplayOption != _undefined)
          'DisplayOption': (DisplayOption as Enum$OrderBy?),
        if (InlineBlock != _undefined)
          'InlineBlock': (InlineBlock
              as Input$InlineBlockPropertyModelSearchOrderByInput?),
        if (Tag != _undefined) 'Tag': (Tag as Enum$OrderBy?),
      }));

  CopyWith$Input$ContentModelReferenceSearchOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceSearchOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput<TRes>
      get InlineBlock {
    final local$InlineBlock = _instance.InlineBlock;
    return local$InlineBlock == null
        ? CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput(
            local$InlineBlock, (e) => call(InlineBlock: e));
  }
}

class _CopyWithStubImpl$Input$ContentAreaItemModelSearchOrderByInput<TRes>
    implements CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContentAreaItemModelSearchOrderByInput(this._res);

  TRes _res;

  call({
    Input$ContentModelReferenceSearchOrderByInput? ContentLink,
    Enum$OrderBy? DisplayOption,
    Input$InlineBlockPropertyModelSearchOrderByInput? InlineBlock,
    Enum$OrderBy? Tag,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceSearchOrderByInput<TRes>
      get ContentLink =>
          CopyWith$Input$ContentModelReferenceSearchOrderByInput.stub(_res);

  CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput<TRes>
      get InlineBlock =>
          CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput.stub(_res);
}

class Input$ContentAreaItemModelSearchWhereInput {
  factory Input$ContentAreaItemModelSearchWhereInput({
    Input$ContentModelReferenceSearchWhereInput? ContentLink,
    Input$SearchableStringFilterInput? DisplayOption,
    Input$InlineBlockPropertyModelSearchWhereInput? InlineBlock,
    Input$SearchableStringFilterInput? Tag,
  }) =>
      Input$ContentAreaItemModelSearchWhereInput._({
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (DisplayOption != null) r'DisplayOption': DisplayOption,
        if (InlineBlock != null) r'InlineBlock': InlineBlock,
        if (Tag != null) r'Tag': Tag,
      });

  Input$ContentAreaItemModelSearchWhereInput._(this._$data);

  factory Input$ContentAreaItemModelSearchWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceSearchWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('DisplayOption')) {
      final l$DisplayOption = data['DisplayOption'];
      result$data['DisplayOption'] = l$DisplayOption == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$DisplayOption as Map<String, dynamic>));
    }
    if (data.containsKey('InlineBlock')) {
      final l$InlineBlock = data['InlineBlock'];
      result$data['InlineBlock'] = l$InlineBlock == null
          ? null
          : Input$InlineBlockPropertyModelSearchWhereInput.fromJson(
              (l$InlineBlock as Map<String, dynamic>));
    }
    if (data.containsKey('Tag')) {
      final l$Tag = data['Tag'];
      result$data['Tag'] = l$Tag == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Tag as Map<String, dynamic>));
    }
    return Input$ContentAreaItemModelSearchWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentModelReferenceSearchWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceSearchWhereInput?);

  Input$SearchableStringFilterInput? get DisplayOption =>
      (_$data['DisplayOption'] as Input$SearchableStringFilterInput?);

  Input$InlineBlockPropertyModelSearchWhereInput? get InlineBlock =>
      (_$data['InlineBlock']
          as Input$InlineBlockPropertyModelSearchWhereInput?);

  Input$SearchableStringFilterInput? get Tag =>
      (_$data['Tag'] as Input$SearchableStringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('DisplayOption')) {
      final l$DisplayOption = DisplayOption;
      result$data['DisplayOption'] = l$DisplayOption?.toJson();
    }
    if (_$data.containsKey('InlineBlock')) {
      final l$InlineBlock = InlineBlock;
      result$data['InlineBlock'] = l$InlineBlock?.toJson();
    }
    if (_$data.containsKey('Tag')) {
      final l$Tag = Tag;
      result$data['Tag'] = l$Tag?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<
          Input$ContentAreaItemModelSearchWhereInput>
      get copyWith => CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentAreaItemModelSearchWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$DisplayOption = DisplayOption;
    final lOther$DisplayOption = other.DisplayOption;
    if (_$data.containsKey('DisplayOption') !=
        other._$data.containsKey('DisplayOption')) {
      return false;
    }
    if (l$DisplayOption != lOther$DisplayOption) {
      return false;
    }
    final l$InlineBlock = InlineBlock;
    final lOther$InlineBlock = other.InlineBlock;
    if (_$data.containsKey('InlineBlock') !=
        other._$data.containsKey('InlineBlock')) {
      return false;
    }
    if (l$InlineBlock != lOther$InlineBlock) {
      return false;
    }
    final l$Tag = Tag;
    final lOther$Tag = other.Tag;
    if (_$data.containsKey('Tag') != other._$data.containsKey('Tag')) {
      return false;
    }
    if (l$Tag != lOther$Tag) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentLink = ContentLink;
    final l$DisplayOption = DisplayOption;
    final l$InlineBlock = InlineBlock;
    final l$Tag = Tag;
    return Object.hashAll([
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('DisplayOption') ? l$DisplayOption : const {},
      _$data.containsKey('InlineBlock') ? l$InlineBlock : const {},
      _$data.containsKey('Tag') ? l$Tag : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> {
  factory CopyWith$Input$ContentAreaItemModelSearchWhereInput(
    Input$ContentAreaItemModelSearchWhereInput instance,
    TRes Function(Input$ContentAreaItemModelSearchWhereInput) then,
  ) = _CopyWithImpl$Input$ContentAreaItemModelSearchWhereInput;

  factory CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentAreaItemModelSearchWhereInput;

  TRes call({
    Input$ContentModelReferenceSearchWhereInput? ContentLink,
    Input$SearchableStringFilterInput? DisplayOption,
    Input$InlineBlockPropertyModelSearchWhereInput? InlineBlock,
    Input$SearchableStringFilterInput? Tag,
  });
  CopyWith$Input$ContentModelReferenceSearchWhereInput<TRes> get ContentLink;
  CopyWith$Input$SearchableStringFilterInput<TRes> get DisplayOption;
  CopyWith$Input$InlineBlockPropertyModelSearchWhereInput<TRes> get InlineBlock;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Tag;
}

class _CopyWithImpl$Input$ContentAreaItemModelSearchWhereInput<TRes>
    implements CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> {
  _CopyWithImpl$Input$ContentAreaItemModelSearchWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentAreaItemModelSearchWhereInput _instance;

  final TRes Function(Input$ContentAreaItemModelSearchWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? ContentLink = _undefined,
    Object? DisplayOption = _undefined,
    Object? InlineBlock = _undefined,
    Object? Tag = _undefined,
  }) =>
      _then(Input$ContentAreaItemModelSearchWhereInput._({
        ..._instance._$data,
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceSearchWhereInput?),
        if (DisplayOption != _undefined)
          'DisplayOption':
              (DisplayOption as Input$SearchableStringFilterInput?),
        if (InlineBlock != _undefined)
          'InlineBlock':
              (InlineBlock as Input$InlineBlockPropertyModelSearchWhereInput?),
        if (Tag != _undefined)
          'Tag': (Tag as Input$SearchableStringFilterInput?),
      }));

  CopyWith$Input$ContentModelReferenceSearchWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceSearchWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get DisplayOption {
    final local$DisplayOption = _instance.DisplayOption;
    return local$DisplayOption == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$DisplayOption, (e) => call(DisplayOption: e));
  }

  CopyWith$Input$InlineBlockPropertyModelSearchWhereInput<TRes>
      get InlineBlock {
    final local$InlineBlock = _instance.InlineBlock;
    return local$InlineBlock == null
        ? CopyWith$Input$InlineBlockPropertyModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$InlineBlockPropertyModelSearchWhereInput(
            local$InlineBlock, (e) => call(InlineBlock: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Tag {
    final local$Tag = _instance.Tag;
    return local$Tag == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Tag, (e) => call(Tag: e));
  }
}

class _CopyWithStubImpl$Input$ContentAreaItemModelSearchWhereInput<TRes>
    implements CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentAreaItemModelSearchWhereInput(this._res);

  TRes _res;

  call({
    Input$ContentModelReferenceSearchWhereInput? ContentLink,
    Input$SearchableStringFilterInput? DisplayOption,
    Input$InlineBlockPropertyModelSearchWhereInput? InlineBlock,
    Input$SearchableStringFilterInput? Tag,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceSearchWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceSearchWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get DisplayOption =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$InlineBlockPropertyModelSearchWhereInput<TRes>
      get InlineBlock =>
          CopyWith$Input$InlineBlockPropertyModelSearchWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Tag =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);
}

class Input$ContentLanguageModelOrderByInput {
  factory Input$ContentLanguageModelOrderByInput({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? Link,
    Enum$OrderBy? Name,
  }) =>
      Input$ContentLanguageModelOrderByInput._({
        if (DisplayName != null) r'DisplayName': DisplayName,
        if (Link != null) r'Link': Link,
        if (Name != null) r'Name': Name,
      });

  Input$ContentLanguageModelOrderByInput._(this._$data);

  factory Input$ContentLanguageModelOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('DisplayName')) {
      final l$DisplayName = data['DisplayName'];
      result$data['DisplayName'] = l$DisplayName == null
          ? null
          : fromJson$Enum$OrderBy((l$DisplayName as String));
    }
    if (data.containsKey('Link')) {
      final l$Link = data['Link'];
      result$data['Link'] =
          l$Link == null ? null : fromJson$Enum$OrderBy((l$Link as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    return Input$ContentLanguageModelOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get DisplayName => (_$data['DisplayName'] as Enum$OrderBy?);

  Enum$OrderBy? get Link => (_$data['Link'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('DisplayName')) {
      final l$DisplayName = DisplayName;
      result$data['DisplayName'] =
          l$DisplayName == null ? null : toJson$Enum$OrderBy(l$DisplayName);
    }
    if (_$data.containsKey('Link')) {
      final l$Link = Link;
      result$data['Link'] = l$Link == null ? null : toJson$Enum$OrderBy(l$Link);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    return result$data;
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<
          Input$ContentLanguageModelOrderByInput>
      get copyWith => CopyWith$Input$ContentLanguageModelOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentLanguageModelOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$DisplayName = DisplayName;
    final lOther$DisplayName = other.DisplayName;
    if (_$data.containsKey('DisplayName') !=
        other._$data.containsKey('DisplayName')) {
      return false;
    }
    if (l$DisplayName != lOther$DisplayName) {
      return false;
    }
    final l$Link = Link;
    final lOther$Link = other.Link;
    if (_$data.containsKey('Link') != other._$data.containsKey('Link')) {
      return false;
    }
    if (l$Link != lOther$Link) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$DisplayName = DisplayName;
    final l$Link = Link;
    final l$Name = Name;
    return Object.hashAll([
      _$data.containsKey('DisplayName') ? l$DisplayName : const {},
      _$data.containsKey('Link') ? l$Link : const {},
      _$data.containsKey('Name') ? l$Name : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentLanguageModelOrderByInput<TRes> {
  factory CopyWith$Input$ContentLanguageModelOrderByInput(
    Input$ContentLanguageModelOrderByInput instance,
    TRes Function(Input$ContentLanguageModelOrderByInput) then,
  ) = _CopyWithImpl$Input$ContentLanguageModelOrderByInput;

  factory CopyWith$Input$ContentLanguageModelOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentLanguageModelOrderByInput;

  TRes call({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? Link,
    Enum$OrderBy? Name,
  });
}

class _CopyWithImpl$Input$ContentLanguageModelOrderByInput<TRes>
    implements CopyWith$Input$ContentLanguageModelOrderByInput<TRes> {
  _CopyWithImpl$Input$ContentLanguageModelOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContentLanguageModelOrderByInput _instance;

  final TRes Function(Input$ContentLanguageModelOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? DisplayName = _undefined,
    Object? Link = _undefined,
    Object? Name = _undefined,
  }) =>
      _then(Input$ContentLanguageModelOrderByInput._({
        ..._instance._$data,
        if (DisplayName != _undefined)
          'DisplayName': (DisplayName as Enum$OrderBy?),
        if (Link != _undefined) 'Link': (Link as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
      }));
}

class _CopyWithStubImpl$Input$ContentLanguageModelOrderByInput<TRes>
    implements CopyWith$Input$ContentLanguageModelOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContentLanguageModelOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? Link,
    Enum$OrderBy? Name,
  }) =>
      _res;
}

class Input$ContentLanguageModelSearchOrderByInput {
  factory Input$ContentLanguageModelSearchOrderByInput({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? Link,
    Enum$OrderBy? Name,
  }) =>
      Input$ContentLanguageModelSearchOrderByInput._({
        if (DisplayName != null) r'DisplayName': DisplayName,
        if (Link != null) r'Link': Link,
        if (Name != null) r'Name': Name,
      });

  Input$ContentLanguageModelSearchOrderByInput._(this._$data);

  factory Input$ContentLanguageModelSearchOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('DisplayName')) {
      final l$DisplayName = data['DisplayName'];
      result$data['DisplayName'] = l$DisplayName == null
          ? null
          : fromJson$Enum$OrderBy((l$DisplayName as String));
    }
    if (data.containsKey('Link')) {
      final l$Link = data['Link'];
      result$data['Link'] =
          l$Link == null ? null : fromJson$Enum$OrderBy((l$Link as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    return Input$ContentLanguageModelSearchOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get DisplayName => (_$data['DisplayName'] as Enum$OrderBy?);

  Enum$OrderBy? get Link => (_$data['Link'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('DisplayName')) {
      final l$DisplayName = DisplayName;
      result$data['DisplayName'] =
          l$DisplayName == null ? null : toJson$Enum$OrderBy(l$DisplayName);
    }
    if (_$data.containsKey('Link')) {
      final l$Link = Link;
      result$data['Link'] = l$Link == null ? null : toJson$Enum$OrderBy(l$Link);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    return result$data;
  }

  CopyWith$Input$ContentLanguageModelSearchOrderByInput<
          Input$ContentLanguageModelSearchOrderByInput>
      get copyWith => CopyWith$Input$ContentLanguageModelSearchOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentLanguageModelSearchOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$DisplayName = DisplayName;
    final lOther$DisplayName = other.DisplayName;
    if (_$data.containsKey('DisplayName') !=
        other._$data.containsKey('DisplayName')) {
      return false;
    }
    if (l$DisplayName != lOther$DisplayName) {
      return false;
    }
    final l$Link = Link;
    final lOther$Link = other.Link;
    if (_$data.containsKey('Link') != other._$data.containsKey('Link')) {
      return false;
    }
    if (l$Link != lOther$Link) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$DisplayName = DisplayName;
    final l$Link = Link;
    final l$Name = Name;
    return Object.hashAll([
      _$data.containsKey('DisplayName') ? l$DisplayName : const {},
      _$data.containsKey('Link') ? l$Link : const {},
      _$data.containsKey('Name') ? l$Name : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentLanguageModelSearchOrderByInput<TRes> {
  factory CopyWith$Input$ContentLanguageModelSearchOrderByInput(
    Input$ContentLanguageModelSearchOrderByInput instance,
    TRes Function(Input$ContentLanguageModelSearchOrderByInput) then,
  ) = _CopyWithImpl$Input$ContentLanguageModelSearchOrderByInput;

  factory CopyWith$Input$ContentLanguageModelSearchOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentLanguageModelSearchOrderByInput;

  TRes call({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? Link,
    Enum$OrderBy? Name,
  });
}

class _CopyWithImpl$Input$ContentLanguageModelSearchOrderByInput<TRes>
    implements CopyWith$Input$ContentLanguageModelSearchOrderByInput<TRes> {
  _CopyWithImpl$Input$ContentLanguageModelSearchOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContentLanguageModelSearchOrderByInput _instance;

  final TRes Function(Input$ContentLanguageModelSearchOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? DisplayName = _undefined,
    Object? Link = _undefined,
    Object? Name = _undefined,
  }) =>
      _then(Input$ContentLanguageModelSearchOrderByInput._({
        ..._instance._$data,
        if (DisplayName != _undefined)
          'DisplayName': (DisplayName as Enum$OrderBy?),
        if (Link != _undefined) 'Link': (Link as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
      }));
}

class _CopyWithStubImpl$Input$ContentLanguageModelSearchOrderByInput<TRes>
    implements CopyWith$Input$ContentLanguageModelSearchOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContentLanguageModelSearchOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? Link,
    Enum$OrderBy? Name,
  }) =>
      _res;
}

class Input$ContentLanguageModelSearchWhereInput {
  factory Input$ContentLanguageModelSearchWhereInput({
    Input$SearchableStringFilterInput? DisplayName,
    Input$SearchableStringFilterInput? Link,
    Input$SearchableStringFilterInput? Name,
  }) =>
      Input$ContentLanguageModelSearchWhereInput._({
        if (DisplayName != null) r'DisplayName': DisplayName,
        if (Link != null) r'Link': Link,
        if (Name != null) r'Name': Name,
      });

  Input$ContentLanguageModelSearchWhereInput._(this._$data);

  factory Input$ContentLanguageModelSearchWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('DisplayName')) {
      final l$DisplayName = data['DisplayName'];
      result$data['DisplayName'] = l$DisplayName == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$DisplayName as Map<String, dynamic>));
    }
    if (data.containsKey('Link')) {
      final l$Link = data['Link'];
      result$data['Link'] = l$Link == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Link as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    return Input$ContentLanguageModelSearchWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SearchableStringFilterInput? get DisplayName =>
      (_$data['DisplayName'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Link =>
      (_$data['Link'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('DisplayName')) {
      final l$DisplayName = DisplayName;
      result$data['DisplayName'] = l$DisplayName?.toJson();
    }
    if (_$data.containsKey('Link')) {
      final l$Link = Link;
      result$data['Link'] = l$Link?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContentLanguageModelSearchWhereInput<
          Input$ContentLanguageModelSearchWhereInput>
      get copyWith => CopyWith$Input$ContentLanguageModelSearchWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentLanguageModelSearchWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$DisplayName = DisplayName;
    final lOther$DisplayName = other.DisplayName;
    if (_$data.containsKey('DisplayName') !=
        other._$data.containsKey('DisplayName')) {
      return false;
    }
    if (l$DisplayName != lOther$DisplayName) {
      return false;
    }
    final l$Link = Link;
    final lOther$Link = other.Link;
    if (_$data.containsKey('Link') != other._$data.containsKey('Link')) {
      return false;
    }
    if (l$Link != lOther$Link) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$DisplayName = DisplayName;
    final l$Link = Link;
    final l$Name = Name;
    return Object.hashAll([
      _$data.containsKey('DisplayName') ? l$DisplayName : const {},
      _$data.containsKey('Link') ? l$Link : const {},
      _$data.containsKey('Name') ? l$Name : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentLanguageModelSearchWhereInput<TRes> {
  factory CopyWith$Input$ContentLanguageModelSearchWhereInput(
    Input$ContentLanguageModelSearchWhereInput instance,
    TRes Function(Input$ContentLanguageModelSearchWhereInput) then,
  ) = _CopyWithImpl$Input$ContentLanguageModelSearchWhereInput;

  factory CopyWith$Input$ContentLanguageModelSearchWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentLanguageModelSearchWhereInput;

  TRes call({
    Input$SearchableStringFilterInput? DisplayName,
    Input$SearchableStringFilterInput? Link,
    Input$SearchableStringFilterInput? Name,
  });
  CopyWith$Input$SearchableStringFilterInput<TRes> get DisplayName;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Link;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
}

class _CopyWithImpl$Input$ContentLanguageModelSearchWhereInput<TRes>
    implements CopyWith$Input$ContentLanguageModelSearchWhereInput<TRes> {
  _CopyWithImpl$Input$ContentLanguageModelSearchWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentLanguageModelSearchWhereInput _instance;

  final TRes Function(Input$ContentLanguageModelSearchWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? DisplayName = _undefined,
    Object? Link = _undefined,
    Object? Name = _undefined,
  }) =>
      _then(Input$ContentLanguageModelSearchWhereInput._({
        ..._instance._$data,
        if (DisplayName != _undefined)
          'DisplayName': (DisplayName as Input$SearchableStringFilterInput?),
        if (Link != _undefined)
          'Link': (Link as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
      }));

  CopyWith$Input$SearchableStringFilterInput<TRes> get DisplayName {
    final local$DisplayName = _instance.DisplayName;
    return local$DisplayName == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$DisplayName, (e) => call(DisplayName: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Link {
    final local$Link = _instance.Link;
    return local$Link == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Link, (e) => call(Link: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }
}

class _CopyWithStubImpl$Input$ContentLanguageModelSearchWhereInput<TRes>
    implements CopyWith$Input$ContentLanguageModelSearchWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentLanguageModelSearchWhereInput(this._res);

  TRes _res;

  call({
    Input$SearchableStringFilterInput? DisplayName,
    Input$SearchableStringFilterInput? Link,
    Input$SearchableStringFilterInput? Name,
  }) =>
      _res;

  CopyWith$Input$SearchableStringFilterInput<TRes> get DisplayName =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Link =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);
}

class Input$ContentLanguageModelWhereInput {
  factory Input$ContentLanguageModelWhereInput({
    Input$StringFilterInput? DisplayName,
    Input$StringFilterInput? Link,
    Input$StringFilterInput? Name,
  }) =>
      Input$ContentLanguageModelWhereInput._({
        if (DisplayName != null) r'DisplayName': DisplayName,
        if (Link != null) r'Link': Link,
        if (Name != null) r'Name': Name,
      });

  Input$ContentLanguageModelWhereInput._(this._$data);

  factory Input$ContentLanguageModelWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('DisplayName')) {
      final l$DisplayName = data['DisplayName'];
      result$data['DisplayName'] = l$DisplayName == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$DisplayName as Map<String, dynamic>));
    }
    if (data.containsKey('Link')) {
      final l$Link = data['Link'];
      result$data['Link'] = l$Link == null
          ? null
          : Input$StringFilterInput.fromJson((l$Link as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$StringFilterInput.fromJson((l$Name as Map<String, dynamic>));
    }
    return Input$ContentLanguageModelWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get DisplayName =>
      (_$data['DisplayName'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Link =>
      (_$data['Link'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Name =>
      (_$data['Name'] as Input$StringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('DisplayName')) {
      final l$DisplayName = DisplayName;
      result$data['DisplayName'] = l$DisplayName?.toJson();
    }
    if (_$data.containsKey('Link')) {
      final l$Link = Link;
      result$data['Link'] = l$Link?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContentLanguageModelWhereInput<
          Input$ContentLanguageModelWhereInput>
      get copyWith => CopyWith$Input$ContentLanguageModelWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentLanguageModelWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$DisplayName = DisplayName;
    final lOther$DisplayName = other.DisplayName;
    if (_$data.containsKey('DisplayName') !=
        other._$data.containsKey('DisplayName')) {
      return false;
    }
    if (l$DisplayName != lOther$DisplayName) {
      return false;
    }
    final l$Link = Link;
    final lOther$Link = other.Link;
    if (_$data.containsKey('Link') != other._$data.containsKey('Link')) {
      return false;
    }
    if (l$Link != lOther$Link) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$DisplayName = DisplayName;
    final l$Link = Link;
    final l$Name = Name;
    return Object.hashAll([
      _$data.containsKey('DisplayName') ? l$DisplayName : const {},
      _$data.containsKey('Link') ? l$Link : const {},
      _$data.containsKey('Name') ? l$Name : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentLanguageModelWhereInput<TRes> {
  factory CopyWith$Input$ContentLanguageModelWhereInput(
    Input$ContentLanguageModelWhereInput instance,
    TRes Function(Input$ContentLanguageModelWhereInput) then,
  ) = _CopyWithImpl$Input$ContentLanguageModelWhereInput;

  factory CopyWith$Input$ContentLanguageModelWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentLanguageModelWhereInput;

  TRes call({
    Input$StringFilterInput? DisplayName,
    Input$StringFilterInput? Link,
    Input$StringFilterInput? Name,
  });
  CopyWith$Input$StringFilterInput<TRes> get DisplayName;
  CopyWith$Input$StringFilterInput<TRes> get Link;
  CopyWith$Input$StringFilterInput<TRes> get Name;
}

class _CopyWithImpl$Input$ContentLanguageModelWhereInput<TRes>
    implements CopyWith$Input$ContentLanguageModelWhereInput<TRes> {
  _CopyWithImpl$Input$ContentLanguageModelWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentLanguageModelWhereInput _instance;

  final TRes Function(Input$ContentLanguageModelWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? DisplayName = _undefined,
    Object? Link = _undefined,
    Object? Name = _undefined,
  }) =>
      _then(Input$ContentLanguageModelWhereInput._({
        ..._instance._$data,
        if (DisplayName != _undefined)
          'DisplayName': (DisplayName as Input$StringFilterInput?),
        if (Link != _undefined) 'Link': (Link as Input$StringFilterInput?),
        if (Name != _undefined) 'Name': (Name as Input$StringFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get DisplayName {
    final local$DisplayName = _instance.DisplayName;
    return local$DisplayName == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$DisplayName, (e) => call(DisplayName: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Link {
    final local$Link = _instance.Link;
    return local$Link == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Link, (e) => call(Link: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Name, (e) => call(Name: e));
  }
}

class _CopyWithStubImpl$Input$ContentLanguageModelWhereInput<TRes>
    implements CopyWith$Input$ContentLanguageModelWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentLanguageModelWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? DisplayName,
    Input$StringFilterInput? Link,
    Input$StringFilterInput? Name,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get DisplayName =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Link =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Name =>
      CopyWith$Input$StringFilterInput.stub(_res);
}

class Input$ContentModelReferenceOrderByInput {
  factory Input$ContentModelReferenceOrderByInput({
    Enum$OrderBy? GuidValue,
    Enum$OrderBy? Id,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? ProviderName,
    Enum$OrderBy? Url,
    Enum$OrderBy? WorkId,
  }) =>
      Input$ContentModelReferenceOrderByInput._({
        if (GuidValue != null) r'GuidValue': GuidValue,
        if (Id != null) r'Id': Id,
        if (Language != null) r'Language': Language,
        if (ProviderName != null) r'ProviderName': ProviderName,
        if (Url != null) r'Url': Url,
        if (WorkId != null) r'WorkId': WorkId,
      });

  Input$ContentModelReferenceOrderByInput._(this._$data);

  factory Input$ContentModelReferenceOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('GuidValue')) {
      final l$GuidValue = data['GuidValue'];
      result$data['GuidValue'] = l$GuidValue == null
          ? null
          : fromJson$Enum$OrderBy((l$GuidValue as String));
    }
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] =
          l$Id == null ? null : fromJson$Enum$OrderBy((l$Id as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('ProviderName')) {
      final l$ProviderName = data['ProviderName'];
      result$data['ProviderName'] = l$ProviderName == null
          ? null
          : fromJson$Enum$OrderBy((l$ProviderName as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('WorkId')) {
      final l$WorkId = data['WorkId'];
      result$data['WorkId'] =
          l$WorkId == null ? null : fromJson$Enum$OrderBy((l$WorkId as String));
    }
    return Input$ContentModelReferenceOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get GuidValue => (_$data['GuidValue'] as Enum$OrderBy?);

  Enum$OrderBy? get Id => (_$data['Id'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get ProviderName => (_$data['ProviderName'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get WorkId => (_$data['WorkId'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('GuidValue')) {
      final l$GuidValue = GuidValue;
      result$data['GuidValue'] =
          l$GuidValue == null ? null : toJson$Enum$OrderBy(l$GuidValue);
    }
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id == null ? null : toJson$Enum$OrderBy(l$Id);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('ProviderName')) {
      final l$ProviderName = ProviderName;
      result$data['ProviderName'] =
          l$ProviderName == null ? null : toJson$Enum$OrderBy(l$ProviderName);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('WorkId')) {
      final l$WorkId = WorkId;
      result$data['WorkId'] =
          l$WorkId == null ? null : toJson$Enum$OrderBy(l$WorkId);
    }
    return result$data;
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<
          Input$ContentModelReferenceOrderByInput>
      get copyWith => CopyWith$Input$ContentModelReferenceOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentModelReferenceOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$GuidValue = GuidValue;
    final lOther$GuidValue = other.GuidValue;
    if (_$data.containsKey('GuidValue') !=
        other._$data.containsKey('GuidValue')) {
      return false;
    }
    if (l$GuidValue != lOther$GuidValue) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$ProviderName = ProviderName;
    final lOther$ProviderName = other.ProviderName;
    if (_$data.containsKey('ProviderName') !=
        other._$data.containsKey('ProviderName')) {
      return false;
    }
    if (l$ProviderName != lOther$ProviderName) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$WorkId = WorkId;
    final lOther$WorkId = other.WorkId;
    if (_$data.containsKey('WorkId') != other._$data.containsKey('WorkId')) {
      return false;
    }
    if (l$WorkId != lOther$WorkId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$GuidValue = GuidValue;
    final l$Id = Id;
    final l$Language = Language;
    final l$ProviderName = ProviderName;
    final l$Url = Url;
    final l$WorkId = WorkId;
    return Object.hashAll([
      _$data.containsKey('GuidValue') ? l$GuidValue : const {},
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('ProviderName') ? l$ProviderName : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('WorkId') ? l$WorkId : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentModelReferenceOrderByInput<TRes> {
  factory CopyWith$Input$ContentModelReferenceOrderByInput(
    Input$ContentModelReferenceOrderByInput instance,
    TRes Function(Input$ContentModelReferenceOrderByInput) then,
  ) = _CopyWithImpl$Input$ContentModelReferenceOrderByInput;

  factory CopyWith$Input$ContentModelReferenceOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentModelReferenceOrderByInput;

  TRes call({
    Enum$OrderBy? GuidValue,
    Enum$OrderBy? Id,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? ProviderName,
    Enum$OrderBy? Url,
    Enum$OrderBy? WorkId,
  });
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
}

class _CopyWithImpl$Input$ContentModelReferenceOrderByInput<TRes>
    implements CopyWith$Input$ContentModelReferenceOrderByInput<TRes> {
  _CopyWithImpl$Input$ContentModelReferenceOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContentModelReferenceOrderByInput _instance;

  final TRes Function(Input$ContentModelReferenceOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? GuidValue = _undefined,
    Object? Id = _undefined,
    Object? Language = _undefined,
    Object? ProviderName = _undefined,
    Object? Url = _undefined,
    Object? WorkId = _undefined,
  }) =>
      _then(Input$ContentModelReferenceOrderByInput._({
        ..._instance._$data,
        if (GuidValue != _undefined) 'GuidValue': (GuidValue as Enum$OrderBy?),
        if (Id != _undefined) 'Id': (Id as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (ProviderName != _undefined)
          'ProviderName': (ProviderName as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if (WorkId != _undefined) 'WorkId': (WorkId as Enum$OrderBy?),
      }));

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }
}

class _CopyWithStubImpl$Input$ContentModelReferenceOrderByInput<TRes>
    implements CopyWith$Input$ContentModelReferenceOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContentModelReferenceOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? GuidValue,
    Enum$OrderBy? Id,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? ProviderName,
    Enum$OrderBy? Url,
    Enum$OrderBy? WorkId,
  }) =>
      _res;

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);
}

class Input$ContentModelReferenceSearchOrderByInput {
  factory Input$ContentModelReferenceSearchOrderByInput({
    Enum$OrderBy? GuidValue,
    Enum$OrderBy? Id,
    Input$ContentLanguageModelSearchOrderByInput? Language,
    Enum$OrderBy? ProviderName,
    Enum$OrderBy? Url,
    Enum$OrderBy? WorkId,
  }) =>
      Input$ContentModelReferenceSearchOrderByInput._({
        if (GuidValue != null) r'GuidValue': GuidValue,
        if (Id != null) r'Id': Id,
        if (Language != null) r'Language': Language,
        if (ProviderName != null) r'ProviderName': ProviderName,
        if (Url != null) r'Url': Url,
        if (WorkId != null) r'WorkId': WorkId,
      });

  Input$ContentModelReferenceSearchOrderByInput._(this._$data);

  factory Input$ContentModelReferenceSearchOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('GuidValue')) {
      final l$GuidValue = data['GuidValue'];
      result$data['GuidValue'] = l$GuidValue == null
          ? null
          : fromJson$Enum$OrderBy((l$GuidValue as String));
    }
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] =
          l$Id == null ? null : fromJson$Enum$OrderBy((l$Id as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelSearchOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('ProviderName')) {
      final l$ProviderName = data['ProviderName'];
      result$data['ProviderName'] = l$ProviderName == null
          ? null
          : fromJson$Enum$OrderBy((l$ProviderName as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('WorkId')) {
      final l$WorkId = data['WorkId'];
      result$data['WorkId'] =
          l$WorkId == null ? null : fromJson$Enum$OrderBy((l$WorkId as String));
    }
    return Input$ContentModelReferenceSearchOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get GuidValue => (_$data['GuidValue'] as Enum$OrderBy?);

  Enum$OrderBy? get Id => (_$data['Id'] as Enum$OrderBy?);

  Input$ContentLanguageModelSearchOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelSearchOrderByInput?);

  Enum$OrderBy? get ProviderName => (_$data['ProviderName'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get WorkId => (_$data['WorkId'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('GuidValue')) {
      final l$GuidValue = GuidValue;
      result$data['GuidValue'] =
          l$GuidValue == null ? null : toJson$Enum$OrderBy(l$GuidValue);
    }
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id == null ? null : toJson$Enum$OrderBy(l$Id);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('ProviderName')) {
      final l$ProviderName = ProviderName;
      result$data['ProviderName'] =
          l$ProviderName == null ? null : toJson$Enum$OrderBy(l$ProviderName);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('WorkId')) {
      final l$WorkId = WorkId;
      result$data['WorkId'] =
          l$WorkId == null ? null : toJson$Enum$OrderBy(l$WorkId);
    }
    return result$data;
  }

  CopyWith$Input$ContentModelReferenceSearchOrderByInput<
          Input$ContentModelReferenceSearchOrderByInput>
      get copyWith => CopyWith$Input$ContentModelReferenceSearchOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentModelReferenceSearchOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$GuidValue = GuidValue;
    final lOther$GuidValue = other.GuidValue;
    if (_$data.containsKey('GuidValue') !=
        other._$data.containsKey('GuidValue')) {
      return false;
    }
    if (l$GuidValue != lOther$GuidValue) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$ProviderName = ProviderName;
    final lOther$ProviderName = other.ProviderName;
    if (_$data.containsKey('ProviderName') !=
        other._$data.containsKey('ProviderName')) {
      return false;
    }
    if (l$ProviderName != lOther$ProviderName) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$WorkId = WorkId;
    final lOther$WorkId = other.WorkId;
    if (_$data.containsKey('WorkId') != other._$data.containsKey('WorkId')) {
      return false;
    }
    if (l$WorkId != lOther$WorkId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$GuidValue = GuidValue;
    final l$Id = Id;
    final l$Language = Language;
    final l$ProviderName = ProviderName;
    final l$Url = Url;
    final l$WorkId = WorkId;
    return Object.hashAll([
      _$data.containsKey('GuidValue') ? l$GuidValue : const {},
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('ProviderName') ? l$ProviderName : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('WorkId') ? l$WorkId : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentModelReferenceSearchOrderByInput<TRes> {
  factory CopyWith$Input$ContentModelReferenceSearchOrderByInput(
    Input$ContentModelReferenceSearchOrderByInput instance,
    TRes Function(Input$ContentModelReferenceSearchOrderByInput) then,
  ) = _CopyWithImpl$Input$ContentModelReferenceSearchOrderByInput;

  factory CopyWith$Input$ContentModelReferenceSearchOrderByInput.stub(
          TRes res) =
      _CopyWithStubImpl$Input$ContentModelReferenceSearchOrderByInput;

  TRes call({
    Enum$OrderBy? GuidValue,
    Enum$OrderBy? Id,
    Input$ContentLanguageModelSearchOrderByInput? Language,
    Enum$OrderBy? ProviderName,
    Enum$OrderBy? Url,
    Enum$OrderBy? WorkId,
  });
  CopyWith$Input$ContentLanguageModelSearchOrderByInput<TRes> get Language;
}

class _CopyWithImpl$Input$ContentModelReferenceSearchOrderByInput<TRes>
    implements CopyWith$Input$ContentModelReferenceSearchOrderByInput<TRes> {
  _CopyWithImpl$Input$ContentModelReferenceSearchOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContentModelReferenceSearchOrderByInput _instance;

  final TRes Function(Input$ContentModelReferenceSearchOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? GuidValue = _undefined,
    Object? Id = _undefined,
    Object? Language = _undefined,
    Object? ProviderName = _undefined,
    Object? Url = _undefined,
    Object? WorkId = _undefined,
  }) =>
      _then(Input$ContentModelReferenceSearchOrderByInput._({
        ..._instance._$data,
        if (GuidValue != _undefined) 'GuidValue': (GuidValue as Enum$OrderBy?),
        if (Id != _undefined) 'Id': (Id as Enum$OrderBy?),
        if (Language != _undefined)
          'Language':
              (Language as Input$ContentLanguageModelSearchOrderByInput?),
        if (ProviderName != _undefined)
          'ProviderName': (ProviderName as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if (WorkId != _undefined) 'WorkId': (WorkId as Enum$OrderBy?),
      }));

  CopyWith$Input$ContentLanguageModelSearchOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentLanguageModelSearchOrderByInput(
            local$Language, (e) => call(Language: e));
  }
}

class _CopyWithStubImpl$Input$ContentModelReferenceSearchOrderByInput<TRes>
    implements CopyWith$Input$ContentModelReferenceSearchOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContentModelReferenceSearchOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? GuidValue,
    Enum$OrderBy? Id,
    Input$ContentLanguageModelSearchOrderByInput? Language,
    Enum$OrderBy? ProviderName,
    Enum$OrderBy? Url,
    Enum$OrderBy? WorkId,
  }) =>
      _res;

  CopyWith$Input$ContentLanguageModelSearchOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelSearchOrderByInput.stub(_res);
}

class Input$ContentModelReferenceSearchWhereInput {
  factory Input$ContentModelReferenceSearchWhereInput({
    Input$StringFilterInput? GuidValue,
    Input$IntFilterInput? Id,
    Input$ContentLanguageModelSearchWhereInput? Language,
    Input$SearchableStringFilterInput? ProviderName,
    Input$SearchableStringFilterInput? Url,
    Input$IntFilterInput? WorkId,
  }) =>
      Input$ContentModelReferenceSearchWhereInput._({
        if (GuidValue != null) r'GuidValue': GuidValue,
        if (Id != null) r'Id': Id,
        if (Language != null) r'Language': Language,
        if (ProviderName != null) r'ProviderName': ProviderName,
        if (Url != null) r'Url': Url,
        if (WorkId != null) r'WorkId': WorkId,
      });

  Input$ContentModelReferenceSearchWhereInput._(this._$data);

  factory Input$ContentModelReferenceSearchWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('GuidValue')) {
      final l$GuidValue = data['GuidValue'];
      result$data['GuidValue'] = l$GuidValue == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$GuidValue as Map<String, dynamic>));
    }
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] = l$Id == null
          ? null
          : Input$IntFilterInput.fromJson((l$Id as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelSearchWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('ProviderName')) {
      final l$ProviderName = data['ProviderName'];
      result$data['ProviderName'] = l$ProviderName == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$ProviderName as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('WorkId')) {
      final l$WorkId = data['WorkId'];
      result$data['WorkId'] = l$WorkId == null
          ? null
          : Input$IntFilterInput.fromJson((l$WorkId as Map<String, dynamic>));
    }
    return Input$ContentModelReferenceSearchWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get GuidValue =>
      (_$data['GuidValue'] as Input$StringFilterInput?);

  Input$IntFilterInput? get Id => (_$data['Id'] as Input$IntFilterInput?);

  Input$ContentLanguageModelSearchWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelSearchWhereInput?);

  Input$SearchableStringFilterInput? get ProviderName =>
      (_$data['ProviderName'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Url =>
      (_$data['Url'] as Input$SearchableStringFilterInput?);

  Input$IntFilterInput? get WorkId =>
      (_$data['WorkId'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('GuidValue')) {
      final l$GuidValue = GuidValue;
      result$data['GuidValue'] = l$GuidValue?.toJson();
    }
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('ProviderName')) {
      final l$ProviderName = ProviderName;
      result$data['ProviderName'] = l$ProviderName?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('WorkId')) {
      final l$WorkId = WorkId;
      result$data['WorkId'] = l$WorkId?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContentModelReferenceSearchWhereInput<
          Input$ContentModelReferenceSearchWhereInput>
      get copyWith => CopyWith$Input$ContentModelReferenceSearchWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentModelReferenceSearchWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$GuidValue = GuidValue;
    final lOther$GuidValue = other.GuidValue;
    if (_$data.containsKey('GuidValue') !=
        other._$data.containsKey('GuidValue')) {
      return false;
    }
    if (l$GuidValue != lOther$GuidValue) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$ProviderName = ProviderName;
    final lOther$ProviderName = other.ProviderName;
    if (_$data.containsKey('ProviderName') !=
        other._$data.containsKey('ProviderName')) {
      return false;
    }
    if (l$ProviderName != lOther$ProviderName) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$WorkId = WorkId;
    final lOther$WorkId = other.WorkId;
    if (_$data.containsKey('WorkId') != other._$data.containsKey('WorkId')) {
      return false;
    }
    if (l$WorkId != lOther$WorkId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$GuidValue = GuidValue;
    final l$Id = Id;
    final l$Language = Language;
    final l$ProviderName = ProviderName;
    final l$Url = Url;
    final l$WorkId = WorkId;
    return Object.hashAll([
      _$data.containsKey('GuidValue') ? l$GuidValue : const {},
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('ProviderName') ? l$ProviderName : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('WorkId') ? l$WorkId : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentModelReferenceSearchWhereInput<TRes> {
  factory CopyWith$Input$ContentModelReferenceSearchWhereInput(
    Input$ContentModelReferenceSearchWhereInput instance,
    TRes Function(Input$ContentModelReferenceSearchWhereInput) then,
  ) = _CopyWithImpl$Input$ContentModelReferenceSearchWhereInput;

  factory CopyWith$Input$ContentModelReferenceSearchWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentModelReferenceSearchWhereInput;

  TRes call({
    Input$StringFilterInput? GuidValue,
    Input$IntFilterInput? Id,
    Input$ContentLanguageModelSearchWhereInput? Language,
    Input$SearchableStringFilterInput? ProviderName,
    Input$SearchableStringFilterInput? Url,
    Input$IntFilterInput? WorkId,
  });
  CopyWith$Input$StringFilterInput<TRes> get GuidValue;
  CopyWith$Input$IntFilterInput<TRes> get Id;
  CopyWith$Input$ContentLanguageModelSearchWhereInput<TRes> get Language;
  CopyWith$Input$SearchableStringFilterInput<TRes> get ProviderName;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Url;
  CopyWith$Input$IntFilterInput<TRes> get WorkId;
}

class _CopyWithImpl$Input$ContentModelReferenceSearchWhereInput<TRes>
    implements CopyWith$Input$ContentModelReferenceSearchWhereInput<TRes> {
  _CopyWithImpl$Input$ContentModelReferenceSearchWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentModelReferenceSearchWhereInput _instance;

  final TRes Function(Input$ContentModelReferenceSearchWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? GuidValue = _undefined,
    Object? Id = _undefined,
    Object? Language = _undefined,
    Object? ProviderName = _undefined,
    Object? Url = _undefined,
    Object? WorkId = _undefined,
  }) =>
      _then(Input$ContentModelReferenceSearchWhereInput._({
        ..._instance._$data,
        if (GuidValue != _undefined)
          'GuidValue': (GuidValue as Input$StringFilterInput?),
        if (Id != _undefined) 'Id': (Id as Input$IntFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelSearchWhereInput?),
        if (ProviderName != _undefined)
          'ProviderName': (ProviderName as Input$SearchableStringFilterInput?),
        if (Url != _undefined)
          'Url': (Url as Input$SearchableStringFilterInput?),
        if (WorkId != _undefined) 'WorkId': (WorkId as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get GuidValue {
    final local$GuidValue = _instance.GuidValue;
    return local$GuidValue == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$GuidValue, (e) => call(GuidValue: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get Id {
    final local$Id = _instance.Id;
    return local$Id == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(local$Id, (e) => call(Id: e));
  }

  CopyWith$Input$ContentLanguageModelSearchWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentLanguageModelSearchWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get ProviderName {
    final local$ProviderName = _instance.ProviderName;
    return local$ProviderName == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$ProviderName, (e) => call(ProviderName: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Url, (e) => call(Url: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get WorkId {
    final local$WorkId = _instance.WorkId;
    return local$WorkId == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(local$WorkId, (e) => call(WorkId: e));
  }
}

class _CopyWithStubImpl$Input$ContentModelReferenceSearchWhereInput<TRes>
    implements CopyWith$Input$ContentModelReferenceSearchWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentModelReferenceSearchWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? GuidValue,
    Input$IntFilterInput? Id,
    Input$ContentLanguageModelSearchWhereInput? Language,
    Input$SearchableStringFilterInput? ProviderName,
    Input$SearchableStringFilterInput? Url,
    Input$IntFilterInput? WorkId,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get GuidValue =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get Id =>
      CopyWith$Input$IntFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelSearchWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelSearchWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get ProviderName =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Url =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get WorkId =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$ContentModelReferenceWhereInput {
  factory Input$ContentModelReferenceWhereInput({
    Input$StringFilterInput? GuidValue,
    Input$IntFilterInput? Id,
    Input$ContentLanguageModelWhereInput? Language,
    Input$StringFilterInput? ProviderName,
    Input$StringFilterInput? Url,
    Input$IntFilterInput? WorkId,
  }) =>
      Input$ContentModelReferenceWhereInput._({
        if (GuidValue != null) r'GuidValue': GuidValue,
        if (Id != null) r'Id': Id,
        if (Language != null) r'Language': Language,
        if (ProviderName != null) r'ProviderName': ProviderName,
        if (Url != null) r'Url': Url,
        if (WorkId != null) r'WorkId': WorkId,
      });

  Input$ContentModelReferenceWhereInput._(this._$data);

  factory Input$ContentModelReferenceWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('GuidValue')) {
      final l$GuidValue = data['GuidValue'];
      result$data['GuidValue'] = l$GuidValue == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$GuidValue as Map<String, dynamic>));
    }
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] = l$Id == null
          ? null
          : Input$IntFilterInput.fromJson((l$Id as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('ProviderName')) {
      final l$ProviderName = data['ProviderName'];
      result$data['ProviderName'] = l$ProviderName == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ProviderName as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('WorkId')) {
      final l$WorkId = data['WorkId'];
      result$data['WorkId'] = l$WorkId == null
          ? null
          : Input$IntFilterInput.fromJson((l$WorkId as Map<String, dynamic>));
    }
    return Input$ContentModelReferenceWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get GuidValue =>
      (_$data['GuidValue'] as Input$StringFilterInput?);

  Input$IntFilterInput? get Id => (_$data['Id'] as Input$IntFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$StringFilterInput? get ProviderName =>
      (_$data['ProviderName'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  Input$IntFilterInput? get WorkId =>
      (_$data['WorkId'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('GuidValue')) {
      final l$GuidValue = GuidValue;
      result$data['GuidValue'] = l$GuidValue?.toJson();
    }
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('ProviderName')) {
      final l$ProviderName = ProviderName;
      result$data['ProviderName'] = l$ProviderName?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('WorkId')) {
      final l$WorkId = WorkId;
      result$data['WorkId'] = l$WorkId?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContentModelReferenceWhereInput<
          Input$ContentModelReferenceWhereInput>
      get copyWith => CopyWith$Input$ContentModelReferenceWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentModelReferenceWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$GuidValue = GuidValue;
    final lOther$GuidValue = other.GuidValue;
    if (_$data.containsKey('GuidValue') !=
        other._$data.containsKey('GuidValue')) {
      return false;
    }
    if (l$GuidValue != lOther$GuidValue) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$ProviderName = ProviderName;
    final lOther$ProviderName = other.ProviderName;
    if (_$data.containsKey('ProviderName') !=
        other._$data.containsKey('ProviderName')) {
      return false;
    }
    if (l$ProviderName != lOther$ProviderName) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$WorkId = WorkId;
    final lOther$WorkId = other.WorkId;
    if (_$data.containsKey('WorkId') != other._$data.containsKey('WorkId')) {
      return false;
    }
    if (l$WorkId != lOther$WorkId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$GuidValue = GuidValue;
    final l$Id = Id;
    final l$Language = Language;
    final l$ProviderName = ProviderName;
    final l$Url = Url;
    final l$WorkId = WorkId;
    return Object.hashAll([
      _$data.containsKey('GuidValue') ? l$GuidValue : const {},
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('ProviderName') ? l$ProviderName : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('WorkId') ? l$WorkId : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentModelReferenceWhereInput<TRes> {
  factory CopyWith$Input$ContentModelReferenceWhereInput(
    Input$ContentModelReferenceWhereInput instance,
    TRes Function(Input$ContentModelReferenceWhereInput) then,
  ) = _CopyWithImpl$Input$ContentModelReferenceWhereInput;

  factory CopyWith$Input$ContentModelReferenceWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentModelReferenceWhereInput;

  TRes call({
    Input$StringFilterInput? GuidValue,
    Input$IntFilterInput? Id,
    Input$ContentLanguageModelWhereInput? Language,
    Input$StringFilterInput? ProviderName,
    Input$StringFilterInput? Url,
    Input$IntFilterInput? WorkId,
  });
  CopyWith$Input$StringFilterInput<TRes> get GuidValue;
  CopyWith$Input$IntFilterInput<TRes> get Id;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$StringFilterInput<TRes> get ProviderName;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  CopyWith$Input$IntFilterInput<TRes> get WorkId;
}

class _CopyWithImpl$Input$ContentModelReferenceWhereInput<TRes>
    implements CopyWith$Input$ContentModelReferenceWhereInput<TRes> {
  _CopyWithImpl$Input$ContentModelReferenceWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentModelReferenceWhereInput _instance;

  final TRes Function(Input$ContentModelReferenceWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? GuidValue = _undefined,
    Object? Id = _undefined,
    Object? Language = _undefined,
    Object? ProviderName = _undefined,
    Object? Url = _undefined,
    Object? WorkId = _undefined,
  }) =>
      _then(Input$ContentModelReferenceWhereInput._({
        ..._instance._$data,
        if (GuidValue != _undefined)
          'GuidValue': (GuidValue as Input$StringFilterInput?),
        if (Id != _undefined) 'Id': (Id as Input$IntFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (ProviderName != _undefined)
          'ProviderName': (ProviderName as Input$StringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if (WorkId != _undefined) 'WorkId': (WorkId as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get GuidValue {
    final local$GuidValue = _instance.GuidValue;
    return local$GuidValue == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$GuidValue, (e) => call(GuidValue: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get Id {
    final local$Id = _instance.Id;
    return local$Id == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(local$Id, (e) => call(Id: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ProviderName {
    final local$ProviderName = _instance.ProviderName;
    return local$ProviderName == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ProviderName, (e) => call(ProviderName: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get WorkId {
    final local$WorkId = _instance.WorkId;
    return local$WorkId == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(local$WorkId, (e) => call(WorkId: e));
  }
}

class _CopyWithStubImpl$Input$ContentModelReferenceWhereInput<TRes>
    implements CopyWith$Input$ContentModelReferenceWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentModelReferenceWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? GuidValue,
    Input$IntFilterInput? Id,
    Input$ContentLanguageModelWhereInput? Language,
    Input$StringFilterInput? ProviderName,
    Input$StringFilterInput? Url,
    Input$IntFilterInput? WorkId,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get GuidValue =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get Id =>
      CopyWith$Input$IntFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ProviderName =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get WorkId =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$ContentOrderByInput {
  factory Input$ContentOrderByInput({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$ContentOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ContentOrderByInput._(this._$data);

  factory Input$ContentOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$ContentOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$ContentOrderByInput<Input$ContentOrderByInput> get copyWith =>
      CopyWith$Input$ContentOrderByInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentOrderByInput<TRes> {
  factory CopyWith$Input$ContentOrderByInput(
    Input$ContentOrderByInput instance,
    TRes Function(Input$ContentOrderByInput) then,
  ) = _CopyWithImpl$Input$ContentOrderByInput;

  factory CopyWith$Input$ContentOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$ContentOrderByInput<TRes>
    implements CopyWith$Input$ContentOrderByInput<TRes> {
  _CopyWithImpl$Input$ContentOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContentOrderByInput _instance;

  final TRes Function(Input$ContentOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ContentOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$ContentOrderByInput<TRes>
    implements CopyWith$Input$ContentOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContentOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$ContentRootsModelOrderByInput {
  factory Input$ContentRootsModelOrderByInput({
    Input$ContentModelReferenceOrderByInput? ContentAssetsRoot,
    Input$ContentModelReferenceOrderByInput? GlobalAssetsRoot,
    Input$ContentModelReferenceOrderByInput? RootPage,
    Input$ContentModelReferenceOrderByInput? SiteAssetsRoot,
    Input$ContentModelReferenceOrderByInput? StartPage,
    Input$ContentModelReferenceOrderByInput? WasteBasket,
  }) =>
      Input$ContentRootsModelOrderByInput._({
        if (ContentAssetsRoot != null) r'ContentAssetsRoot': ContentAssetsRoot,
        if (GlobalAssetsRoot != null) r'GlobalAssetsRoot': GlobalAssetsRoot,
        if (RootPage != null) r'RootPage': RootPage,
        if (SiteAssetsRoot != null) r'SiteAssetsRoot': SiteAssetsRoot,
        if (StartPage != null) r'StartPage': StartPage,
        if (WasteBasket != null) r'WasteBasket': WasteBasket,
      });

  Input$ContentRootsModelOrderByInput._(this._$data);

  factory Input$ContentRootsModelOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentAssetsRoot')) {
      final l$ContentAssetsRoot = data['ContentAssetsRoot'];
      result$data['ContentAssetsRoot'] = l$ContentAssetsRoot == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentAssetsRoot as Map<String, dynamic>));
    }
    if (data.containsKey('GlobalAssetsRoot')) {
      final l$GlobalAssetsRoot = data['GlobalAssetsRoot'];
      result$data['GlobalAssetsRoot'] = l$GlobalAssetsRoot == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$GlobalAssetsRoot as Map<String, dynamic>));
    }
    if (data.containsKey('RootPage')) {
      final l$RootPage = data['RootPage'];
      result$data['RootPage'] = l$RootPage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$RootPage as Map<String, dynamic>));
    }
    if (data.containsKey('SiteAssetsRoot')) {
      final l$SiteAssetsRoot = data['SiteAssetsRoot'];
      result$data['SiteAssetsRoot'] = l$SiteAssetsRoot == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$SiteAssetsRoot as Map<String, dynamic>));
    }
    if (data.containsKey('StartPage')) {
      final l$StartPage = data['StartPage'];
      result$data['StartPage'] = l$StartPage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$StartPage as Map<String, dynamic>));
    }
    if (data.containsKey('WasteBasket')) {
      final l$WasteBasket = data['WasteBasket'];
      result$data['WasteBasket'] = l$WasteBasket == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$WasteBasket as Map<String, dynamic>));
    }
    return Input$ContentRootsModelOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentModelReferenceOrderByInput? get ContentAssetsRoot =>
      (_$data['ContentAssetsRoot'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get GlobalAssetsRoot =>
      (_$data['GlobalAssetsRoot'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get RootPage =>
      (_$data['RootPage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get SiteAssetsRoot =>
      (_$data['SiteAssetsRoot'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get StartPage =>
      (_$data['StartPage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get WasteBasket =>
      (_$data['WasteBasket'] as Input$ContentModelReferenceOrderByInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentAssetsRoot')) {
      final l$ContentAssetsRoot = ContentAssetsRoot;
      result$data['ContentAssetsRoot'] = l$ContentAssetsRoot?.toJson();
    }
    if (_$data.containsKey('GlobalAssetsRoot')) {
      final l$GlobalAssetsRoot = GlobalAssetsRoot;
      result$data['GlobalAssetsRoot'] = l$GlobalAssetsRoot?.toJson();
    }
    if (_$data.containsKey('RootPage')) {
      final l$RootPage = RootPage;
      result$data['RootPage'] = l$RootPage?.toJson();
    }
    if (_$data.containsKey('SiteAssetsRoot')) {
      final l$SiteAssetsRoot = SiteAssetsRoot;
      result$data['SiteAssetsRoot'] = l$SiteAssetsRoot?.toJson();
    }
    if (_$data.containsKey('StartPage')) {
      final l$StartPage = StartPage;
      result$data['StartPage'] = l$StartPage?.toJson();
    }
    if (_$data.containsKey('WasteBasket')) {
      final l$WasteBasket = WasteBasket;
      result$data['WasteBasket'] = l$WasteBasket?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContentRootsModelOrderByInput<
          Input$ContentRootsModelOrderByInput>
      get copyWith => CopyWith$Input$ContentRootsModelOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentRootsModelOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentAssetsRoot = ContentAssetsRoot;
    final lOther$ContentAssetsRoot = other.ContentAssetsRoot;
    if (_$data.containsKey('ContentAssetsRoot') !=
        other._$data.containsKey('ContentAssetsRoot')) {
      return false;
    }
    if (l$ContentAssetsRoot != lOther$ContentAssetsRoot) {
      return false;
    }
    final l$GlobalAssetsRoot = GlobalAssetsRoot;
    final lOther$GlobalAssetsRoot = other.GlobalAssetsRoot;
    if (_$data.containsKey('GlobalAssetsRoot') !=
        other._$data.containsKey('GlobalAssetsRoot')) {
      return false;
    }
    if (l$GlobalAssetsRoot != lOther$GlobalAssetsRoot) {
      return false;
    }
    final l$RootPage = RootPage;
    final lOther$RootPage = other.RootPage;
    if (_$data.containsKey('RootPage') !=
        other._$data.containsKey('RootPage')) {
      return false;
    }
    if (l$RootPage != lOther$RootPage) {
      return false;
    }
    final l$SiteAssetsRoot = SiteAssetsRoot;
    final lOther$SiteAssetsRoot = other.SiteAssetsRoot;
    if (_$data.containsKey('SiteAssetsRoot') !=
        other._$data.containsKey('SiteAssetsRoot')) {
      return false;
    }
    if (l$SiteAssetsRoot != lOther$SiteAssetsRoot) {
      return false;
    }
    final l$StartPage = StartPage;
    final lOther$StartPage = other.StartPage;
    if (_$data.containsKey('StartPage') !=
        other._$data.containsKey('StartPage')) {
      return false;
    }
    if (l$StartPage != lOther$StartPage) {
      return false;
    }
    final l$WasteBasket = WasteBasket;
    final lOther$WasteBasket = other.WasteBasket;
    if (_$data.containsKey('WasteBasket') !=
        other._$data.containsKey('WasteBasket')) {
      return false;
    }
    if (l$WasteBasket != lOther$WasteBasket) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentAssetsRoot = ContentAssetsRoot;
    final l$GlobalAssetsRoot = GlobalAssetsRoot;
    final l$RootPage = RootPage;
    final l$SiteAssetsRoot = SiteAssetsRoot;
    final l$StartPage = StartPage;
    final l$WasteBasket = WasteBasket;
    return Object.hashAll([
      _$data.containsKey('ContentAssetsRoot') ? l$ContentAssetsRoot : const {},
      _$data.containsKey('GlobalAssetsRoot') ? l$GlobalAssetsRoot : const {},
      _$data.containsKey('RootPage') ? l$RootPage : const {},
      _$data.containsKey('SiteAssetsRoot') ? l$SiteAssetsRoot : const {},
      _$data.containsKey('StartPage') ? l$StartPage : const {},
      _$data.containsKey('WasteBasket') ? l$WasteBasket : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentRootsModelOrderByInput<TRes> {
  factory CopyWith$Input$ContentRootsModelOrderByInput(
    Input$ContentRootsModelOrderByInput instance,
    TRes Function(Input$ContentRootsModelOrderByInput) then,
  ) = _CopyWithImpl$Input$ContentRootsModelOrderByInput;

  factory CopyWith$Input$ContentRootsModelOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentRootsModelOrderByInput;

  TRes call({
    Input$ContentModelReferenceOrderByInput? ContentAssetsRoot,
    Input$ContentModelReferenceOrderByInput? GlobalAssetsRoot,
    Input$ContentModelReferenceOrderByInput? RootPage,
    Input$ContentModelReferenceOrderByInput? SiteAssetsRoot,
    Input$ContentModelReferenceOrderByInput? StartPage,
    Input$ContentModelReferenceOrderByInput? WasteBasket,
  });
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentAssetsRoot;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get GlobalAssetsRoot;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get RootPage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get SiteAssetsRoot;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get StartPage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get WasteBasket;
}

class _CopyWithImpl$Input$ContentRootsModelOrderByInput<TRes>
    implements CopyWith$Input$ContentRootsModelOrderByInput<TRes> {
  _CopyWithImpl$Input$ContentRootsModelOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ContentRootsModelOrderByInput _instance;

  final TRes Function(Input$ContentRootsModelOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? ContentAssetsRoot = _undefined,
    Object? GlobalAssetsRoot = _undefined,
    Object? RootPage = _undefined,
    Object? SiteAssetsRoot = _undefined,
    Object? StartPage = _undefined,
    Object? WasteBasket = _undefined,
  }) =>
      _then(Input$ContentRootsModelOrderByInput._({
        ..._instance._$data,
        if (ContentAssetsRoot != _undefined)
          'ContentAssetsRoot':
              (ContentAssetsRoot as Input$ContentModelReferenceOrderByInput?),
        if (GlobalAssetsRoot != _undefined)
          'GlobalAssetsRoot':
              (GlobalAssetsRoot as Input$ContentModelReferenceOrderByInput?),
        if (RootPage != _undefined)
          'RootPage': (RootPage as Input$ContentModelReferenceOrderByInput?),
        if (SiteAssetsRoot != _undefined)
          'SiteAssetsRoot':
              (SiteAssetsRoot as Input$ContentModelReferenceOrderByInput?),
        if (StartPage != _undefined)
          'StartPage': (StartPage as Input$ContentModelReferenceOrderByInput?),
        if (WasteBasket != _undefined)
          'WasteBasket':
              (WasteBasket as Input$ContentModelReferenceOrderByInput?),
      }));

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentAssetsRoot {
    final local$ContentAssetsRoot = _instance.ContentAssetsRoot;
    return local$ContentAssetsRoot == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentAssetsRoot, (e) => call(ContentAssetsRoot: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get GlobalAssetsRoot {
    final local$GlobalAssetsRoot = _instance.GlobalAssetsRoot;
    return local$GlobalAssetsRoot == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$GlobalAssetsRoot, (e) => call(GlobalAssetsRoot: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get RootPage {
    final local$RootPage = _instance.RootPage;
    return local$RootPage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$RootPage, (e) => call(RootPage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get SiteAssetsRoot {
    final local$SiteAssetsRoot = _instance.SiteAssetsRoot;
    return local$SiteAssetsRoot == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$SiteAssetsRoot, (e) => call(SiteAssetsRoot: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get StartPage {
    final local$StartPage = _instance.StartPage;
    return local$StartPage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$StartPage, (e) => call(StartPage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get WasteBasket {
    final local$WasteBasket = _instance.WasteBasket;
    return local$WasteBasket == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$WasteBasket, (e) => call(WasteBasket: e));
  }
}

class _CopyWithStubImpl$Input$ContentRootsModelOrderByInput<TRes>
    implements CopyWith$Input$ContentRootsModelOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ContentRootsModelOrderByInput(this._res);

  TRes _res;

  call({
    Input$ContentModelReferenceOrderByInput? ContentAssetsRoot,
    Input$ContentModelReferenceOrderByInput? GlobalAssetsRoot,
    Input$ContentModelReferenceOrderByInput? RootPage,
    Input$ContentModelReferenceOrderByInput? SiteAssetsRoot,
    Input$ContentModelReferenceOrderByInput? StartPage,
    Input$ContentModelReferenceOrderByInput? WasteBasket,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes>
      get ContentAssetsRoot =>
          CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get GlobalAssetsRoot =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get RootPage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get SiteAssetsRoot =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get StartPage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get WasteBasket =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$ContentRootsModelWhereInput {
  factory Input$ContentRootsModelWhereInput({
    Input$ContentModelReferenceWhereInput? ContentAssetsRoot,
    Input$ContentModelReferenceWhereInput? GlobalAssetsRoot,
    Input$ContentModelReferenceWhereInput? RootPage,
    Input$ContentModelReferenceWhereInput? SiteAssetsRoot,
    Input$ContentModelReferenceWhereInput? StartPage,
    Input$ContentModelReferenceWhereInput? WasteBasket,
  }) =>
      Input$ContentRootsModelWhereInput._({
        if (ContentAssetsRoot != null) r'ContentAssetsRoot': ContentAssetsRoot,
        if (GlobalAssetsRoot != null) r'GlobalAssetsRoot': GlobalAssetsRoot,
        if (RootPage != null) r'RootPage': RootPage,
        if (SiteAssetsRoot != null) r'SiteAssetsRoot': SiteAssetsRoot,
        if (StartPage != null) r'StartPage': StartPage,
        if (WasteBasket != null) r'WasteBasket': WasteBasket,
      });

  Input$ContentRootsModelWhereInput._(this._$data);

  factory Input$ContentRootsModelWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentAssetsRoot')) {
      final l$ContentAssetsRoot = data['ContentAssetsRoot'];
      result$data['ContentAssetsRoot'] = l$ContentAssetsRoot == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentAssetsRoot as Map<String, dynamic>));
    }
    if (data.containsKey('GlobalAssetsRoot')) {
      final l$GlobalAssetsRoot = data['GlobalAssetsRoot'];
      result$data['GlobalAssetsRoot'] = l$GlobalAssetsRoot == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$GlobalAssetsRoot as Map<String, dynamic>));
    }
    if (data.containsKey('RootPage')) {
      final l$RootPage = data['RootPage'];
      result$data['RootPage'] = l$RootPage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$RootPage as Map<String, dynamic>));
    }
    if (data.containsKey('SiteAssetsRoot')) {
      final l$SiteAssetsRoot = data['SiteAssetsRoot'];
      result$data['SiteAssetsRoot'] = l$SiteAssetsRoot == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$SiteAssetsRoot as Map<String, dynamic>));
    }
    if (data.containsKey('StartPage')) {
      final l$StartPage = data['StartPage'];
      result$data['StartPage'] = l$StartPage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$StartPage as Map<String, dynamic>));
    }
    if (data.containsKey('WasteBasket')) {
      final l$WasteBasket = data['WasteBasket'];
      result$data['WasteBasket'] = l$WasteBasket == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$WasteBasket as Map<String, dynamic>));
    }
    return Input$ContentRootsModelWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentModelReferenceWhereInput? get ContentAssetsRoot =>
      (_$data['ContentAssetsRoot'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get GlobalAssetsRoot =>
      (_$data['GlobalAssetsRoot'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get RootPage =>
      (_$data['RootPage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get SiteAssetsRoot =>
      (_$data['SiteAssetsRoot'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get StartPage =>
      (_$data['StartPage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get WasteBasket =>
      (_$data['WasteBasket'] as Input$ContentModelReferenceWhereInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentAssetsRoot')) {
      final l$ContentAssetsRoot = ContentAssetsRoot;
      result$data['ContentAssetsRoot'] = l$ContentAssetsRoot?.toJson();
    }
    if (_$data.containsKey('GlobalAssetsRoot')) {
      final l$GlobalAssetsRoot = GlobalAssetsRoot;
      result$data['GlobalAssetsRoot'] = l$GlobalAssetsRoot?.toJson();
    }
    if (_$data.containsKey('RootPage')) {
      final l$RootPage = RootPage;
      result$data['RootPage'] = l$RootPage?.toJson();
    }
    if (_$data.containsKey('SiteAssetsRoot')) {
      final l$SiteAssetsRoot = SiteAssetsRoot;
      result$data['SiteAssetsRoot'] = l$SiteAssetsRoot?.toJson();
    }
    if (_$data.containsKey('StartPage')) {
      final l$StartPage = StartPage;
      result$data['StartPage'] = l$StartPage?.toJson();
    }
    if (_$data.containsKey('WasteBasket')) {
      final l$WasteBasket = WasteBasket;
      result$data['WasteBasket'] = l$WasteBasket?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContentRootsModelWhereInput<Input$ContentRootsModelWhereInput>
      get copyWith => CopyWith$Input$ContentRootsModelWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentRootsModelWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentAssetsRoot = ContentAssetsRoot;
    final lOther$ContentAssetsRoot = other.ContentAssetsRoot;
    if (_$data.containsKey('ContentAssetsRoot') !=
        other._$data.containsKey('ContentAssetsRoot')) {
      return false;
    }
    if (l$ContentAssetsRoot != lOther$ContentAssetsRoot) {
      return false;
    }
    final l$GlobalAssetsRoot = GlobalAssetsRoot;
    final lOther$GlobalAssetsRoot = other.GlobalAssetsRoot;
    if (_$data.containsKey('GlobalAssetsRoot') !=
        other._$data.containsKey('GlobalAssetsRoot')) {
      return false;
    }
    if (l$GlobalAssetsRoot != lOther$GlobalAssetsRoot) {
      return false;
    }
    final l$RootPage = RootPage;
    final lOther$RootPage = other.RootPage;
    if (_$data.containsKey('RootPage') !=
        other._$data.containsKey('RootPage')) {
      return false;
    }
    if (l$RootPage != lOther$RootPage) {
      return false;
    }
    final l$SiteAssetsRoot = SiteAssetsRoot;
    final lOther$SiteAssetsRoot = other.SiteAssetsRoot;
    if (_$data.containsKey('SiteAssetsRoot') !=
        other._$data.containsKey('SiteAssetsRoot')) {
      return false;
    }
    if (l$SiteAssetsRoot != lOther$SiteAssetsRoot) {
      return false;
    }
    final l$StartPage = StartPage;
    final lOther$StartPage = other.StartPage;
    if (_$data.containsKey('StartPage') !=
        other._$data.containsKey('StartPage')) {
      return false;
    }
    if (l$StartPage != lOther$StartPage) {
      return false;
    }
    final l$WasteBasket = WasteBasket;
    final lOther$WasteBasket = other.WasteBasket;
    if (_$data.containsKey('WasteBasket') !=
        other._$data.containsKey('WasteBasket')) {
      return false;
    }
    if (l$WasteBasket != lOther$WasteBasket) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentAssetsRoot = ContentAssetsRoot;
    final l$GlobalAssetsRoot = GlobalAssetsRoot;
    final l$RootPage = RootPage;
    final l$SiteAssetsRoot = SiteAssetsRoot;
    final l$StartPage = StartPage;
    final l$WasteBasket = WasteBasket;
    return Object.hashAll([
      _$data.containsKey('ContentAssetsRoot') ? l$ContentAssetsRoot : const {},
      _$data.containsKey('GlobalAssetsRoot') ? l$GlobalAssetsRoot : const {},
      _$data.containsKey('RootPage') ? l$RootPage : const {},
      _$data.containsKey('SiteAssetsRoot') ? l$SiteAssetsRoot : const {},
      _$data.containsKey('StartPage') ? l$StartPage : const {},
      _$data.containsKey('WasteBasket') ? l$WasteBasket : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentRootsModelWhereInput<TRes> {
  factory CopyWith$Input$ContentRootsModelWhereInput(
    Input$ContentRootsModelWhereInput instance,
    TRes Function(Input$ContentRootsModelWhereInput) then,
  ) = _CopyWithImpl$Input$ContentRootsModelWhereInput;

  factory CopyWith$Input$ContentRootsModelWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentRootsModelWhereInput;

  TRes call({
    Input$ContentModelReferenceWhereInput? ContentAssetsRoot,
    Input$ContentModelReferenceWhereInput? GlobalAssetsRoot,
    Input$ContentModelReferenceWhereInput? RootPage,
    Input$ContentModelReferenceWhereInput? SiteAssetsRoot,
    Input$ContentModelReferenceWhereInput? StartPage,
    Input$ContentModelReferenceWhereInput? WasteBasket,
  });
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentAssetsRoot;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get GlobalAssetsRoot;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get RootPage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get SiteAssetsRoot;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get StartPage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get WasteBasket;
}

class _CopyWithImpl$Input$ContentRootsModelWhereInput<TRes>
    implements CopyWith$Input$ContentRootsModelWhereInput<TRes> {
  _CopyWithImpl$Input$ContentRootsModelWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentRootsModelWhereInput _instance;

  final TRes Function(Input$ContentRootsModelWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? ContentAssetsRoot = _undefined,
    Object? GlobalAssetsRoot = _undefined,
    Object? RootPage = _undefined,
    Object? SiteAssetsRoot = _undefined,
    Object? StartPage = _undefined,
    Object? WasteBasket = _undefined,
  }) =>
      _then(Input$ContentRootsModelWhereInput._({
        ..._instance._$data,
        if (ContentAssetsRoot != _undefined)
          'ContentAssetsRoot':
              (ContentAssetsRoot as Input$ContentModelReferenceWhereInput?),
        if (GlobalAssetsRoot != _undefined)
          'GlobalAssetsRoot':
              (GlobalAssetsRoot as Input$ContentModelReferenceWhereInput?),
        if (RootPage != _undefined)
          'RootPage': (RootPage as Input$ContentModelReferenceWhereInput?),
        if (SiteAssetsRoot != _undefined)
          'SiteAssetsRoot':
              (SiteAssetsRoot as Input$ContentModelReferenceWhereInput?),
        if (StartPage != _undefined)
          'StartPage': (StartPage as Input$ContentModelReferenceWhereInput?),
        if (WasteBasket != _undefined)
          'WasteBasket':
              (WasteBasket as Input$ContentModelReferenceWhereInput?),
      }));

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentAssetsRoot {
    final local$ContentAssetsRoot = _instance.ContentAssetsRoot;
    return local$ContentAssetsRoot == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentAssetsRoot, (e) => call(ContentAssetsRoot: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get GlobalAssetsRoot {
    final local$GlobalAssetsRoot = _instance.GlobalAssetsRoot;
    return local$GlobalAssetsRoot == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$GlobalAssetsRoot, (e) => call(GlobalAssetsRoot: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get RootPage {
    final local$RootPage = _instance.RootPage;
    return local$RootPage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$RootPage, (e) => call(RootPage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get SiteAssetsRoot {
    final local$SiteAssetsRoot = _instance.SiteAssetsRoot;
    return local$SiteAssetsRoot == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$SiteAssetsRoot, (e) => call(SiteAssetsRoot: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get StartPage {
    final local$StartPage = _instance.StartPage;
    return local$StartPage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$StartPage, (e) => call(StartPage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get WasteBasket {
    final local$WasteBasket = _instance.WasteBasket;
    return local$WasteBasket == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$WasteBasket, (e) => call(WasteBasket: e));
  }
}

class _CopyWithStubImpl$Input$ContentRootsModelWhereInput<TRes>
    implements CopyWith$Input$ContentRootsModelWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentRootsModelWhereInput(this._res);

  TRes _res;

  call({
    Input$ContentModelReferenceWhereInput? ContentAssetsRoot,
    Input$ContentModelReferenceWhereInput? GlobalAssetsRoot,
    Input$ContentModelReferenceWhereInput? RootPage,
    Input$ContentModelReferenceWhereInput? SiteAssetsRoot,
    Input$ContentModelReferenceWhereInput? StartPage,
    Input$ContentModelReferenceWhereInput? WasteBasket,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentAssetsRoot =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get GlobalAssetsRoot =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get RootPage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get SiteAssetsRoot =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get StartPage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get WasteBasket =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);
}

class Input$ContentWhereInput {
  factory Input$ContentWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ContentWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContentWhereInput?>? $_not,
    List<Input$ContentWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$ContentWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ContentWhereInput._(this._$data);

  factory Input$ContentWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContentWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContentWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ContentWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$ContentWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$ContentWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$ContentWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$ContentWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$ContentWhereInput?>?);

  List<Input$ContentWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$ContentWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput> get copyWith =>
      CopyWith$Input$ContentWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ContentWhereInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ContentWhereInput<TRes> {
  factory CopyWith$Input$ContentWhereInput(
    Input$ContentWhereInput instance,
    TRes Function(Input$ContentWhereInput) then,
  ) = _CopyWithImpl$Input$ContentWhereInput;

  factory CopyWith$Input$ContentWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ContentWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ContentWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContentWhereInput?>? $_not,
    List<Input$ContentWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$ContentWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$ContentWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$ContentWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ContentWhereInput<Input$ContentWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$ContentWhereInput<TRes>
    implements CopyWith$Input$ContentWhereInput<TRes> {
  _CopyWithImpl$Input$ContentWhereInput(
    this._instance,
    this._then,
  );

  final Input$ContentWhereInput _instance;

  final TRes Function(Input$ContentWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ContentWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$ContentWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$ContentWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$ContentWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$ContentWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContentWhereInput<
                          Input$ContentWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$ContentWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$ContentWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContentWhereInput<
                          Input$ContentWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$ContentWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$ContentWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ContentWhereInput<
                          Input$ContentWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$ContentWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$ContentWhereInput<TRes>
    implements CopyWith$Input$ContentWhereInput<TRes> {
  _CopyWithStubImpl$Input$ContentWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$ContentWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ContentWhereInput?>? $_not,
    List<Input$ContentWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$DataOrderByInput {
  factory Input$DataOrderByInput({
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  }) =>
      Input$DataOrderByInput._({
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
      });

  Input$DataOrderByInput._(this._$data);

  factory Input$DataOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    return Input$DataOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    return result$data;
  }

  CopyWith$Input$DataOrderByInput<Input$DataOrderByInput> get copyWith =>
      CopyWith$Input$DataOrderByInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$DataOrderByInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    return Object.hashAll([
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
    ]);
  }
}

abstract class CopyWith$Input$DataOrderByInput<TRes> {
  factory CopyWith$Input$DataOrderByInput(
    Input$DataOrderByInput instance,
    TRes Function(Input$DataOrderByInput) then,
  ) = _CopyWithImpl$Input$DataOrderByInput;

  factory CopyWith$Input$DataOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$DataOrderByInput;

  TRes call({
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  });
}

class _CopyWithImpl$Input$DataOrderByInput<TRes>
    implements CopyWith$Input$DataOrderByInput<TRes> {
  _CopyWithImpl$Input$DataOrderByInput(
    this._instance,
    this._then,
  );

  final Input$DataOrderByInput _instance;

  final TRes Function(Input$DataOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
  }) =>
      _then(Input$DataOrderByInput._({
        ..._instance._$data,
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
      }));
}

class _CopyWithStubImpl$Input$DataOrderByInput<TRes>
    implements CopyWith$Input$DataOrderByInput<TRes> {
  _CopyWithStubImpl$Input$DataOrderByInput(this._res);

  TRes _res;

  call({
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  }) =>
      _res;
}

class Input$DataWhereInput {
  factory Input$DataWhereInput({
    List<Input$DataWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$DataWhereInput?>? $_not,
    List<Input$DataWhereInput?>? $_or,
  }) =>
      Input$DataWhereInput._({
        if ($_and != null) r'_and': $_and,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
      });

  Input$DataWhereInput._(this._$data);

  factory Input$DataWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$DataWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$DataWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$DataWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    return Input$DataWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$DataWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$DataWhereInput?>?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$DataWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$DataWhereInput?>?);

  List<Input$DataWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$DataWhereInput?>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$DataWhereInput<Input$DataWhereInput> get copyWith =>
      CopyWith$Input$DataWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$DataWhereInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$DataWhereInput<TRes> {
  factory CopyWith$Input$DataWhereInput(
    Input$DataWhereInput instance,
    TRes Function(Input$DataWhereInput) then,
  ) = _CopyWithImpl$Input$DataWhereInput;

  factory CopyWith$Input$DataWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$DataWhereInput;

  TRes call({
    List<Input$DataWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$DataWhereInput?>? $_not,
    List<Input$DataWhereInput?>? $_or,
  });
  TRes $_and(
      Iterable<Input$DataWhereInput?>? Function(
              Iterable<CopyWith$Input$DataWhereInput<Input$DataWhereInput>?>?)
          _fn);
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$DataWhereInput?>? Function(
              Iterable<CopyWith$Input$DataWhereInput<Input$DataWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$DataWhereInput?>? Function(
              Iterable<CopyWith$Input$DataWhereInput<Input$DataWhereInput>?>?)
          _fn);
}

class _CopyWithImpl$Input$DataWhereInput<TRes>
    implements CopyWith$Input$DataWhereInput<TRes> {
  _CopyWithImpl$Input$DataWhereInput(
    this._instance,
    this._then,
  );

  final Input$DataWhereInput _instance;

  final TRes Function(Input$DataWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
  }) =>
      _then(Input$DataWhereInput._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$DataWhereInput?>?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$DataWhereInput?>?),
        if ($_or != _undefined) '_or': ($_or as List<Input$DataWhereInput?>?),
      }));

  TRes $_and(
          Iterable<Input$DataWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$DataWhereInput<Input$DataWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$DataWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$DataWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$DataWhereInput<Input$DataWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$DataWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$DataWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$DataWhereInput<Input$DataWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$DataWhereInput(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Input$DataWhereInput<TRes>
    implements CopyWith$Input$DataWhereInput<TRes> {
  _CopyWithStubImpl$Input$DataWhereInput(this._res);

  TRes _res;

  call({
    List<Input$DataWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$DataWhereInput?>? $_not,
    List<Input$DataWhereInput?>? $_or,
  }) =>
      _res;

  $_and(_fn) => _res;

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;
}

class Input$DateFilterInput {
  factory Input$DateFilterInput({
    int? boost,
    Input$Decay? decay,
    DateTime? eq,
    bool? exist,
    DateTime? gt,
    DateTime? gte,
    DateTime? lt,
    DateTime? lte,
    DateTime? notEq,
  }) =>
      Input$DateFilterInput._({
        if (boost != null) r'boost': boost,
        if (decay != null) r'decay': decay,
        if (eq != null) r'eq': eq,
        if (exist != null) r'exist': exist,
        if (gt != null) r'gt': gt,
        if (gte != null) r'gte': gte,
        if (lt != null) r'lt': lt,
        if (lte != null) r'lte': lte,
        if (notEq != null) r'notEq': notEq,
      });

  Input$DateFilterInput._(this._$data);

  factory Input$DateFilterInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('boost')) {
      final l$boost = data['boost'];
      result$data['boost'] = (l$boost as int?);
    }
    if (data.containsKey('decay')) {
      final l$decay = data['decay'];
      result$data['decay'] = l$decay == null
          ? null
          : Input$Decay.fromJson((l$decay as Map<String, dynamic>));
    }
    if (data.containsKey('eq')) {
      final l$eq = data['eq'];
      result$data['eq'] =
          l$eq == null ? null : DateTime.parse((l$eq as String));
    }
    if (data.containsKey('exist')) {
      final l$exist = data['exist'];
      result$data['exist'] = (l$exist as bool?);
    }
    if (data.containsKey('gt')) {
      final l$gt = data['gt'];
      result$data['gt'] =
          l$gt == null ? null : DateTime.parse((l$gt as String));
    }
    if (data.containsKey('gte')) {
      final l$gte = data['gte'];
      result$data['gte'] =
          l$gte == null ? null : DateTime.parse((l$gte as String));
    }
    if (data.containsKey('lt')) {
      final l$lt = data['lt'];
      result$data['lt'] =
          l$lt == null ? null : DateTime.parse((l$lt as String));
    }
    if (data.containsKey('lte')) {
      final l$lte = data['lte'];
      result$data['lte'] =
          l$lte == null ? null : DateTime.parse((l$lte as String));
    }
    if (data.containsKey('notEq')) {
      final l$notEq = data['notEq'];
      result$data['notEq'] =
          l$notEq == null ? null : DateTime.parse((l$notEq as String));
    }
    return Input$DateFilterInput._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get boost => (_$data['boost'] as int?);

  Input$Decay? get decay => (_$data['decay'] as Input$Decay?);

  DateTime? get eq => (_$data['eq'] as DateTime?);

  bool? get exist => (_$data['exist'] as bool?);

  DateTime? get gt => (_$data['gt'] as DateTime?);

  DateTime? get gte => (_$data['gte'] as DateTime?);

  DateTime? get lt => (_$data['lt'] as DateTime?);

  DateTime? get lte => (_$data['lte'] as DateTime?);

  DateTime? get notEq => (_$data['notEq'] as DateTime?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('boost')) {
      final l$boost = boost;
      result$data['boost'] = l$boost;
    }
    if (_$data.containsKey('decay')) {
      final l$decay = decay;
      result$data['decay'] = l$decay?.toJson();
    }
    if (_$data.containsKey('eq')) {
      final l$eq = eq;
      result$data['eq'] = l$eq?.toIso8601String();
    }
    if (_$data.containsKey('exist')) {
      final l$exist = exist;
      result$data['exist'] = l$exist;
    }
    if (_$data.containsKey('gt')) {
      final l$gt = gt;
      result$data['gt'] = l$gt?.toIso8601String();
    }
    if (_$data.containsKey('gte')) {
      final l$gte = gte;
      result$data['gte'] = l$gte?.toIso8601String();
    }
    if (_$data.containsKey('lt')) {
      final l$lt = lt;
      result$data['lt'] = l$lt?.toIso8601String();
    }
    if (_$data.containsKey('lte')) {
      final l$lte = lte;
      result$data['lte'] = l$lte?.toIso8601String();
    }
    if (_$data.containsKey('notEq')) {
      final l$notEq = notEq;
      result$data['notEq'] = l$notEq?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$DateFilterInput<Input$DateFilterInput> get copyWith =>
      CopyWith$Input$DateFilterInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$DateFilterInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$boost = boost;
    final lOther$boost = other.boost;
    if (_$data.containsKey('boost') != other._$data.containsKey('boost')) {
      return false;
    }
    if (l$boost != lOther$boost) {
      return false;
    }
    final l$decay = decay;
    final lOther$decay = other.decay;
    if (_$data.containsKey('decay') != other._$data.containsKey('decay')) {
      return false;
    }
    if (l$decay != lOther$decay) {
      return false;
    }
    final l$eq = eq;
    final lOther$eq = other.eq;
    if (_$data.containsKey('eq') != other._$data.containsKey('eq')) {
      return false;
    }
    if (l$eq != lOther$eq) {
      return false;
    }
    final l$exist = exist;
    final lOther$exist = other.exist;
    if (_$data.containsKey('exist') != other._$data.containsKey('exist')) {
      return false;
    }
    if (l$exist != lOther$exist) {
      return false;
    }
    final l$gt = gt;
    final lOther$gt = other.gt;
    if (_$data.containsKey('gt') != other._$data.containsKey('gt')) {
      return false;
    }
    if (l$gt != lOther$gt) {
      return false;
    }
    final l$gte = gte;
    final lOther$gte = other.gte;
    if (_$data.containsKey('gte') != other._$data.containsKey('gte')) {
      return false;
    }
    if (l$gte != lOther$gte) {
      return false;
    }
    final l$lt = lt;
    final lOther$lt = other.lt;
    if (_$data.containsKey('lt') != other._$data.containsKey('lt')) {
      return false;
    }
    if (l$lt != lOther$lt) {
      return false;
    }
    final l$lte = lte;
    final lOther$lte = other.lte;
    if (_$data.containsKey('lte') != other._$data.containsKey('lte')) {
      return false;
    }
    if (l$lte != lOther$lte) {
      return false;
    }
    final l$notEq = notEq;
    final lOther$notEq = other.notEq;
    if (_$data.containsKey('notEq') != other._$data.containsKey('notEq')) {
      return false;
    }
    if (l$notEq != lOther$notEq) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$boost = boost;
    final l$decay = decay;
    final l$eq = eq;
    final l$exist = exist;
    final l$gt = gt;
    final l$gte = gte;
    final l$lt = lt;
    final l$lte = lte;
    final l$notEq = notEq;
    return Object.hashAll([
      _$data.containsKey('boost') ? l$boost : const {},
      _$data.containsKey('decay') ? l$decay : const {},
      _$data.containsKey('eq') ? l$eq : const {},
      _$data.containsKey('exist') ? l$exist : const {},
      _$data.containsKey('gt') ? l$gt : const {},
      _$data.containsKey('gte') ? l$gte : const {},
      _$data.containsKey('lt') ? l$lt : const {},
      _$data.containsKey('lte') ? l$lte : const {},
      _$data.containsKey('notEq') ? l$notEq : const {},
    ]);
  }
}

abstract class CopyWith$Input$DateFilterInput<TRes> {
  factory CopyWith$Input$DateFilterInput(
    Input$DateFilterInput instance,
    TRes Function(Input$DateFilterInput) then,
  ) = _CopyWithImpl$Input$DateFilterInput;

  factory CopyWith$Input$DateFilterInput.stub(TRes res) =
      _CopyWithStubImpl$Input$DateFilterInput;

  TRes call({
    int? boost,
    Input$Decay? decay,
    DateTime? eq,
    bool? exist,
    DateTime? gt,
    DateTime? gte,
    DateTime? lt,
    DateTime? lte,
    DateTime? notEq,
  });
  CopyWith$Input$Decay<TRes> get decay;
}

class _CopyWithImpl$Input$DateFilterInput<TRes>
    implements CopyWith$Input$DateFilterInput<TRes> {
  _CopyWithImpl$Input$DateFilterInput(
    this._instance,
    this._then,
  );

  final Input$DateFilterInput _instance;

  final TRes Function(Input$DateFilterInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? boost = _undefined,
    Object? decay = _undefined,
    Object? eq = _undefined,
    Object? exist = _undefined,
    Object? gt = _undefined,
    Object? gte = _undefined,
    Object? lt = _undefined,
    Object? lte = _undefined,
    Object? notEq = _undefined,
  }) =>
      _then(Input$DateFilterInput._({
        ..._instance._$data,
        if (boost != _undefined) 'boost': (boost as int?),
        if (decay != _undefined) 'decay': (decay as Input$Decay?),
        if (eq != _undefined) 'eq': (eq as DateTime?),
        if (exist != _undefined) 'exist': (exist as bool?),
        if (gt != _undefined) 'gt': (gt as DateTime?),
        if (gte != _undefined) 'gte': (gte as DateTime?),
        if (lt != _undefined) 'lt': (lt as DateTime?),
        if (lte != _undefined) 'lte': (lte as DateTime?),
        if (notEq != _undefined) 'notEq': (notEq as DateTime?),
      }));

  CopyWith$Input$Decay<TRes> get decay {
    final local$decay = _instance.decay;
    return local$decay == null
        ? CopyWith$Input$Decay.stub(_then(_instance))
        : CopyWith$Input$Decay(local$decay, (e) => call(decay: e));
  }
}

class _CopyWithStubImpl$Input$DateFilterInput<TRes>
    implements CopyWith$Input$DateFilterInput<TRes> {
  _CopyWithStubImpl$Input$DateFilterInput(this._res);

  TRes _res;

  call({
    int? boost,
    Input$Decay? decay,
    DateTime? eq,
    bool? exist,
    DateTime? gt,
    DateTime? gte,
    DateTime? lt,
    DateTime? lte,
    DateTime? notEq,
  }) =>
      _res;

  CopyWith$Input$Decay<TRes> get decay => CopyWith$Input$Decay.stub(_res);
}

class Input$Decay {
  factory Input$Decay({
    DateTime? origin,
    double? rate,
    int? scale,
  }) =>
      Input$Decay._({
        if (origin != null) r'origin': origin,
        if (rate != null) r'rate': rate,
        if (scale != null) r'scale': scale,
      });

  Input$Decay._(this._$data);

  factory Input$Decay.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('origin')) {
      final l$origin = data['origin'];
      result$data['origin'] =
          l$origin == null ? null : DateTime.parse((l$origin as String));
    }
    if (data.containsKey('rate')) {
      final l$rate = data['rate'];
      result$data['rate'] = (l$rate as num?)?.toDouble();
    }
    if (data.containsKey('scale')) {
      final l$scale = data['scale'];
      result$data['scale'] = (l$scale as int?);
    }
    return Input$Decay._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get origin => (_$data['origin'] as DateTime?);

  double? get rate => (_$data['rate'] as double?);

  int? get scale => (_$data['scale'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('origin')) {
      final l$origin = origin;
      result$data['origin'] = l$origin?.toIso8601String();
    }
    if (_$data.containsKey('rate')) {
      final l$rate = rate;
      result$data['rate'] = l$rate;
    }
    if (_$data.containsKey('scale')) {
      final l$scale = scale;
      result$data['scale'] = l$scale;
    }
    return result$data;
  }

  CopyWith$Input$Decay<Input$Decay> get copyWith => CopyWith$Input$Decay(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$Decay || runtimeType != other.runtimeType) {
      return false;
    }
    final l$origin = origin;
    final lOther$origin = other.origin;
    if (_$data.containsKey('origin') != other._$data.containsKey('origin')) {
      return false;
    }
    if (l$origin != lOther$origin) {
      return false;
    }
    final l$rate = rate;
    final lOther$rate = other.rate;
    if (_$data.containsKey('rate') != other._$data.containsKey('rate')) {
      return false;
    }
    if (l$rate != lOther$rate) {
      return false;
    }
    final l$scale = scale;
    final lOther$scale = other.scale;
    if (_$data.containsKey('scale') != other._$data.containsKey('scale')) {
      return false;
    }
    if (l$scale != lOther$scale) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$origin = origin;
    final l$rate = rate;
    final l$scale = scale;
    return Object.hashAll([
      _$data.containsKey('origin') ? l$origin : const {},
      _$data.containsKey('rate') ? l$rate : const {},
      _$data.containsKey('scale') ? l$scale : const {},
    ]);
  }
}

abstract class CopyWith$Input$Decay<TRes> {
  factory CopyWith$Input$Decay(
    Input$Decay instance,
    TRes Function(Input$Decay) then,
  ) = _CopyWithImpl$Input$Decay;

  factory CopyWith$Input$Decay.stub(TRes res) = _CopyWithStubImpl$Input$Decay;

  TRes call({
    DateTime? origin,
    double? rate,
    int? scale,
  });
}

class _CopyWithImpl$Input$Decay<TRes> implements CopyWith$Input$Decay<TRes> {
  _CopyWithImpl$Input$Decay(
    this._instance,
    this._then,
  );

  final Input$Decay _instance;

  final TRes Function(Input$Decay) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? origin = _undefined,
    Object? rate = _undefined,
    Object? scale = _undefined,
  }) =>
      _then(Input$Decay._({
        ..._instance._$data,
        if (origin != _undefined) 'origin': (origin as DateTime?),
        if (rate != _undefined) 'rate': (rate as double?),
        if (scale != _undefined) 'scale': (scale as int?),
      }));
}

class _CopyWithStubImpl$Input$Decay<TRes>
    implements CopyWith$Input$Decay<TRes> {
  _CopyWithStubImpl$Input$Decay(this._res);

  TRes _res;

  call({
    DateTime? origin,
    double? rate,
    int? scale,
  }) =>
      _res;
}

class Input$EditorialBlockOrderByInput {
  factory Input$EditorialBlockOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$EditorialBlockOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$EditorialBlockOrderByInput._(this._$data);

  factory Input$EditorialBlockOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : fromJson$Enum$OrderBy((l$MainBody as String));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$EditorialBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MainBody => (_$data['MainBody'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] =
          l$MainBody == null ? null : toJson$Enum$OrderBy(l$MainBody);
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$EditorialBlockOrderByInput<Input$EditorialBlockOrderByInput>
      get copyWith => CopyWith$Input$EditorialBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$EditorialBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$EditorialBlockOrderByInput<TRes> {
  factory CopyWith$Input$EditorialBlockOrderByInput(
    Input$EditorialBlockOrderByInput instance,
    TRes Function(Input$EditorialBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$EditorialBlockOrderByInput;

  factory CopyWith$Input$EditorialBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$EditorialBlockOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$EditorialBlockOrderByInput<TRes>
    implements CopyWith$Input$EditorialBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$EditorialBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$EditorialBlockOrderByInput _instance;

  final TRes Function(Input$EditorialBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$EditorialBlockOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MainBody != _undefined) 'MainBody': (MainBody as Enum$OrderBy?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$EditorialBlockOrderByInput<TRes>
    implements CopyWith$Input$EditorialBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$EditorialBlockOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$EditorialBlockWhereInput {
  factory Input$EditorialBlockWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$EditorialBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$EditorialBlockWhereInput?>? $_not,
    List<Input$EditorialBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$EditorialBlockWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$EditorialBlockWhereInput._(this._$data);

  factory Input$EditorialBlockWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MainBody as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$EditorialBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$EditorialBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$EditorialBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$EditorialBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MainBody =>
      (_$data['MainBody'] as Input$SearchableStringFilterInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$EditorialBlockWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$EditorialBlockWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$EditorialBlockWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$EditorialBlockWhereInput?>?);

  List<Input$EditorialBlockWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$EditorialBlockWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] = l$MainBody?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$EditorialBlockWhereInput<Input$EditorialBlockWhereInput>
      get copyWith => CopyWith$Input$EditorialBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$EditorialBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$EditorialBlockWhereInput<TRes> {
  factory CopyWith$Input$EditorialBlockWhereInput(
    Input$EditorialBlockWhereInput instance,
    TRes Function(Input$EditorialBlockWhereInput) then,
  ) = _CopyWithImpl$Input$EditorialBlockWhereInput;

  factory CopyWith$Input$EditorialBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$EditorialBlockWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$EditorialBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$EditorialBlockWhereInput?>? $_not,
    List<Input$EditorialBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$EditorialBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$EditorialBlockWhereInput<
                      Input$EditorialBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$EditorialBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$EditorialBlockWhereInput<
                      Input$EditorialBlockWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$EditorialBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$EditorialBlockWhereInput<
                      Input$EditorialBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$EditorialBlockWhereInput<TRes>
    implements CopyWith$Input$EditorialBlockWhereInput<TRes> {
  _CopyWithImpl$Input$EditorialBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$EditorialBlockWhereInput _instance;

  final TRes Function(Input$EditorialBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$EditorialBlockWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MainBody != _undefined)
          'MainBody': (MainBody as Input$SearchableStringFilterInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$EditorialBlockWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$EditorialBlockWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$EditorialBlockWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody {
    final local$MainBody = _instance.MainBody;
    return local$MainBody == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MainBody, (e) => call(MainBody: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$EditorialBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$EditorialBlockWhereInput<
                          Input$EditorialBlockWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$EditorialBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$EditorialBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$EditorialBlockWhereInput<
                          Input$EditorialBlockWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$EditorialBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$EditorialBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$EditorialBlockWhereInput<
                          Input$EditorialBlockWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$EditorialBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$EditorialBlockWhereInput<TRes>
    implements CopyWith$Input$EditorialBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$EditorialBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$EditorialBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$EditorialBlockWhereInput?>? $_not,
    List<Input$EditorialBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$GenericMediaOrderByInput {
  factory Input$GenericMediaOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? Description,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$GenericMediaOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (Content != null) r'Content': Content,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (Description != null) r'Description': Description,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MimeType != null) r'MimeType': MimeType,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Thumbnail != null) r'Thumbnail': Thumbnail,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$GenericMediaOrderByInput._(this._$data);

  factory Input$GenericMediaOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('Content')) {
      final l$Content = data['Content'];
      result$data['Content'] = l$Content == null
          ? null
          : fromJson$Enum$OrderBy((l$Content as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('Description')) {
      final l$Description = data['Description'];
      result$data['Description'] = l$Description == null
          ? null
          : fromJson$Enum$OrderBy((l$Description as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MimeType')) {
      final l$MimeType = data['MimeType'];
      result$data['MimeType'] = l$MimeType == null
          ? null
          : fromJson$Enum$OrderBy((l$MimeType as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Thumbnail')) {
      final l$Thumbnail = data['Thumbnail'];
      result$data['Thumbnail'] = l$Thumbnail == null
          ? null
          : Input$BlobModelOrderByInput.fromJson(
              (l$Thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$GenericMediaOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Enum$OrderBy? get Content => (_$data['Content'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get Description => (_$data['Description'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MimeType => (_$data['MimeType'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Input$BlobModelOrderByInput? get Thumbnail =>
      (_$data['Thumbnail'] as Input$BlobModelOrderByInput?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('Content')) {
      final l$Content = Content;
      result$data['Content'] =
          l$Content == null ? null : toJson$Enum$OrderBy(l$Content);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('Description')) {
      final l$Description = Description;
      result$data['Description'] =
          l$Description == null ? null : toJson$Enum$OrderBy(l$Description);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MimeType')) {
      final l$MimeType = MimeType;
      result$data['MimeType'] =
          l$MimeType == null ? null : toJson$Enum$OrderBy(l$MimeType);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Thumbnail')) {
      final l$Thumbnail = Thumbnail;
      result$data['Thumbnail'] = l$Thumbnail?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$GenericMediaOrderByInput<Input$GenericMediaOrderByInput>
      get copyWith => CopyWith$Input$GenericMediaOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$GenericMediaOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$Content = Content;
    final lOther$Content = other.Content;
    if (_$data.containsKey('Content') != other._$data.containsKey('Content')) {
      return false;
    }
    if (l$Content != lOther$Content) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$Description = Description;
    final lOther$Description = other.Description;
    if (_$data.containsKey('Description') !=
        other._$data.containsKey('Description')) {
      return false;
    }
    if (l$Description != lOther$Description) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MimeType = MimeType;
    final lOther$MimeType = other.MimeType;
    if (_$data.containsKey('MimeType') !=
        other._$data.containsKey('MimeType')) {
      return false;
    }
    if (l$MimeType != lOther$MimeType) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Thumbnail = Thumbnail;
    final lOther$Thumbnail = other.Thumbnail;
    if (_$data.containsKey('Thumbnail') !=
        other._$data.containsKey('Thumbnail')) {
      return false;
    }
    if (l$Thumbnail != lOther$Thumbnail) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$Content = Content;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$Description = Description;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MimeType = MimeType;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Thumbnail = Thumbnail;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('Content') ? l$Content : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('Description') ? l$Description : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MimeType') ? l$MimeType : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Thumbnail') ? l$Thumbnail : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$GenericMediaOrderByInput<TRes> {
  factory CopyWith$Input$GenericMediaOrderByInput(
    Input$GenericMediaOrderByInput instance,
    TRes Function(Input$GenericMediaOrderByInput) then,
  ) = _CopyWithImpl$Input$GenericMediaOrderByInput;

  factory CopyWith$Input$GenericMediaOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$GenericMediaOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? Description,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail;
}

class _CopyWithImpl$Input$GenericMediaOrderByInput<TRes>
    implements CopyWith$Input$GenericMediaOrderByInput<TRes> {
  _CopyWithImpl$Input$GenericMediaOrderByInput(
    this._instance,
    this._then,
  );

  final Input$GenericMediaOrderByInput _instance;

  final TRes Function(Input$GenericMediaOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? Content = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? Description = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MimeType = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Thumbnail = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$GenericMediaOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (Content != _undefined) 'Content': (Content as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (Description != _undefined)
          'Description': (Description as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MimeType != _undefined) 'MimeType': (MimeType as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Thumbnail != _undefined)
          'Thumbnail': (Thumbnail as Input$BlobModelOrderByInput?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail {
    final local$Thumbnail = _instance.Thumbnail;
    return local$Thumbnail == null
        ? CopyWith$Input$BlobModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$BlobModelOrderByInput(
            local$Thumbnail, (e) => call(Thumbnail: e));
  }
}

class _CopyWithStubImpl$Input$GenericMediaOrderByInput<TRes>
    implements CopyWith$Input$GenericMediaOrderByInput<TRes> {
  _CopyWithStubImpl$Input$GenericMediaOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? Description,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail =>
      CopyWith$Input$BlobModelOrderByInput.stub(_res);
}

class Input$GenericMediaWhereInput {
  factory Input$GenericMediaWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$SearchableStringFilterInput? Description,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$GenericMediaWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$GenericMediaWhereInput?>? $_not,
    List<Input$GenericMediaWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$GenericMediaWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (Content != null) r'Content': Content,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (Description != null) r'Description': Description,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MimeType != null) r'MimeType': MimeType,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Thumbnail != null) r'Thumbnail': Thumbnail,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$GenericMediaWhereInput._(this._$data);

  factory Input$GenericMediaWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('Content')) {
      final l$Content = data['Content'];
      result$data['Content'] = l$Content == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Content as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('Description')) {
      final l$Description = data['Description'];
      result$data['Description'] = l$Description == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Description as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MimeType')) {
      final l$MimeType = data['MimeType'];
      result$data['MimeType'] = l$MimeType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MimeType as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Thumbnail')) {
      final l$Thumbnail = data['Thumbnail'];
      result$data['Thumbnail'] = l$Thumbnail == null
          ? null
          : Input$BlobModelWhereInput.fromJson(
              (l$Thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$GenericMediaWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$GenericMediaWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$GenericMediaWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$GenericMediaWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get Content =>
      (_$data['Content'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get Description =>
      (_$data['Description'] as Input$SearchableStringFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$StringFilterInput? get MimeType =>
      (_$data['MimeType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$BlobModelWhereInput? get Thumbnail =>
      (_$data['Thumbnail'] as Input$BlobModelWhereInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$GenericMediaWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$GenericMediaWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$GenericMediaWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$GenericMediaWhereInput?>?);

  List<Input$GenericMediaWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$GenericMediaWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('Content')) {
      final l$Content = Content;
      result$data['Content'] = l$Content?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('Description')) {
      final l$Description = Description;
      result$data['Description'] = l$Description?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MimeType')) {
      final l$MimeType = MimeType;
      result$data['MimeType'] = l$MimeType?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Thumbnail')) {
      final l$Thumbnail = Thumbnail;
      result$data['Thumbnail'] = l$Thumbnail?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$GenericMediaWhereInput<Input$GenericMediaWhereInput>
      get copyWith => CopyWith$Input$GenericMediaWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$GenericMediaWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$Content = Content;
    final lOther$Content = other.Content;
    if (_$data.containsKey('Content') != other._$data.containsKey('Content')) {
      return false;
    }
    if (l$Content != lOther$Content) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$Description = Description;
    final lOther$Description = other.Description;
    if (_$data.containsKey('Description') !=
        other._$data.containsKey('Description')) {
      return false;
    }
    if (l$Description != lOther$Description) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MimeType = MimeType;
    final lOther$MimeType = other.MimeType;
    if (_$data.containsKey('MimeType') !=
        other._$data.containsKey('MimeType')) {
      return false;
    }
    if (l$MimeType != lOther$MimeType) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Thumbnail = Thumbnail;
    final lOther$Thumbnail = other.Thumbnail;
    if (_$data.containsKey('Thumbnail') !=
        other._$data.containsKey('Thumbnail')) {
      return false;
    }
    if (l$Thumbnail != lOther$Thumbnail) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$Content = Content;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$Description = Description;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MimeType = MimeType;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Thumbnail = Thumbnail;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('Content') ? l$Content : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('Description') ? l$Description : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MimeType') ? l$MimeType : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Thumbnail') ? l$Thumbnail : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$GenericMediaWhereInput<TRes> {
  factory CopyWith$Input$GenericMediaWhereInput(
    Input$GenericMediaWhereInput instance,
    TRes Function(Input$GenericMediaWhereInput) then,
  ) = _CopyWithImpl$Input$GenericMediaWhereInput;

  factory CopyWith$Input$GenericMediaWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$GenericMediaWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$SearchableStringFilterInput? Description,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$GenericMediaWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$GenericMediaWhereInput?>? $_not,
    List<Input$GenericMediaWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Content;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Description;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$StringFilterInput<TRes> get MimeType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$GenericMediaWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$GenericMediaWhereInput<
                      Input$GenericMediaWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$GenericMediaWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$GenericMediaWhereInput<
                      Input$GenericMediaWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$GenericMediaWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$GenericMediaWhereInput<
                      Input$GenericMediaWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$GenericMediaWhereInput<TRes>
    implements CopyWith$Input$GenericMediaWhereInput<TRes> {
  _CopyWithImpl$Input$GenericMediaWhereInput(
    this._instance,
    this._then,
  );

  final Input$GenericMediaWhereInput _instance;

  final TRes Function(Input$GenericMediaWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? Content = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? Description = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MimeType = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Thumbnail = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$GenericMediaWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (Content != _undefined)
          'Content': (Content as Input$SearchableStringFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (Description != _undefined)
          'Description': (Description as Input$SearchableStringFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MimeType != _undefined)
          'MimeType': (MimeType as Input$StringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Thumbnail != _undefined)
          'Thumbnail': (Thumbnail as Input$BlobModelWhereInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$GenericMediaWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$GenericMediaWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$GenericMediaWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Content {
    final local$Content = _instance.Content;
    return local$Content == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Content, (e) => call(Content: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Description {
    final local$Description = _instance.Description;
    return local$Description == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Description, (e) => call(Description: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MimeType {
    final local$MimeType = _instance.MimeType;
    return local$MimeType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MimeType, (e) => call(MimeType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail {
    final local$Thumbnail = _instance.Thumbnail;
    return local$Thumbnail == null
        ? CopyWith$Input$BlobModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$BlobModelWhereInput(
            local$Thumbnail, (e) => call(Thumbnail: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$GenericMediaWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$GenericMediaWhereInput<
                          Input$GenericMediaWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$GenericMediaWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$GenericMediaWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$GenericMediaWhereInput<
                          Input$GenericMediaWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$GenericMediaWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$GenericMediaWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$GenericMediaWhereInput<
                          Input$GenericMediaWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$GenericMediaWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$GenericMediaWhereInput<TRes>
    implements CopyWith$Input$GenericMediaWhereInput<TRes> {
  _CopyWithStubImpl$Input$GenericMediaWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$SearchableStringFilterInput? Description,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$GenericMediaWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$GenericMediaWhereInput?>? $_not,
    List<Input$GenericMediaWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Content =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Description =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MimeType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail =>
      CopyWith$Input$BlobModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$HighlightOptions {
  factory Input$HighlightOptions({
    bool? enabled,
    String? endToken,
    String? startToken,
  }) =>
      Input$HighlightOptions._({
        if (enabled != null) r'enabled': enabled,
        if (endToken != null) r'endToken': endToken,
        if (startToken != null) r'startToken': startToken,
      });

  Input$HighlightOptions._(this._$data);

  factory Input$HighlightOptions.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('enabled')) {
      final l$enabled = data['enabled'];
      result$data['enabled'] = (l$enabled as bool?);
    }
    if (data.containsKey('endToken')) {
      final l$endToken = data['endToken'];
      result$data['endToken'] = (l$endToken as String?);
    }
    if (data.containsKey('startToken')) {
      final l$startToken = data['startToken'];
      result$data['startToken'] = (l$startToken as String?);
    }
    return Input$HighlightOptions._(result$data);
  }

  Map<String, dynamic> _$data;

  bool? get enabled => (_$data['enabled'] as bool?);

  String? get endToken => (_$data['endToken'] as String?);

  String? get startToken => (_$data['startToken'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('enabled')) {
      final l$enabled = enabled;
      result$data['enabled'] = l$enabled;
    }
    if (_$data.containsKey('endToken')) {
      final l$endToken = endToken;
      result$data['endToken'] = l$endToken;
    }
    if (_$data.containsKey('startToken')) {
      final l$startToken = startToken;
      result$data['startToken'] = l$startToken;
    }
    return result$data;
  }

  CopyWith$Input$HighlightOptions<Input$HighlightOptions> get copyWith =>
      CopyWith$Input$HighlightOptions(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$HighlightOptions || runtimeType != other.runtimeType) {
      return false;
    }
    final l$enabled = enabled;
    final lOther$enabled = other.enabled;
    if (_$data.containsKey('enabled') != other._$data.containsKey('enabled')) {
      return false;
    }
    if (l$enabled != lOther$enabled) {
      return false;
    }
    final l$endToken = endToken;
    final lOther$endToken = other.endToken;
    if (_$data.containsKey('endToken') !=
        other._$data.containsKey('endToken')) {
      return false;
    }
    if (l$endToken != lOther$endToken) {
      return false;
    }
    final l$startToken = startToken;
    final lOther$startToken = other.startToken;
    if (_$data.containsKey('startToken') !=
        other._$data.containsKey('startToken')) {
      return false;
    }
    if (l$startToken != lOther$startToken) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$enabled = enabled;
    final l$endToken = endToken;
    final l$startToken = startToken;
    return Object.hashAll([
      _$data.containsKey('enabled') ? l$enabled : const {},
      _$data.containsKey('endToken') ? l$endToken : const {},
      _$data.containsKey('startToken') ? l$startToken : const {},
    ]);
  }
}

abstract class CopyWith$Input$HighlightOptions<TRes> {
  factory CopyWith$Input$HighlightOptions(
    Input$HighlightOptions instance,
    TRes Function(Input$HighlightOptions) then,
  ) = _CopyWithImpl$Input$HighlightOptions;

  factory CopyWith$Input$HighlightOptions.stub(TRes res) =
      _CopyWithStubImpl$Input$HighlightOptions;

  TRes call({
    bool? enabled,
    String? endToken,
    String? startToken,
  });
}

class _CopyWithImpl$Input$HighlightOptions<TRes>
    implements CopyWith$Input$HighlightOptions<TRes> {
  _CopyWithImpl$Input$HighlightOptions(
    this._instance,
    this._then,
  );

  final Input$HighlightOptions _instance;

  final TRes Function(Input$HighlightOptions) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? enabled = _undefined,
    Object? endToken = _undefined,
    Object? startToken = _undefined,
  }) =>
      _then(Input$HighlightOptions._({
        ..._instance._$data,
        if (enabled != _undefined) 'enabled': (enabled as bool?),
        if (endToken != _undefined) 'endToken': (endToken as String?),
        if (startToken != _undefined) 'startToken': (startToken as String?),
      }));
}

class _CopyWithStubImpl$Input$HighlightOptions<TRes>
    implements CopyWith$Input$HighlightOptions<TRes> {
  _CopyWithStubImpl$Input$HighlightOptions(this._res);

  TRes _res;

  call({
    bool? enabled,
    String? endToken,
    String? startToken,
  }) =>
      _res;
}

class Input$HostDefinitionModelOrderByInput {
  factory Input$HostDefinitionModelOrderByInput({
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? Name,
    Enum$OrderBy? Type,
  }) =>
      Input$HostDefinitionModelOrderByInput._({
        if (Language != null) r'Language': Language,
        if (Name != null) r'Name': Name,
        if (Type != null) r'Type': Type,
      });

  Input$HostDefinitionModelOrderByInput._(this._$data);

  factory Input$HostDefinitionModelOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('Type')) {
      final l$Type = data['Type'];
      result$data['Type'] =
          l$Type == null ? null : fromJson$Enum$OrderBy((l$Type as String));
    }
    return Input$HostDefinitionModelOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Enum$OrderBy? get Type => (_$data['Type'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('Type')) {
      final l$Type = Type;
      result$data['Type'] = l$Type == null ? null : toJson$Enum$OrderBy(l$Type);
    }
    return result$data;
  }

  CopyWith$Input$HostDefinitionModelOrderByInput<
          Input$HostDefinitionModelOrderByInput>
      get copyWith => CopyWith$Input$HostDefinitionModelOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$HostDefinitionModelOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$Type = Type;
    final lOther$Type = other.Type;
    if (_$data.containsKey('Type') != other._$data.containsKey('Type')) {
      return false;
    }
    if (l$Type != lOther$Type) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Language = Language;
    final l$Name = Name;
    final l$Type = Type;
    return Object.hashAll([
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('Type') ? l$Type : const {},
    ]);
  }
}

abstract class CopyWith$Input$HostDefinitionModelOrderByInput<TRes> {
  factory CopyWith$Input$HostDefinitionModelOrderByInput(
    Input$HostDefinitionModelOrderByInput instance,
    TRes Function(Input$HostDefinitionModelOrderByInput) then,
  ) = _CopyWithImpl$Input$HostDefinitionModelOrderByInput;

  factory CopyWith$Input$HostDefinitionModelOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$HostDefinitionModelOrderByInput;

  TRes call({
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? Name,
    Enum$OrderBy? Type,
  });
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
}

class _CopyWithImpl$Input$HostDefinitionModelOrderByInput<TRes>
    implements CopyWith$Input$HostDefinitionModelOrderByInput<TRes> {
  _CopyWithImpl$Input$HostDefinitionModelOrderByInput(
    this._instance,
    this._then,
  );

  final Input$HostDefinitionModelOrderByInput _instance;

  final TRes Function(Input$HostDefinitionModelOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Language = _undefined,
    Object? Name = _undefined,
    Object? Type = _undefined,
  }) =>
      _then(Input$HostDefinitionModelOrderByInput._({
        ..._instance._$data,
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (Type != _undefined) 'Type': (Type as Enum$OrderBy?),
      }));

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }
}

class _CopyWithStubImpl$Input$HostDefinitionModelOrderByInput<TRes>
    implements CopyWith$Input$HostDefinitionModelOrderByInput<TRes> {
  _CopyWithStubImpl$Input$HostDefinitionModelOrderByInput(this._res);

  TRes _res;

  call({
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? Name,
    Enum$OrderBy? Type,
  }) =>
      _res;

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);
}

class Input$HostDefinitionModelWhereInput {
  factory Input$HostDefinitionModelWhereInput({
    Input$ContentLanguageModelWhereInput? Language,
    Input$StringFilterInput? Name,
    Input$StringFilterInput? Type,
  }) =>
      Input$HostDefinitionModelWhereInput._({
        if (Language != null) r'Language': Language,
        if (Name != null) r'Name': Name,
        if (Type != null) r'Type': Type,
      });

  Input$HostDefinitionModelWhereInput._(this._$data);

  factory Input$HostDefinitionModelWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$StringFilterInput.fromJson((l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('Type')) {
      final l$Type = data['Type'];
      result$data['Type'] = l$Type == null
          ? null
          : Input$StringFilterInput.fromJson((l$Type as Map<String, dynamic>));
    }
    return Input$HostDefinitionModelWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$StringFilterInput? get Name =>
      (_$data['Name'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Type =>
      (_$data['Type'] as Input$StringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('Type')) {
      final l$Type = Type;
      result$data['Type'] = l$Type?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$HostDefinitionModelWhereInput<
          Input$HostDefinitionModelWhereInput>
      get copyWith => CopyWith$Input$HostDefinitionModelWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$HostDefinitionModelWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$Type = Type;
    final lOther$Type = other.Type;
    if (_$data.containsKey('Type') != other._$data.containsKey('Type')) {
      return false;
    }
    if (l$Type != lOther$Type) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Language = Language;
    final l$Name = Name;
    final l$Type = Type;
    return Object.hashAll([
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('Type') ? l$Type : const {},
    ]);
  }
}

abstract class CopyWith$Input$HostDefinitionModelWhereInput<TRes> {
  factory CopyWith$Input$HostDefinitionModelWhereInput(
    Input$HostDefinitionModelWhereInput instance,
    TRes Function(Input$HostDefinitionModelWhereInput) then,
  ) = _CopyWithImpl$Input$HostDefinitionModelWhereInput;

  factory CopyWith$Input$HostDefinitionModelWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$HostDefinitionModelWhereInput;

  TRes call({
    Input$ContentLanguageModelWhereInput? Language,
    Input$StringFilterInput? Name,
    Input$StringFilterInput? Type,
  });
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$StringFilterInput<TRes> get Name;
  CopyWith$Input$StringFilterInput<TRes> get Type;
}

class _CopyWithImpl$Input$HostDefinitionModelWhereInput<TRes>
    implements CopyWith$Input$HostDefinitionModelWhereInput<TRes> {
  _CopyWithImpl$Input$HostDefinitionModelWhereInput(
    this._instance,
    this._then,
  );

  final Input$HostDefinitionModelWhereInput _instance;

  final TRes Function(Input$HostDefinitionModelWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Language = _undefined,
    Object? Name = _undefined,
    Object? Type = _undefined,
  }) =>
      _then(Input$HostDefinitionModelWhereInput._({
        ..._instance._$data,
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined) 'Name': (Name as Input$StringFilterInput?),
        if (Type != _undefined) 'Type': (Type as Input$StringFilterInput?),
      }));

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Type {
    final local$Type = _instance.Type;
    return local$Type == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Type, (e) => call(Type: e));
  }
}

class _CopyWithStubImpl$Input$HostDefinitionModelWhereInput<TRes>
    implements CopyWith$Input$HostDefinitionModelWhereInput<TRes> {
  _CopyWithStubImpl$Input$HostDefinitionModelWhereInput(this._res);

  TRes _res;

  call({
    Input$ContentLanguageModelWhereInput? Language,
    Input$StringFilterInput? Name,
    Input$StringFilterInput? Type,
  }) =>
      _res;

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Name =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Type =>
      CopyWith$Input$StringFilterInput.stub(_res);
}

class Input$ImageFileOrderByInput {
  factory Input$ImageFileOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Copyright,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$ImageFileOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (Content != null) r'Content': Content,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Copyright != null) r'Copyright': Copyright,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MimeType != null) r'MimeType': MimeType,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Thumbnail != null) r'Thumbnail': Thumbnail,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ImageFileOrderByInput._(this._$data);

  factory Input$ImageFileOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('Content')) {
      final l$Content = data['Content'];
      result$data['Content'] = l$Content == null
          ? null
          : fromJson$Enum$OrderBy((l$Content as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Copyright')) {
      final l$Copyright = data['Copyright'];
      result$data['Copyright'] = l$Copyright == null
          ? null
          : fromJson$Enum$OrderBy((l$Copyright as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MimeType')) {
      final l$MimeType = data['MimeType'];
      result$data['MimeType'] = l$MimeType == null
          ? null
          : fromJson$Enum$OrderBy((l$MimeType as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Thumbnail')) {
      final l$Thumbnail = data['Thumbnail'];
      result$data['Thumbnail'] = l$Thumbnail == null
          ? null
          : Input$BlobModelOrderByInput.fromJson(
              (l$Thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$ImageFileOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Enum$OrderBy? get Content => (_$data['Content'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Copyright => (_$data['Copyright'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MimeType => (_$data['MimeType'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Input$BlobModelOrderByInput? get Thumbnail =>
      (_$data['Thumbnail'] as Input$BlobModelOrderByInput?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('Content')) {
      final l$Content = Content;
      result$data['Content'] =
          l$Content == null ? null : toJson$Enum$OrderBy(l$Content);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Copyright')) {
      final l$Copyright = Copyright;
      result$data['Copyright'] =
          l$Copyright == null ? null : toJson$Enum$OrderBy(l$Copyright);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MimeType')) {
      final l$MimeType = MimeType;
      result$data['MimeType'] =
          l$MimeType == null ? null : toJson$Enum$OrderBy(l$MimeType);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Thumbnail')) {
      final l$Thumbnail = Thumbnail;
      result$data['Thumbnail'] = l$Thumbnail?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$ImageFileOrderByInput<Input$ImageFileOrderByInput>
      get copyWith => CopyWith$Input$ImageFileOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ImageFileOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$Content = Content;
    final lOther$Content = other.Content;
    if (_$data.containsKey('Content') != other._$data.containsKey('Content')) {
      return false;
    }
    if (l$Content != lOther$Content) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Copyright = Copyright;
    final lOther$Copyright = other.Copyright;
    if (_$data.containsKey('Copyright') !=
        other._$data.containsKey('Copyright')) {
      return false;
    }
    if (l$Copyright != lOther$Copyright) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MimeType = MimeType;
    final lOther$MimeType = other.MimeType;
    if (_$data.containsKey('MimeType') !=
        other._$data.containsKey('MimeType')) {
      return false;
    }
    if (l$MimeType != lOther$MimeType) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Thumbnail = Thumbnail;
    final lOther$Thumbnail = other.Thumbnail;
    if (_$data.containsKey('Thumbnail') !=
        other._$data.containsKey('Thumbnail')) {
      return false;
    }
    if (l$Thumbnail != lOther$Thumbnail) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$Content = Content;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Copyright = Copyright;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MimeType = MimeType;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Thumbnail = Thumbnail;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('Content') ? l$Content : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Copyright') ? l$Copyright : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MimeType') ? l$MimeType : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Thumbnail') ? l$Thumbnail : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ImageFileOrderByInput<TRes> {
  factory CopyWith$Input$ImageFileOrderByInput(
    Input$ImageFileOrderByInput instance,
    TRes Function(Input$ImageFileOrderByInput) then,
  ) = _CopyWithImpl$Input$ImageFileOrderByInput;

  factory CopyWith$Input$ImageFileOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ImageFileOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Copyright,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail;
}

class _CopyWithImpl$Input$ImageFileOrderByInput<TRes>
    implements CopyWith$Input$ImageFileOrderByInput<TRes> {
  _CopyWithImpl$Input$ImageFileOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ImageFileOrderByInput _instance;

  final TRes Function(Input$ImageFileOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? Content = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Copyright = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MimeType = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Thumbnail = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ImageFileOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (Content != _undefined) 'Content': (Content as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Copyright != _undefined) 'Copyright': (Copyright as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MimeType != _undefined) 'MimeType': (MimeType as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Thumbnail != _undefined)
          'Thumbnail': (Thumbnail as Input$BlobModelOrderByInput?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail {
    final local$Thumbnail = _instance.Thumbnail;
    return local$Thumbnail == null
        ? CopyWith$Input$BlobModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$BlobModelOrderByInput(
            local$Thumbnail, (e) => call(Thumbnail: e));
  }
}

class _CopyWithStubImpl$Input$ImageFileOrderByInput<TRes>
    implements CopyWith$Input$ImageFileOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ImageFileOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Copyright,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail =>
      CopyWith$Input$BlobModelOrderByInput.stub(_res);
}

class Input$ImageFileWhereInput {
  factory Input$ImageFileWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$SearchableStringFilterInput? Copyright,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$ImageFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ImageFileWhereInput?>? $_not,
    List<Input$ImageFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$ImageFileWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (Content != null) r'Content': Content,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Copyright != null) r'Copyright': Copyright,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MimeType != null) r'MimeType': MimeType,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Thumbnail != null) r'Thumbnail': Thumbnail,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ImageFileWhereInput._(this._$data);

  factory Input$ImageFileWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('Content')) {
      final l$Content = data['Content'];
      result$data['Content'] = l$Content == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Content as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Copyright')) {
      final l$Copyright = data['Copyright'];
      result$data['Copyright'] = l$Copyright == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Copyright as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MimeType')) {
      final l$MimeType = data['MimeType'];
      result$data['MimeType'] = l$MimeType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MimeType as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Thumbnail')) {
      final l$Thumbnail = data['Thumbnail'];
      result$data['Thumbnail'] = l$Thumbnail == null
          ? null
          : Input$BlobModelWhereInput.fromJson(
              (l$Thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ImageFileWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ImageFileWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ImageFileWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$ImageFileWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get Content =>
      (_$data['Content'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get Copyright =>
      (_$data['Copyright'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$StringFilterInput? get MimeType =>
      (_$data['MimeType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$BlobModelWhereInput? get Thumbnail =>
      (_$data['Thumbnail'] as Input$BlobModelWhereInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$ImageFileWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$ImageFileWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$ImageFileWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$ImageFileWhereInput?>?);

  List<Input$ImageFileWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$ImageFileWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('Content')) {
      final l$Content = Content;
      result$data['Content'] = l$Content?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Copyright')) {
      final l$Copyright = Copyright;
      result$data['Copyright'] = l$Copyright?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MimeType')) {
      final l$MimeType = MimeType;
      result$data['MimeType'] = l$MimeType?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Thumbnail')) {
      final l$Thumbnail = Thumbnail;
      result$data['Thumbnail'] = l$Thumbnail?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ImageFileWhereInput<Input$ImageFileWhereInput> get copyWith =>
      CopyWith$Input$ImageFileWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ImageFileWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$Content = Content;
    final lOther$Content = other.Content;
    if (_$data.containsKey('Content') != other._$data.containsKey('Content')) {
      return false;
    }
    if (l$Content != lOther$Content) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Copyright = Copyright;
    final lOther$Copyright = other.Copyright;
    if (_$data.containsKey('Copyright') !=
        other._$data.containsKey('Copyright')) {
      return false;
    }
    if (l$Copyright != lOther$Copyright) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MimeType = MimeType;
    final lOther$MimeType = other.MimeType;
    if (_$data.containsKey('MimeType') !=
        other._$data.containsKey('MimeType')) {
      return false;
    }
    if (l$MimeType != lOther$MimeType) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Thumbnail = Thumbnail;
    final lOther$Thumbnail = other.Thumbnail;
    if (_$data.containsKey('Thumbnail') !=
        other._$data.containsKey('Thumbnail')) {
      return false;
    }
    if (l$Thumbnail != lOther$Thumbnail) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$Content = Content;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Copyright = Copyright;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MimeType = MimeType;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Thumbnail = Thumbnail;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('Content') ? l$Content : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Copyright') ? l$Copyright : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MimeType') ? l$MimeType : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Thumbnail') ? l$Thumbnail : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ImageFileWhereInput<TRes> {
  factory CopyWith$Input$ImageFileWhereInput(
    Input$ImageFileWhereInput instance,
    TRes Function(Input$ImageFileWhereInput) then,
  ) = _CopyWithImpl$Input$ImageFileWhereInput;

  factory CopyWith$Input$ImageFileWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ImageFileWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$SearchableStringFilterInput? Copyright,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$ImageFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ImageFileWhereInput?>? $_not,
    List<Input$ImageFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Content;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Copyright;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$StringFilterInput<TRes> get MimeType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$ImageFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ImageFileWhereInput<
                      Input$ImageFileWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$ImageFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ImageFileWhereInput<
                      Input$ImageFileWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$ImageFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ImageFileWhereInput<
                      Input$ImageFileWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$ImageFileWhereInput<TRes>
    implements CopyWith$Input$ImageFileWhereInput<TRes> {
  _CopyWithImpl$Input$ImageFileWhereInput(
    this._instance,
    this._then,
  );

  final Input$ImageFileWhereInput _instance;

  final TRes Function(Input$ImageFileWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? Content = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Copyright = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MimeType = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Thumbnail = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ImageFileWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (Content != _undefined)
          'Content': (Content as Input$SearchableStringFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Copyright != _undefined)
          'Copyright': (Copyright as Input$SearchableStringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MimeType != _undefined)
          'MimeType': (MimeType as Input$StringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Thumbnail != _undefined)
          'Thumbnail': (Thumbnail as Input$BlobModelWhereInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$ImageFileWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$ImageFileWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$ImageFileWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Content {
    final local$Content = _instance.Content;
    return local$Content == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Content, (e) => call(Content: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Copyright {
    final local$Copyright = _instance.Copyright;
    return local$Copyright == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Copyright, (e) => call(Copyright: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MimeType {
    final local$MimeType = _instance.MimeType;
    return local$MimeType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MimeType, (e) => call(MimeType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail {
    final local$Thumbnail = _instance.Thumbnail;
    return local$Thumbnail == null
        ? CopyWith$Input$BlobModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$BlobModelWhereInput(
            local$Thumbnail, (e) => call(Thumbnail: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$ImageFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ImageFileWhereInput<
                          Input$ImageFileWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$ImageFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$ImageFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ImageFileWhereInput<
                          Input$ImageFileWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$ImageFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$ImageFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ImageFileWhereInput<
                          Input$ImageFileWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$ImageFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$ImageFileWhereInput<TRes>
    implements CopyWith$Input$ImageFileWhereInput<TRes> {
  _CopyWithStubImpl$Input$ImageFileWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$SearchableStringFilterInput? Copyright,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$ImageFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ImageFileWhereInput?>? $_not,
    List<Input$ImageFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Content =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Copyright =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MimeType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail =>
      CopyWith$Input$BlobModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$InlineBlockPropertyModelSearchOrderByInput {
  factory Input$InlineBlockPropertyModelSearchOrderByInput(
          {Enum$OrderBy? ContentType}) =>
      Input$InlineBlockPropertyModelSearchOrderByInput._({
        if (ContentType != null) r'ContentType': ContentType,
      });

  Input$InlineBlockPropertyModelSearchOrderByInput._(this._$data);

  factory Input$InlineBlockPropertyModelSearchOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    return Input$InlineBlockPropertyModelSearchOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    return result$data;
  }

  CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput<
          Input$InlineBlockPropertyModelSearchOrderByInput>
      get copyWith => CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$InlineBlockPropertyModelSearchOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentType = ContentType;
    return Object.hashAll(
        [_$data.containsKey('ContentType') ? l$ContentType : const {}]);
  }
}

abstract class CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput<TRes> {
  factory CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput(
    Input$InlineBlockPropertyModelSearchOrderByInput instance,
    TRes Function(Input$InlineBlockPropertyModelSearchOrderByInput) then,
  ) = _CopyWithImpl$Input$InlineBlockPropertyModelSearchOrderByInput;

  factory CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput.stub(
          TRes res) =
      _CopyWithStubImpl$Input$InlineBlockPropertyModelSearchOrderByInput;

  TRes call({Enum$OrderBy? ContentType});
}

class _CopyWithImpl$Input$InlineBlockPropertyModelSearchOrderByInput<TRes>
    implements CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput<TRes> {
  _CopyWithImpl$Input$InlineBlockPropertyModelSearchOrderByInput(
    this._instance,
    this._then,
  );

  final Input$InlineBlockPropertyModelSearchOrderByInput _instance;

  final TRes Function(Input$InlineBlockPropertyModelSearchOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? ContentType = _undefined}) =>
      _then(Input$InlineBlockPropertyModelSearchOrderByInput._({
        ..._instance._$data,
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
      }));
}

class _CopyWithStubImpl$Input$InlineBlockPropertyModelSearchOrderByInput<TRes>
    implements CopyWith$Input$InlineBlockPropertyModelSearchOrderByInput<TRes> {
  _CopyWithStubImpl$Input$InlineBlockPropertyModelSearchOrderByInput(this._res);

  TRes _res;

  call({Enum$OrderBy? ContentType}) => _res;
}

class Input$InlineBlockPropertyModelSearchWhereInput {
  factory Input$InlineBlockPropertyModelSearchWhereInput(
          {Input$SearchableStringFilterInput? ContentType}) =>
      Input$InlineBlockPropertyModelSearchWhereInput._({
        if (ContentType != null) r'ContentType': ContentType,
      });

  Input$InlineBlockPropertyModelSearchWhereInput._(this._$data);

  factory Input$InlineBlockPropertyModelSearchWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    return Input$InlineBlockPropertyModelSearchWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SearchableStringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$SearchableStringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$InlineBlockPropertyModelSearchWhereInput<
          Input$InlineBlockPropertyModelSearchWhereInput>
      get copyWith => CopyWith$Input$InlineBlockPropertyModelSearchWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$InlineBlockPropertyModelSearchWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentType = ContentType;
    return Object.hashAll(
        [_$data.containsKey('ContentType') ? l$ContentType : const {}]);
  }
}

abstract class CopyWith$Input$InlineBlockPropertyModelSearchWhereInput<TRes> {
  factory CopyWith$Input$InlineBlockPropertyModelSearchWhereInput(
    Input$InlineBlockPropertyModelSearchWhereInput instance,
    TRes Function(Input$InlineBlockPropertyModelSearchWhereInput) then,
  ) = _CopyWithImpl$Input$InlineBlockPropertyModelSearchWhereInput;

  factory CopyWith$Input$InlineBlockPropertyModelSearchWhereInput.stub(
          TRes res) =
      _CopyWithStubImpl$Input$InlineBlockPropertyModelSearchWhereInput;

  TRes call({Input$SearchableStringFilterInput? ContentType});
  CopyWith$Input$SearchableStringFilterInput<TRes> get ContentType;
}

class _CopyWithImpl$Input$InlineBlockPropertyModelSearchWhereInput<TRes>
    implements CopyWith$Input$InlineBlockPropertyModelSearchWhereInput<TRes> {
  _CopyWithImpl$Input$InlineBlockPropertyModelSearchWhereInput(
    this._instance,
    this._then,
  );

  final Input$InlineBlockPropertyModelSearchWhereInput _instance;

  final TRes Function(Input$InlineBlockPropertyModelSearchWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? ContentType = _undefined}) =>
      _then(Input$InlineBlockPropertyModelSearchWhereInput._({
        ..._instance._$data,
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$SearchableStringFilterInput?),
      }));

  CopyWith$Input$SearchableStringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }
}

class _CopyWithStubImpl$Input$InlineBlockPropertyModelSearchWhereInput<TRes>
    implements CopyWith$Input$InlineBlockPropertyModelSearchWhereInput<TRes> {
  _CopyWithStubImpl$Input$InlineBlockPropertyModelSearchWhereInput(this._res);

  TRes _res;

  call({Input$SearchableStringFilterInput? ContentType}) => _res;

  CopyWith$Input$SearchableStringFilterInput<TRes> get ContentType =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);
}

class Input$IntFilterInput {
  factory Input$IntFilterInput({
    int? boost,
    int? eq,
    bool? exist,
    Input$NumberFactor? factor,
    int? gt,
    int? gte,
    List<int?>? $in,
    int? lt,
    int? lte,
    int? notEq,
    List<int?>? notIn,
  }) =>
      Input$IntFilterInput._({
        if (boost != null) r'boost': boost,
        if (eq != null) r'eq': eq,
        if (exist != null) r'exist': exist,
        if (factor != null) r'factor': factor,
        if (gt != null) r'gt': gt,
        if (gte != null) r'gte': gte,
        if ($in != null) r'in': $in,
        if (lt != null) r'lt': lt,
        if (lte != null) r'lte': lte,
        if (notEq != null) r'notEq': notEq,
        if (notIn != null) r'notIn': notIn,
      });

  Input$IntFilterInput._(this._$data);

  factory Input$IntFilterInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('boost')) {
      final l$boost = data['boost'];
      result$data['boost'] = (l$boost as int?);
    }
    if (data.containsKey('eq')) {
      final l$eq = data['eq'];
      result$data['eq'] = (l$eq as int?);
    }
    if (data.containsKey('exist')) {
      final l$exist = data['exist'];
      result$data['exist'] = (l$exist as bool?);
    }
    if (data.containsKey('factor')) {
      final l$factor = data['factor'];
      result$data['factor'] = l$factor == null
          ? null
          : Input$NumberFactor.fromJson((l$factor as Map<String, dynamic>));
    }
    if (data.containsKey('gt')) {
      final l$gt = data['gt'];
      result$data['gt'] = (l$gt as int?);
    }
    if (data.containsKey('gte')) {
      final l$gte = data['gte'];
      result$data['gte'] = (l$gte as int?);
    }
    if (data.containsKey('in')) {
      final l$$in = data['in'];
      result$data['in'] =
          (l$$in as List<dynamic>?)?.map((e) => (e as int?)).toList();
    }
    if (data.containsKey('lt')) {
      final l$lt = data['lt'];
      result$data['lt'] = (l$lt as int?);
    }
    if (data.containsKey('lte')) {
      final l$lte = data['lte'];
      result$data['lte'] = (l$lte as int?);
    }
    if (data.containsKey('notEq')) {
      final l$notEq = data['notEq'];
      result$data['notEq'] = (l$notEq as int?);
    }
    if (data.containsKey('notIn')) {
      final l$notIn = data['notIn'];
      result$data['notIn'] =
          (l$notIn as List<dynamic>?)?.map((e) => (e as int?)).toList();
    }
    return Input$IntFilterInput._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get boost => (_$data['boost'] as int?);

  int? get eq => (_$data['eq'] as int?);

  bool? get exist => (_$data['exist'] as bool?);

  Input$NumberFactor? get factor => (_$data['factor'] as Input$NumberFactor?);

  int? get gt => (_$data['gt'] as int?);

  int? get gte => (_$data['gte'] as int?);

  List<int?>? get $in => (_$data['in'] as List<int?>?);

  int? get lt => (_$data['lt'] as int?);

  int? get lte => (_$data['lte'] as int?);

  int? get notEq => (_$data['notEq'] as int?);

  List<int?>? get notIn => (_$data['notIn'] as List<int?>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('boost')) {
      final l$boost = boost;
      result$data['boost'] = l$boost;
    }
    if (_$data.containsKey('eq')) {
      final l$eq = eq;
      result$data['eq'] = l$eq;
    }
    if (_$data.containsKey('exist')) {
      final l$exist = exist;
      result$data['exist'] = l$exist;
    }
    if (_$data.containsKey('factor')) {
      final l$factor = factor;
      result$data['factor'] = l$factor?.toJson();
    }
    if (_$data.containsKey('gt')) {
      final l$gt = gt;
      result$data['gt'] = l$gt;
    }
    if (_$data.containsKey('gte')) {
      final l$gte = gte;
      result$data['gte'] = l$gte;
    }
    if (_$data.containsKey('in')) {
      final l$$in = $in;
      result$data['in'] = l$$in?.map((e) => e).toList();
    }
    if (_$data.containsKey('lt')) {
      final l$lt = lt;
      result$data['lt'] = l$lt;
    }
    if (_$data.containsKey('lte')) {
      final l$lte = lte;
      result$data['lte'] = l$lte;
    }
    if (_$data.containsKey('notEq')) {
      final l$notEq = notEq;
      result$data['notEq'] = l$notEq;
    }
    if (_$data.containsKey('notIn')) {
      final l$notIn = notIn;
      result$data['notIn'] = l$notIn?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$IntFilterInput<Input$IntFilterInput> get copyWith =>
      CopyWith$Input$IntFilterInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$IntFilterInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$boost = boost;
    final lOther$boost = other.boost;
    if (_$data.containsKey('boost') != other._$data.containsKey('boost')) {
      return false;
    }
    if (l$boost != lOther$boost) {
      return false;
    }
    final l$eq = eq;
    final lOther$eq = other.eq;
    if (_$data.containsKey('eq') != other._$data.containsKey('eq')) {
      return false;
    }
    if (l$eq != lOther$eq) {
      return false;
    }
    final l$exist = exist;
    final lOther$exist = other.exist;
    if (_$data.containsKey('exist') != other._$data.containsKey('exist')) {
      return false;
    }
    if (l$exist != lOther$exist) {
      return false;
    }
    final l$factor = factor;
    final lOther$factor = other.factor;
    if (_$data.containsKey('factor') != other._$data.containsKey('factor')) {
      return false;
    }
    if (l$factor != lOther$factor) {
      return false;
    }
    final l$gt = gt;
    final lOther$gt = other.gt;
    if (_$data.containsKey('gt') != other._$data.containsKey('gt')) {
      return false;
    }
    if (l$gt != lOther$gt) {
      return false;
    }
    final l$gte = gte;
    final lOther$gte = other.gte;
    if (_$data.containsKey('gte') != other._$data.containsKey('gte')) {
      return false;
    }
    if (l$gte != lOther$gte) {
      return false;
    }
    final l$$in = $in;
    final lOther$$in = other.$in;
    if (_$data.containsKey('in') != other._$data.containsKey('in')) {
      return false;
    }
    if (l$$in != null && lOther$$in != null) {
      if (l$$in.length != lOther$$in.length) {
        return false;
      }
      for (int i = 0; i < l$$in.length; i++) {
        final l$$in$entry = l$$in[i];
        final lOther$$in$entry = lOther$$in[i];
        if (l$$in$entry != lOther$$in$entry) {
          return false;
        }
      }
    } else if (l$$in != lOther$$in) {
      return false;
    }
    final l$lt = lt;
    final lOther$lt = other.lt;
    if (_$data.containsKey('lt') != other._$data.containsKey('lt')) {
      return false;
    }
    if (l$lt != lOther$lt) {
      return false;
    }
    final l$lte = lte;
    final lOther$lte = other.lte;
    if (_$data.containsKey('lte') != other._$data.containsKey('lte')) {
      return false;
    }
    if (l$lte != lOther$lte) {
      return false;
    }
    final l$notEq = notEq;
    final lOther$notEq = other.notEq;
    if (_$data.containsKey('notEq') != other._$data.containsKey('notEq')) {
      return false;
    }
    if (l$notEq != lOther$notEq) {
      return false;
    }
    final l$notIn = notIn;
    final lOther$notIn = other.notIn;
    if (_$data.containsKey('notIn') != other._$data.containsKey('notIn')) {
      return false;
    }
    if (l$notIn != null && lOther$notIn != null) {
      if (l$notIn.length != lOther$notIn.length) {
        return false;
      }
      for (int i = 0; i < l$notIn.length; i++) {
        final l$notIn$entry = l$notIn[i];
        final lOther$notIn$entry = lOther$notIn[i];
        if (l$notIn$entry != lOther$notIn$entry) {
          return false;
        }
      }
    } else if (l$notIn != lOther$notIn) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$boost = boost;
    final l$eq = eq;
    final l$exist = exist;
    final l$factor = factor;
    final l$gt = gt;
    final l$gte = gte;
    final l$$in = $in;
    final l$lt = lt;
    final l$lte = lte;
    final l$notEq = notEq;
    final l$notIn = notIn;
    return Object.hashAll([
      _$data.containsKey('boost') ? l$boost : const {},
      _$data.containsKey('eq') ? l$eq : const {},
      _$data.containsKey('exist') ? l$exist : const {},
      _$data.containsKey('factor') ? l$factor : const {},
      _$data.containsKey('gt') ? l$gt : const {},
      _$data.containsKey('gte') ? l$gte : const {},
      _$data.containsKey('in')
          ? l$$in == null
              ? null
              : Object.hashAll(l$$in.map((v) => v))
          : const {},
      _$data.containsKey('lt') ? l$lt : const {},
      _$data.containsKey('lte') ? l$lte : const {},
      _$data.containsKey('notEq') ? l$notEq : const {},
      _$data.containsKey('notIn')
          ? l$notIn == null
              ? null
              : Object.hashAll(l$notIn.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$IntFilterInput<TRes> {
  factory CopyWith$Input$IntFilterInput(
    Input$IntFilterInput instance,
    TRes Function(Input$IntFilterInput) then,
  ) = _CopyWithImpl$Input$IntFilterInput;

  factory CopyWith$Input$IntFilterInput.stub(TRes res) =
      _CopyWithStubImpl$Input$IntFilterInput;

  TRes call({
    int? boost,
    int? eq,
    bool? exist,
    Input$NumberFactor? factor,
    int? gt,
    int? gte,
    List<int?>? $in,
    int? lt,
    int? lte,
    int? notEq,
    List<int?>? notIn,
  });
  CopyWith$Input$NumberFactor<TRes> get factor;
}

class _CopyWithImpl$Input$IntFilterInput<TRes>
    implements CopyWith$Input$IntFilterInput<TRes> {
  _CopyWithImpl$Input$IntFilterInput(
    this._instance,
    this._then,
  );

  final Input$IntFilterInput _instance;

  final TRes Function(Input$IntFilterInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? boost = _undefined,
    Object? eq = _undefined,
    Object? exist = _undefined,
    Object? factor = _undefined,
    Object? gt = _undefined,
    Object? gte = _undefined,
    Object? $in = _undefined,
    Object? lt = _undefined,
    Object? lte = _undefined,
    Object? notEq = _undefined,
    Object? notIn = _undefined,
  }) =>
      _then(Input$IntFilterInput._({
        ..._instance._$data,
        if (boost != _undefined) 'boost': (boost as int?),
        if (eq != _undefined) 'eq': (eq as int?),
        if (exist != _undefined) 'exist': (exist as bool?),
        if (factor != _undefined) 'factor': (factor as Input$NumberFactor?),
        if (gt != _undefined) 'gt': (gt as int?),
        if (gte != _undefined) 'gte': (gte as int?),
        if ($in != _undefined) 'in': ($in as List<int?>?),
        if (lt != _undefined) 'lt': (lt as int?),
        if (lte != _undefined) 'lte': (lte as int?),
        if (notEq != _undefined) 'notEq': (notEq as int?),
        if (notIn != _undefined) 'notIn': (notIn as List<int?>?),
      }));

  CopyWith$Input$NumberFactor<TRes> get factor {
    final local$factor = _instance.factor;
    return local$factor == null
        ? CopyWith$Input$NumberFactor.stub(_then(_instance))
        : CopyWith$Input$NumberFactor(local$factor, (e) => call(factor: e));
  }
}

class _CopyWithStubImpl$Input$IntFilterInput<TRes>
    implements CopyWith$Input$IntFilterInput<TRes> {
  _CopyWithStubImpl$Input$IntFilterInput(this._res);

  TRes _res;

  call({
    int? boost,
    int? eq,
    bool? exist,
    Input$NumberFactor? factor,
    int? gt,
    int? gte,
    List<int?>? $in,
    int? lt,
    int? lte,
    int? notEq,
    List<int?>? notIn,
  }) =>
      _res;

  CopyWith$Input$NumberFactor<TRes> get factor =>
      CopyWith$Input$NumberFactor.stub(_res);
}

class Input$JumbotronBlockOrderByInput {
  factory Input$JumbotronBlockOrderByInput({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? ButtonLink,
    Enum$OrderBy? ButtonText,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? ImageDescription,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? SubHeading,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$JumbotronBlockOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (ButtonLink != null) r'ButtonLink': ButtonLink,
        if (ButtonText != null) r'ButtonText': ButtonText,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (Heading != null) r'Heading': Heading,
        if (Image != null) r'Image': Image,
        if (ImageDescription != null) r'ImageDescription': ImageDescription,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (SubHeading != null) r'SubHeading': SubHeading,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$JumbotronBlockOrderByInput._(this._$data);

  factory Input$JumbotronBlockOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('ButtonLink')) {
      final l$ButtonLink = data['ButtonLink'];
      result$data['ButtonLink'] = l$ButtonLink == null
          ? null
          : fromJson$Enum$OrderBy((l$ButtonLink as String));
    }
    if (data.containsKey('ButtonText')) {
      final l$ButtonText = data['ButtonText'];
      result$data['ButtonText'] = l$ButtonText == null
          ? null
          : fromJson$Enum$OrderBy((l$ButtonText as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : fromJson$Enum$OrderBy((l$Heading as String));
    }
    if (data.containsKey('Image')) {
      final l$Image = data['Image'];
      result$data['Image'] = l$Image == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$Image as Map<String, dynamic>));
    }
    if (data.containsKey('ImageDescription')) {
      final l$ImageDescription = data['ImageDescription'];
      result$data['ImageDescription'] = l$ImageDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$ImageDescription as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('SubHeading')) {
      final l$SubHeading = data['SubHeading'];
      result$data['SubHeading'] = l$SubHeading == null
          ? null
          : fromJson$Enum$OrderBy((l$SubHeading as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$JumbotronBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Enum$OrderBy? get ButtonLink => (_$data['ButtonLink'] as Enum$OrderBy?);

  Enum$OrderBy? get ButtonText => (_$data['ButtonText'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Heading => (_$data['Heading'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get Image =>
      (_$data['Image'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ImageDescription =>
      (_$data['ImageDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get SubHeading => (_$data['SubHeading'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('ButtonLink')) {
      final l$ButtonLink = ButtonLink;
      result$data['ButtonLink'] =
          l$ButtonLink == null ? null : toJson$Enum$OrderBy(l$ButtonLink);
    }
    if (_$data.containsKey('ButtonText')) {
      final l$ButtonText = ButtonText;
      result$data['ButtonText'] =
          l$ButtonText == null ? null : toJson$Enum$OrderBy(l$ButtonText);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] =
          l$Heading == null ? null : toJson$Enum$OrderBy(l$Heading);
    }
    if (_$data.containsKey('Image')) {
      final l$Image = Image;
      result$data['Image'] = l$Image?.toJson();
    }
    if (_$data.containsKey('ImageDescription')) {
      final l$ImageDescription = ImageDescription;
      result$data['ImageDescription'] = l$ImageDescription == null
          ? null
          : toJson$Enum$OrderBy(l$ImageDescription);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('SubHeading')) {
      final l$SubHeading = SubHeading;
      result$data['SubHeading'] =
          l$SubHeading == null ? null : toJson$Enum$OrderBy(l$SubHeading);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$JumbotronBlockOrderByInput<Input$JumbotronBlockOrderByInput>
      get copyWith => CopyWith$Input$JumbotronBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$JumbotronBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$ButtonLink = ButtonLink;
    final lOther$ButtonLink = other.ButtonLink;
    if (_$data.containsKey('ButtonLink') !=
        other._$data.containsKey('ButtonLink')) {
      return false;
    }
    if (l$ButtonLink != lOther$ButtonLink) {
      return false;
    }
    final l$ButtonText = ButtonText;
    final lOther$ButtonText = other.ButtonText;
    if (_$data.containsKey('ButtonText') !=
        other._$data.containsKey('ButtonText')) {
      return false;
    }
    if (l$ButtonText != lOther$ButtonText) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$Image = Image;
    final lOther$Image = other.Image;
    if (_$data.containsKey('Image') != other._$data.containsKey('Image')) {
      return false;
    }
    if (l$Image != lOther$Image) {
      return false;
    }
    final l$ImageDescription = ImageDescription;
    final lOther$ImageDescription = other.ImageDescription;
    if (_$data.containsKey('ImageDescription') !=
        other._$data.containsKey('ImageDescription')) {
      return false;
    }
    if (l$ImageDescription != lOther$ImageDescription) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$SubHeading = SubHeading;
    final lOther$SubHeading = other.SubHeading;
    if (_$data.containsKey('SubHeading') !=
        other._$data.containsKey('SubHeading')) {
      return false;
    }
    if (l$SubHeading != lOther$SubHeading) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$ButtonLink = ButtonLink;
    final l$ButtonText = ButtonText;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$Heading = Heading;
    final l$Image = Image;
    final l$ImageDescription = ImageDescription;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$SubHeading = SubHeading;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('ButtonLink') ? l$ButtonLink : const {},
      _$data.containsKey('ButtonText') ? l$ButtonText : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('Image') ? l$Image : const {},
      _$data.containsKey('ImageDescription') ? l$ImageDescription : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('SubHeading') ? l$SubHeading : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$JumbotronBlockOrderByInput<TRes> {
  factory CopyWith$Input$JumbotronBlockOrderByInput(
    Input$JumbotronBlockOrderByInput instance,
    TRes Function(Input$JumbotronBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$JumbotronBlockOrderByInput;

  factory CopyWith$Input$JumbotronBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$JumbotronBlockOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? ButtonLink,
    Enum$OrderBy? ButtonText,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? ImageDescription,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? SubHeading,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$JumbotronBlockOrderByInput<TRes>
    implements CopyWith$Input$JumbotronBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$JumbotronBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$JumbotronBlockOrderByInput _instance;

  final TRes Function(Input$JumbotronBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? ButtonLink = _undefined,
    Object? ButtonText = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? Heading = _undefined,
    Object? Image = _undefined,
    Object? ImageDescription = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? SubHeading = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$JumbotronBlockOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (ButtonLink != _undefined)
          'ButtonLink': (ButtonLink as Enum$OrderBy?),
        if (ButtonText != _undefined)
          'ButtonText': (ButtonText as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (Heading != _undefined) 'Heading': (Heading as Enum$OrderBy?),
        if (Image != _undefined)
          'Image': (Image as Input$ContentModelReferenceOrderByInput?),
        if (ImageDescription != _undefined)
          'ImageDescription': (ImageDescription as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (SubHeading != _undefined)
          'SubHeading': (SubHeading as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image {
    final local$Image = _instance.Image;
    return local$Image == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$Image, (e) => call(Image: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$JumbotronBlockOrderByInput<TRes>
    implements CopyWith$Input$JumbotronBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$JumbotronBlockOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Enum$OrderBy? ButtonLink,
    Enum$OrderBy? ButtonText,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? ImageDescription,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? SubHeading,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$JumbotronBlockWhereInput {
  factory Input$JumbotronBlockWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$StringFilterInput? ButtonLink,
    Input$SearchableStringFilterInput? ButtonText,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$SearchableStringFilterInput? ImageDescription,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? SubHeading,
    Input$StringFilterInput? Url,
    List<Input$JumbotronBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$JumbotronBlockWhereInput?>? $_not,
    List<Input$JumbotronBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$JumbotronBlockWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (ButtonLink != null) r'ButtonLink': ButtonLink,
        if (ButtonText != null) r'ButtonText': ButtonText,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (Heading != null) r'Heading': Heading,
        if (Image != null) r'Image': Image,
        if (ImageDescription != null) r'ImageDescription': ImageDescription,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (SubHeading != null) r'SubHeading': SubHeading,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$JumbotronBlockWhereInput._(this._$data);

  factory Input$JumbotronBlockWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('ButtonLink')) {
      final l$ButtonLink = data['ButtonLink'];
      result$data['ButtonLink'] = l$ButtonLink == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ButtonLink as Map<String, dynamic>));
    }
    if (data.containsKey('ButtonText')) {
      final l$ButtonText = data['ButtonText'];
      result$data['ButtonText'] = l$ButtonText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$ButtonText as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Heading as Map<String, dynamic>));
    }
    if (data.containsKey('Image')) {
      final l$Image = data['Image'];
      result$data['Image'] = l$Image == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$Image as Map<String, dynamic>));
    }
    if (data.containsKey('ImageDescription')) {
      final l$ImageDescription = data['ImageDescription'];
      result$data['ImageDescription'] = l$ImageDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$ImageDescription as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('SubHeading')) {
      final l$SubHeading = data['SubHeading'];
      result$data['SubHeading'] = l$SubHeading == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$SubHeading as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$JumbotronBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$JumbotronBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$JumbotronBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$JumbotronBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$StringFilterInput? get ButtonLink =>
      (_$data['ButtonLink'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get ButtonText =>
      (_$data['ButtonText'] as Input$SearchableStringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Heading =>
      (_$data['Heading'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get Image =>
      (_$data['Image'] as Input$ContentModelReferenceWhereInput?);

  Input$SearchableStringFilterInput? get ImageDescription =>
      (_$data['ImageDescription'] as Input$SearchableStringFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get SubHeading =>
      (_$data['SubHeading'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$JumbotronBlockWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$JumbotronBlockWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$JumbotronBlockWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$JumbotronBlockWhereInput?>?);

  List<Input$JumbotronBlockWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$JumbotronBlockWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('ButtonLink')) {
      final l$ButtonLink = ButtonLink;
      result$data['ButtonLink'] = l$ButtonLink?.toJson();
    }
    if (_$data.containsKey('ButtonText')) {
      final l$ButtonText = ButtonText;
      result$data['ButtonText'] = l$ButtonText?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] = l$Heading?.toJson();
    }
    if (_$data.containsKey('Image')) {
      final l$Image = Image;
      result$data['Image'] = l$Image?.toJson();
    }
    if (_$data.containsKey('ImageDescription')) {
      final l$ImageDescription = ImageDescription;
      result$data['ImageDescription'] = l$ImageDescription?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('SubHeading')) {
      final l$SubHeading = SubHeading;
      result$data['SubHeading'] = l$SubHeading?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$JumbotronBlockWhereInput<Input$JumbotronBlockWhereInput>
      get copyWith => CopyWith$Input$JumbotronBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$JumbotronBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$ButtonLink = ButtonLink;
    final lOther$ButtonLink = other.ButtonLink;
    if (_$data.containsKey('ButtonLink') !=
        other._$data.containsKey('ButtonLink')) {
      return false;
    }
    if (l$ButtonLink != lOther$ButtonLink) {
      return false;
    }
    final l$ButtonText = ButtonText;
    final lOther$ButtonText = other.ButtonText;
    if (_$data.containsKey('ButtonText') !=
        other._$data.containsKey('ButtonText')) {
      return false;
    }
    if (l$ButtonText != lOther$ButtonText) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$Image = Image;
    final lOther$Image = other.Image;
    if (_$data.containsKey('Image') != other._$data.containsKey('Image')) {
      return false;
    }
    if (l$Image != lOther$Image) {
      return false;
    }
    final l$ImageDescription = ImageDescription;
    final lOther$ImageDescription = other.ImageDescription;
    if (_$data.containsKey('ImageDescription') !=
        other._$data.containsKey('ImageDescription')) {
      return false;
    }
    if (l$ImageDescription != lOther$ImageDescription) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$SubHeading = SubHeading;
    final lOther$SubHeading = other.SubHeading;
    if (_$data.containsKey('SubHeading') !=
        other._$data.containsKey('SubHeading')) {
      return false;
    }
    if (l$SubHeading != lOther$SubHeading) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$ButtonLink = ButtonLink;
    final l$ButtonText = ButtonText;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$Heading = Heading;
    final l$Image = Image;
    final l$ImageDescription = ImageDescription;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$SubHeading = SubHeading;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('ButtonLink') ? l$ButtonLink : const {},
      _$data.containsKey('ButtonText') ? l$ButtonText : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('Image') ? l$Image : const {},
      _$data.containsKey('ImageDescription') ? l$ImageDescription : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('SubHeading') ? l$SubHeading : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$JumbotronBlockWhereInput<TRes> {
  factory CopyWith$Input$JumbotronBlockWhereInput(
    Input$JumbotronBlockWhereInput instance,
    TRes Function(Input$JumbotronBlockWhereInput) then,
  ) = _CopyWithImpl$Input$JumbotronBlockWhereInput;

  factory CopyWith$Input$JumbotronBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$JumbotronBlockWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$StringFilterInput? ButtonLink,
    Input$SearchableStringFilterInput? ButtonText,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$SearchableStringFilterInput? ImageDescription,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? SubHeading,
    Input$StringFilterInput? Url,
    List<Input$JumbotronBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$JumbotronBlockWhereInput?>? $_not,
    List<Input$JumbotronBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$StringFilterInput<TRes> get ButtonLink;
  CopyWith$Input$SearchableStringFilterInput<TRes> get ButtonText;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image;
  CopyWith$Input$SearchableStringFilterInput<TRes> get ImageDescription;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get SubHeading;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$JumbotronBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$JumbotronBlockWhereInput<
                      Input$JumbotronBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$JumbotronBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$JumbotronBlockWhereInput<
                      Input$JumbotronBlockWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$JumbotronBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$JumbotronBlockWhereInput<
                      Input$JumbotronBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$JumbotronBlockWhereInput<TRes>
    implements CopyWith$Input$JumbotronBlockWhereInput<TRes> {
  _CopyWithImpl$Input$JumbotronBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$JumbotronBlockWhereInput _instance;

  final TRes Function(Input$JumbotronBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? ButtonLink = _undefined,
    Object? ButtonText = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? Heading = _undefined,
    Object? Image = _undefined,
    Object? ImageDescription = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? SubHeading = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$JumbotronBlockWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (ButtonLink != _undefined)
          'ButtonLink': (ButtonLink as Input$StringFilterInput?),
        if (ButtonText != _undefined)
          'ButtonText': (ButtonText as Input$SearchableStringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (Heading != _undefined)
          'Heading': (Heading as Input$SearchableStringFilterInput?),
        if (Image != _undefined)
          'Image': (Image as Input$ContentModelReferenceWhereInput?),
        if (ImageDescription != _undefined)
          'ImageDescription':
              (ImageDescription as Input$SearchableStringFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (SubHeading != _undefined)
          'SubHeading': (SubHeading as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$JumbotronBlockWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$JumbotronBlockWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$JumbotronBlockWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ButtonLink {
    final local$ButtonLink = _instance.ButtonLink;
    return local$ButtonLink == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ButtonLink, (e) => call(ButtonLink: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get ButtonText {
    final local$ButtonText = _instance.ButtonText;
    return local$ButtonText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$ButtonText, (e) => call(ButtonText: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading {
    final local$Heading = _instance.Heading;
    return local$Heading == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Heading, (e) => call(Heading: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image {
    final local$Image = _instance.Image;
    return local$Image == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$Image, (e) => call(Image: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get ImageDescription {
    final local$ImageDescription = _instance.ImageDescription;
    return local$ImageDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$ImageDescription, (e) => call(ImageDescription: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get SubHeading {
    final local$SubHeading = _instance.SubHeading;
    return local$SubHeading == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$SubHeading, (e) => call(SubHeading: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$JumbotronBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$JumbotronBlockWhereInput<
                          Input$JumbotronBlockWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$JumbotronBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$JumbotronBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$JumbotronBlockWhereInput<
                          Input$JumbotronBlockWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$JumbotronBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$JumbotronBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$JumbotronBlockWhereInput<
                          Input$JumbotronBlockWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$JumbotronBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$JumbotronBlockWhereInput<TRes>
    implements CopyWith$Input$JumbotronBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$JumbotronBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$StringFilterInput? ButtonLink,
    Input$SearchableStringFilterInput? ButtonText,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$SearchableStringFilterInput? ImageDescription,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? SubHeading,
    Input$StringFilterInput? Url,
    List<Input$JumbotronBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$JumbotronBlockWhereInput?>? $_not,
    List<Input$JumbotronBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ButtonLink =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get ButtonText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get ImageDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get SubHeading =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$LandingPageOrderByInput {
  factory Input$LandingPageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$LandingPageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$LandingPageOrderByInput._(this._$data);

  factory Input$LandingPageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$LandingPageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentAreaItemModelSearchOrderByInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$LandingPageOrderByInput<Input$LandingPageOrderByInput>
      get copyWith => CopyWith$Input$LandingPageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$LandingPageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$LandingPageOrderByInput<TRes> {
  factory CopyWith$Input$LandingPageOrderByInput(
    Input$LandingPageOrderByInput instance,
    TRes Function(Input$LandingPageOrderByInput) then,
  ) = _CopyWithImpl$Input$LandingPageOrderByInput;

  factory CopyWith$Input$LandingPageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$LandingPageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$LandingPageOrderByInput<TRes>
    implements CopyWith$Input$LandingPageOrderByInput<TRes> {
  _CopyWithImpl$Input$LandingPageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$LandingPageOrderByInput _instance;

  final TRes Function(Input$LandingPageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$LandingPageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MainContentArea != _undefined)
          'MainContentArea': (MainContentArea
              as Input$ContentAreaItemModelSearchOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$LandingPageOrderByInput<TRes>
    implements CopyWith$Input$LandingPageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$LandingPageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$LandingPageWhereInput {
  factory Input$LandingPageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$LandingPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$LandingPageWhereInput?>? $_not,
    List<Input$LandingPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$LandingPageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$LandingPageWhereInput._(this._$data);

  factory Input$LandingPageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$LandingPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$LandingPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$LandingPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$LandingPageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentAreaItemModelSearchWhereInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$LandingPageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$LandingPageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$LandingPageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$LandingPageWhereInput?>?);

  List<Input$LandingPageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$LandingPageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$LandingPageWhereInput<Input$LandingPageWhereInput>
      get copyWith => CopyWith$Input$LandingPageWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$LandingPageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$LandingPageWhereInput<TRes> {
  factory CopyWith$Input$LandingPageWhereInput(
    Input$LandingPageWhereInput instance,
    TRes Function(Input$LandingPageWhereInput) then,
  ) = _CopyWithImpl$Input$LandingPageWhereInput;

  factory CopyWith$Input$LandingPageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$LandingPageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$LandingPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$LandingPageWhereInput?>? $_not,
    List<Input$LandingPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get MainContentArea;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$LandingPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$LandingPageWhereInput<
                      Input$LandingPageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$LandingPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$LandingPageWhereInput<
                      Input$LandingPageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$LandingPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$LandingPageWhereInput<
                      Input$LandingPageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$LandingPageWhereInput<TRes>
    implements CopyWith$Input$LandingPageWhereInput<TRes> {
  _CopyWithImpl$Input$LandingPageWhereInput(
    this._instance,
    this._then,
  );

  final Input$LandingPageWhereInput _instance;

  final TRes Function(Input$LandingPageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$LandingPageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MainContentArea != _undefined)
          'MainContentArea':
              (MainContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$LandingPageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$LandingPageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$LandingPageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$LandingPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$LandingPageWhereInput<
                          Input$LandingPageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$LandingPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$LandingPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$LandingPageWhereInput<
                          Input$LandingPageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$LandingPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$LandingPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$LandingPageWhereInput<
                          Input$LandingPageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$LandingPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$LandingPageWhereInput<TRes>
    implements CopyWith$Input$LandingPageWhereInput<TRes> {
  _CopyWithStubImpl$Input$LandingPageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$LandingPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$LandingPageWhereInput?>? $_not,
    List<Input$LandingPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$LinkConfig {
  factory Input$LinkConfig({
    String? from,
    String? to,
  }) =>
      Input$LinkConfig._({
        if (from != null) r'from': from,
        if (to != null) r'to': to,
      });

  Input$LinkConfig._(this._$data);

  factory Input$LinkConfig.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('from')) {
      final l$from = data['from'];
      result$data['from'] = (l$from as String?);
    }
    if (data.containsKey('to')) {
      final l$to = data['to'];
      result$data['to'] = (l$to as String?);
    }
    return Input$LinkConfig._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get from => (_$data['from'] as String?);

  String? get to => (_$data['to'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('from')) {
      final l$from = from;
      result$data['from'] = l$from;
    }
    if (_$data.containsKey('to')) {
      final l$to = to;
      result$data['to'] = l$to;
    }
    return result$data;
  }

  CopyWith$Input$LinkConfig<Input$LinkConfig> get copyWith =>
      CopyWith$Input$LinkConfig(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$LinkConfig || runtimeType != other.runtimeType) {
      return false;
    }
    final l$from = from;
    final lOther$from = other.from;
    if (_$data.containsKey('from') != other._$data.containsKey('from')) {
      return false;
    }
    if (l$from != lOther$from) {
      return false;
    }
    final l$to = to;
    final lOther$to = other.to;
    if (_$data.containsKey('to') != other._$data.containsKey('to')) {
      return false;
    }
    if (l$to != lOther$to) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$from = from;
    final l$to = to;
    return Object.hashAll([
      _$data.containsKey('from') ? l$from : const {},
      _$data.containsKey('to') ? l$to : const {},
    ]);
  }
}

abstract class CopyWith$Input$LinkConfig<TRes> {
  factory CopyWith$Input$LinkConfig(
    Input$LinkConfig instance,
    TRes Function(Input$LinkConfig) then,
  ) = _CopyWithImpl$Input$LinkConfig;

  factory CopyWith$Input$LinkConfig.stub(TRes res) =
      _CopyWithStubImpl$Input$LinkConfig;

  TRes call({
    String? from,
    String? to,
  });
}

class _CopyWithImpl$Input$LinkConfig<TRes>
    implements CopyWith$Input$LinkConfig<TRes> {
  _CopyWithImpl$Input$LinkConfig(
    this._instance,
    this._then,
  );

  final Input$LinkConfig _instance;

  final TRes Function(Input$LinkConfig) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? from = _undefined,
    Object? to = _undefined,
  }) =>
      _then(Input$LinkConfig._({
        ..._instance._$data,
        if (from != _undefined) 'from': (from as String?),
        if (to != _undefined) 'to': (to as String?),
      }));
}

class _CopyWithStubImpl$Input$LinkConfig<TRes>
    implements CopyWith$Input$LinkConfig<TRes> {
  _CopyWithStubImpl$Input$LinkConfig(this._res);

  TRes _res;

  call({
    String? from,
    String? to,
  }) =>
      _res;
}

class Input$LinkItemNodeOrderByInput {
  factory Input$LinkItemNodeOrderByInput({
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? Href,
    Enum$OrderBy? Target,
    Enum$OrderBy? Text,
    Enum$OrderBy? Title,
  }) =>
      Input$LinkItemNodeOrderByInput._({
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (Href != null) r'Href': Href,
        if (Target != null) r'Target': Target,
        if (Text != null) r'Text': Text,
        if (Title != null) r'Title': Title,
      });

  Input$LinkItemNodeOrderByInput._(this._$data);

  factory Input$LinkItemNodeOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('Href')) {
      final l$Href = data['Href'];
      result$data['Href'] =
          l$Href == null ? null : fromJson$Enum$OrderBy((l$Href as String));
    }
    if (data.containsKey('Target')) {
      final l$Target = data['Target'];
      result$data['Target'] =
          l$Target == null ? null : fromJson$Enum$OrderBy((l$Target as String));
    }
    if (data.containsKey('Text')) {
      final l$Text = data['Text'];
      result$data['Text'] =
          l$Text == null ? null : fromJson$Enum$OrderBy((l$Text as String));
    }
    if (data.containsKey('Title')) {
      final l$Title = data['Title'];
      result$data['Title'] =
          l$Title == null ? null : fromJson$Enum$OrderBy((l$Title as String));
    }
    return Input$LinkItemNodeOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get Href => (_$data['Href'] as Enum$OrderBy?);

  Enum$OrderBy? get Target => (_$data['Target'] as Enum$OrderBy?);

  Enum$OrderBy? get Text => (_$data['Text'] as Enum$OrderBy?);

  Enum$OrderBy? get Title => (_$data['Title'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('Href')) {
      final l$Href = Href;
      result$data['Href'] = l$Href == null ? null : toJson$Enum$OrderBy(l$Href);
    }
    if (_$data.containsKey('Target')) {
      final l$Target = Target;
      result$data['Target'] =
          l$Target == null ? null : toJson$Enum$OrderBy(l$Target);
    }
    if (_$data.containsKey('Text')) {
      final l$Text = Text;
      result$data['Text'] = l$Text == null ? null : toJson$Enum$OrderBy(l$Text);
    }
    if (_$data.containsKey('Title')) {
      final l$Title = Title;
      result$data['Title'] =
          l$Title == null ? null : toJson$Enum$OrderBy(l$Title);
    }
    return result$data;
  }

  CopyWith$Input$LinkItemNodeOrderByInput<Input$LinkItemNodeOrderByInput>
      get copyWith => CopyWith$Input$LinkItemNodeOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$LinkItemNodeOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$Href = Href;
    final lOther$Href = other.Href;
    if (_$data.containsKey('Href') != other._$data.containsKey('Href')) {
      return false;
    }
    if (l$Href != lOther$Href) {
      return false;
    }
    final l$Target = Target;
    final lOther$Target = other.Target;
    if (_$data.containsKey('Target') != other._$data.containsKey('Target')) {
      return false;
    }
    if (l$Target != lOther$Target) {
      return false;
    }
    final l$Text = Text;
    final lOther$Text = other.Text;
    if (_$data.containsKey('Text') != other._$data.containsKey('Text')) {
      return false;
    }
    if (l$Text != lOther$Text) {
      return false;
    }
    final l$Title = Title;
    final lOther$Title = other.Title;
    if (_$data.containsKey('Title') != other._$data.containsKey('Title')) {
      return false;
    }
    if (l$Title != lOther$Title) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentLink = ContentLink;
    final l$Href = Href;
    final l$Target = Target;
    final l$Text = Text;
    final l$Title = Title;
    return Object.hashAll([
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('Href') ? l$Href : const {},
      _$data.containsKey('Target') ? l$Target : const {},
      _$data.containsKey('Text') ? l$Text : const {},
      _$data.containsKey('Title') ? l$Title : const {},
    ]);
  }
}

abstract class CopyWith$Input$LinkItemNodeOrderByInput<TRes> {
  factory CopyWith$Input$LinkItemNodeOrderByInput(
    Input$LinkItemNodeOrderByInput instance,
    TRes Function(Input$LinkItemNodeOrderByInput) then,
  ) = _CopyWithImpl$Input$LinkItemNodeOrderByInput;

  factory CopyWith$Input$LinkItemNodeOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$LinkItemNodeOrderByInput;

  TRes call({
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? Href,
    Enum$OrderBy? Target,
    Enum$OrderBy? Text,
    Enum$OrderBy? Title,
  });
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
}

class _CopyWithImpl$Input$LinkItemNodeOrderByInput<TRes>
    implements CopyWith$Input$LinkItemNodeOrderByInput<TRes> {
  _CopyWithImpl$Input$LinkItemNodeOrderByInput(
    this._instance,
    this._then,
  );

  final Input$LinkItemNodeOrderByInput _instance;

  final TRes Function(Input$LinkItemNodeOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? ContentLink = _undefined,
    Object? Href = _undefined,
    Object? Target = _undefined,
    Object? Text = _undefined,
    Object? Title = _undefined,
  }) =>
      _then(Input$LinkItemNodeOrderByInput._({
        ..._instance._$data,
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (Href != _undefined) 'Href': (Href as Enum$OrderBy?),
        if (Target != _undefined) 'Target': (Target as Enum$OrderBy?),
        if (Text != _undefined) 'Text': (Text as Enum$OrderBy?),
        if (Title != _undefined) 'Title': (Title as Enum$OrderBy?),
      }));

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }
}

class _CopyWithStubImpl$Input$LinkItemNodeOrderByInput<TRes>
    implements CopyWith$Input$LinkItemNodeOrderByInput<TRes> {
  _CopyWithStubImpl$Input$LinkItemNodeOrderByInput(this._res);

  TRes _res;

  call({
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? Href,
    Enum$OrderBy? Target,
    Enum$OrderBy? Text,
    Enum$OrderBy? Title,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$LinkItemNodeWhereInput {
  factory Input$LinkItemNodeWhereInput({
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? Href,
    Input$StringFilterInput? Target,
    Input$StringFilterInput? Text,
    Input$StringFilterInput? Title,
  }) =>
      Input$LinkItemNodeWhereInput._({
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (Href != null) r'Href': Href,
        if (Target != null) r'Target': Target,
        if (Text != null) r'Text': Text,
        if (Title != null) r'Title': Title,
      });

  Input$LinkItemNodeWhereInput._(this._$data);

  factory Input$LinkItemNodeWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('Href')) {
      final l$Href = data['Href'];
      result$data['Href'] = l$Href == null
          ? null
          : Input$StringFilterInput.fromJson((l$Href as Map<String, dynamic>));
    }
    if (data.containsKey('Target')) {
      final l$Target = data['Target'];
      result$data['Target'] = l$Target == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Target as Map<String, dynamic>));
    }
    if (data.containsKey('Text')) {
      final l$Text = data['Text'];
      result$data['Text'] = l$Text == null
          ? null
          : Input$StringFilterInput.fromJson((l$Text as Map<String, dynamic>));
    }
    if (data.containsKey('Title')) {
      final l$Title = data['Title'];
      result$data['Title'] = l$Title == null
          ? null
          : Input$StringFilterInput.fromJson((l$Title as Map<String, dynamic>));
    }
    return Input$LinkItemNodeWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get Href =>
      (_$data['Href'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Target =>
      (_$data['Target'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Text =>
      (_$data['Text'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Title =>
      (_$data['Title'] as Input$StringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('Href')) {
      final l$Href = Href;
      result$data['Href'] = l$Href?.toJson();
    }
    if (_$data.containsKey('Target')) {
      final l$Target = Target;
      result$data['Target'] = l$Target?.toJson();
    }
    if (_$data.containsKey('Text')) {
      final l$Text = Text;
      result$data['Text'] = l$Text?.toJson();
    }
    if (_$data.containsKey('Title')) {
      final l$Title = Title;
      result$data['Title'] = l$Title?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$LinkItemNodeWhereInput<Input$LinkItemNodeWhereInput>
      get copyWith => CopyWith$Input$LinkItemNodeWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$LinkItemNodeWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$Href = Href;
    final lOther$Href = other.Href;
    if (_$data.containsKey('Href') != other._$data.containsKey('Href')) {
      return false;
    }
    if (l$Href != lOther$Href) {
      return false;
    }
    final l$Target = Target;
    final lOther$Target = other.Target;
    if (_$data.containsKey('Target') != other._$data.containsKey('Target')) {
      return false;
    }
    if (l$Target != lOther$Target) {
      return false;
    }
    final l$Text = Text;
    final lOther$Text = other.Text;
    if (_$data.containsKey('Text') != other._$data.containsKey('Text')) {
      return false;
    }
    if (l$Text != lOther$Text) {
      return false;
    }
    final l$Title = Title;
    final lOther$Title = other.Title;
    if (_$data.containsKey('Title') != other._$data.containsKey('Title')) {
      return false;
    }
    if (l$Title != lOther$Title) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentLink = ContentLink;
    final l$Href = Href;
    final l$Target = Target;
    final l$Text = Text;
    final l$Title = Title;
    return Object.hashAll([
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('Href') ? l$Href : const {},
      _$data.containsKey('Target') ? l$Target : const {},
      _$data.containsKey('Text') ? l$Text : const {},
      _$data.containsKey('Title') ? l$Title : const {},
    ]);
  }
}

abstract class CopyWith$Input$LinkItemNodeWhereInput<TRes> {
  factory CopyWith$Input$LinkItemNodeWhereInput(
    Input$LinkItemNodeWhereInput instance,
    TRes Function(Input$LinkItemNodeWhereInput) then,
  ) = _CopyWithImpl$Input$LinkItemNodeWhereInput;

  factory CopyWith$Input$LinkItemNodeWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$LinkItemNodeWhereInput;

  TRes call({
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? Href,
    Input$StringFilterInput? Target,
    Input$StringFilterInput? Text,
    Input$StringFilterInput? Title,
  });
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get Href;
  CopyWith$Input$StringFilterInput<TRes> get Target;
  CopyWith$Input$StringFilterInput<TRes> get Text;
  CopyWith$Input$StringFilterInput<TRes> get Title;
}

class _CopyWithImpl$Input$LinkItemNodeWhereInput<TRes>
    implements CopyWith$Input$LinkItemNodeWhereInput<TRes> {
  _CopyWithImpl$Input$LinkItemNodeWhereInput(
    this._instance,
    this._then,
  );

  final Input$LinkItemNodeWhereInput _instance;

  final TRes Function(Input$LinkItemNodeWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? ContentLink = _undefined,
    Object? Href = _undefined,
    Object? Target = _undefined,
    Object? Text = _undefined,
    Object? Title = _undefined,
  }) =>
      _then(Input$LinkItemNodeWhereInput._({
        ..._instance._$data,
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (Href != _undefined) 'Href': (Href as Input$StringFilterInput?),
        if (Target != _undefined)
          'Target': (Target as Input$StringFilterInput?),
        if (Text != _undefined) 'Text': (Text as Input$StringFilterInput?),
        if (Title != _undefined) 'Title': (Title as Input$StringFilterInput?),
      }));

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Href {
    final local$Href = _instance.Href;
    return local$Href == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Href, (e) => call(Href: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Target {
    final local$Target = _instance.Target;
    return local$Target == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Target, (e) => call(Target: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Text {
    final local$Text = _instance.Text;
    return local$Text == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Text, (e) => call(Text: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Title {
    final local$Title = _instance.Title;
    return local$Title == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Title, (e) => call(Title: e));
  }
}

class _CopyWithStubImpl$Input$LinkItemNodeWhereInput<TRes>
    implements CopyWith$Input$LinkItemNodeWhereInput<TRes> {
  _CopyWithStubImpl$Input$LinkItemNodeWhereInput(this._res);

  TRes _res;

  call({
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? Href,
    Input$StringFilterInput? Target,
    Input$StringFilterInput? Text,
    Input$StringFilterInput? Title,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Href =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Target =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Text =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Title =>
      CopyWith$Input$StringFilterInput.stub(_res);
}

class Input$NewsPageOrderByInput {
  factory Input$NewsPageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$NewsPagePageListBlockOrderByInput? NewsList,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$NewsPageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (NewsList != null) r'NewsList': NewsList,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$NewsPageOrderByInput._(this._$data);

  factory Input$NewsPageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : fromJson$Enum$OrderBy((l$MainBody as String));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('NewsList')) {
      final l$NewsList = data['NewsList'];
      result$data['NewsList'] = l$NewsList == null
          ? null
          : Input$NewsPagePageListBlockOrderByInput.fromJson(
              (l$NewsList as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$NewsPageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MainBody => (_$data['MainBody'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$NewsPagePageListBlockOrderByInput? get NewsList =>
      (_$data['NewsList'] as Input$NewsPagePageListBlockOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] =
          l$MainBody == null ? null : toJson$Enum$OrderBy(l$MainBody);
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('NewsList')) {
      final l$NewsList = NewsList;
      result$data['NewsList'] = l$NewsList?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$NewsPageOrderByInput<Input$NewsPageOrderByInput>
      get copyWith => CopyWith$Input$NewsPageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$NewsPageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$NewsList = NewsList;
    final lOther$NewsList = other.NewsList;
    if (_$data.containsKey('NewsList') !=
        other._$data.containsKey('NewsList')) {
      return false;
    }
    if (l$NewsList != lOther$NewsList) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$NewsList = NewsList;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('NewsList') ? l$NewsList : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$NewsPageOrderByInput<TRes> {
  factory CopyWith$Input$NewsPageOrderByInput(
    Input$NewsPageOrderByInput instance,
    TRes Function(Input$NewsPageOrderByInput) then,
  ) = _CopyWithImpl$Input$NewsPageOrderByInput;

  factory CopyWith$Input$NewsPageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$NewsPageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$NewsPagePageListBlockOrderByInput? NewsList,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$NewsPagePageListBlockOrderByInput<TRes> get NewsList;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$NewsPageOrderByInput<TRes>
    implements CopyWith$Input$NewsPageOrderByInput<TRes> {
  _CopyWithImpl$Input$NewsPageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$NewsPageOrderByInput _instance;

  final TRes Function(Input$NewsPageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? NewsList = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$NewsPageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MainBody != _undefined) 'MainBody': (MainBody as Enum$OrderBy?),
        if (MainContentArea != _undefined)
          'MainContentArea': (MainContentArea
              as Input$ContentAreaItemModelSearchOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (NewsList != _undefined)
          'NewsList': (NewsList as Input$NewsPagePageListBlockOrderByInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$NewsPagePageListBlockOrderByInput<TRes> get NewsList {
    final local$NewsList = _instance.NewsList;
    return local$NewsList == null
        ? CopyWith$Input$NewsPagePageListBlockOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$NewsPagePageListBlockOrderByInput(
            local$NewsList, (e) => call(NewsList: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$NewsPageOrderByInput<TRes>
    implements CopyWith$Input$NewsPageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$NewsPageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$NewsPagePageListBlockOrderByInput? NewsList,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$NewsPagePageListBlockOrderByInput<TRes> get NewsList =>
      CopyWith$Input$NewsPagePageListBlockOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$NewsPagePageListBlockOrderByInput {
  factory Input$NewsPagePageListBlockOrderByInput({
    Input$CategoryModelOrderByInput? CategoryFilter,
    Enum$OrderBy? Count,
    Enum$OrderBy? Heading,
    Enum$OrderBy? IncludeIntroduction,
    Enum$OrderBy? IncludePublishDate,
    Enum$OrderBy? PageTypeFilter,
    Enum$OrderBy? Recursive,
    Input$ContentModelReferenceOrderByInput? Root,
    Enum$OrderBy? SortOrder,
  }) =>
      Input$NewsPagePageListBlockOrderByInput._({
        if (CategoryFilter != null) r'CategoryFilter': CategoryFilter,
        if (Count != null) r'Count': Count,
        if (Heading != null) r'Heading': Heading,
        if (IncludeIntroduction != null)
          r'IncludeIntroduction': IncludeIntroduction,
        if (IncludePublishDate != null)
          r'IncludePublishDate': IncludePublishDate,
        if (PageTypeFilter != null) r'PageTypeFilter': PageTypeFilter,
        if (Recursive != null) r'Recursive': Recursive,
        if (Root != null) r'Root': Root,
        if (SortOrder != null) r'SortOrder': SortOrder,
      });

  Input$NewsPagePageListBlockOrderByInput._(this._$data);

  factory Input$NewsPagePageListBlockOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('CategoryFilter')) {
      final l$CategoryFilter = data['CategoryFilter'];
      result$data['CategoryFilter'] = l$CategoryFilter == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$CategoryFilter as Map<String, dynamic>));
    }
    if (data.containsKey('Count')) {
      final l$Count = data['Count'];
      result$data['Count'] =
          l$Count == null ? null : fromJson$Enum$OrderBy((l$Count as String));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : fromJson$Enum$OrderBy((l$Heading as String));
    }
    if (data.containsKey('IncludeIntroduction')) {
      final l$IncludeIntroduction = data['IncludeIntroduction'];
      result$data['IncludeIntroduction'] = l$IncludeIntroduction == null
          ? null
          : fromJson$Enum$OrderBy((l$IncludeIntroduction as String));
    }
    if (data.containsKey('IncludePublishDate')) {
      final l$IncludePublishDate = data['IncludePublishDate'];
      result$data['IncludePublishDate'] = l$IncludePublishDate == null
          ? null
          : fromJson$Enum$OrderBy((l$IncludePublishDate as String));
    }
    if (data.containsKey('PageTypeFilter')) {
      final l$PageTypeFilter = data['PageTypeFilter'];
      result$data['PageTypeFilter'] = l$PageTypeFilter == null
          ? null
          : fromJson$Enum$OrderBy((l$PageTypeFilter as String));
    }
    if (data.containsKey('Recursive')) {
      final l$Recursive = data['Recursive'];
      result$data['Recursive'] = l$Recursive == null
          ? null
          : fromJson$Enum$OrderBy((l$Recursive as String));
    }
    if (data.containsKey('Root')) {
      final l$Root = data['Root'];
      result$data['Root'] = l$Root == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$Root as Map<String, dynamic>));
    }
    if (data.containsKey('SortOrder')) {
      final l$SortOrder = data['SortOrder'];
      result$data['SortOrder'] = l$SortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$SortOrder as String));
    }
    return Input$NewsPagePageListBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$CategoryModelOrderByInput? get CategoryFilter =>
      (_$data['CategoryFilter'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Count => (_$data['Count'] as Enum$OrderBy?);

  Enum$OrderBy? get Heading => (_$data['Heading'] as Enum$OrderBy?);

  Enum$OrderBy? get IncludeIntroduction =>
      (_$data['IncludeIntroduction'] as Enum$OrderBy?);

  Enum$OrderBy? get IncludePublishDate =>
      (_$data['IncludePublishDate'] as Enum$OrderBy?);

  Enum$OrderBy? get PageTypeFilter =>
      (_$data['PageTypeFilter'] as Enum$OrderBy?);

  Enum$OrderBy? get Recursive => (_$data['Recursive'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get Root =>
      (_$data['Root'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get SortOrder => (_$data['SortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('CategoryFilter')) {
      final l$CategoryFilter = CategoryFilter;
      result$data['CategoryFilter'] = l$CategoryFilter?.toJson();
    }
    if (_$data.containsKey('Count')) {
      final l$Count = Count;
      result$data['Count'] =
          l$Count == null ? null : toJson$Enum$OrderBy(l$Count);
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] =
          l$Heading == null ? null : toJson$Enum$OrderBy(l$Heading);
    }
    if (_$data.containsKey('IncludeIntroduction')) {
      final l$IncludeIntroduction = IncludeIntroduction;
      result$data['IncludeIntroduction'] = l$IncludeIntroduction == null
          ? null
          : toJson$Enum$OrderBy(l$IncludeIntroduction);
    }
    if (_$data.containsKey('IncludePublishDate')) {
      final l$IncludePublishDate = IncludePublishDate;
      result$data['IncludePublishDate'] = l$IncludePublishDate == null
          ? null
          : toJson$Enum$OrderBy(l$IncludePublishDate);
    }
    if (_$data.containsKey('PageTypeFilter')) {
      final l$PageTypeFilter = PageTypeFilter;
      result$data['PageTypeFilter'] = l$PageTypeFilter == null
          ? null
          : toJson$Enum$OrderBy(l$PageTypeFilter);
    }
    if (_$data.containsKey('Recursive')) {
      final l$Recursive = Recursive;
      result$data['Recursive'] =
          l$Recursive == null ? null : toJson$Enum$OrderBy(l$Recursive);
    }
    if (_$data.containsKey('Root')) {
      final l$Root = Root;
      result$data['Root'] = l$Root?.toJson();
    }
    if (_$data.containsKey('SortOrder')) {
      final l$SortOrder = SortOrder;
      result$data['SortOrder'] =
          l$SortOrder == null ? null : toJson$Enum$OrderBy(l$SortOrder);
    }
    return result$data;
  }

  CopyWith$Input$NewsPagePageListBlockOrderByInput<
          Input$NewsPagePageListBlockOrderByInput>
      get copyWith => CopyWith$Input$NewsPagePageListBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$NewsPagePageListBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$CategoryFilter = CategoryFilter;
    final lOther$CategoryFilter = other.CategoryFilter;
    if (_$data.containsKey('CategoryFilter') !=
        other._$data.containsKey('CategoryFilter')) {
      return false;
    }
    if (l$CategoryFilter != lOther$CategoryFilter) {
      return false;
    }
    final l$Count = Count;
    final lOther$Count = other.Count;
    if (_$data.containsKey('Count') != other._$data.containsKey('Count')) {
      return false;
    }
    if (l$Count != lOther$Count) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$IncludeIntroduction = IncludeIntroduction;
    final lOther$IncludeIntroduction = other.IncludeIntroduction;
    if (_$data.containsKey('IncludeIntroduction') !=
        other._$data.containsKey('IncludeIntroduction')) {
      return false;
    }
    if (l$IncludeIntroduction != lOther$IncludeIntroduction) {
      return false;
    }
    final l$IncludePublishDate = IncludePublishDate;
    final lOther$IncludePublishDate = other.IncludePublishDate;
    if (_$data.containsKey('IncludePublishDate') !=
        other._$data.containsKey('IncludePublishDate')) {
      return false;
    }
    if (l$IncludePublishDate != lOther$IncludePublishDate) {
      return false;
    }
    final l$PageTypeFilter = PageTypeFilter;
    final lOther$PageTypeFilter = other.PageTypeFilter;
    if (_$data.containsKey('PageTypeFilter') !=
        other._$data.containsKey('PageTypeFilter')) {
      return false;
    }
    if (l$PageTypeFilter != lOther$PageTypeFilter) {
      return false;
    }
    final l$Recursive = Recursive;
    final lOther$Recursive = other.Recursive;
    if (_$data.containsKey('Recursive') !=
        other._$data.containsKey('Recursive')) {
      return false;
    }
    if (l$Recursive != lOther$Recursive) {
      return false;
    }
    final l$Root = Root;
    final lOther$Root = other.Root;
    if (_$data.containsKey('Root') != other._$data.containsKey('Root')) {
      return false;
    }
    if (l$Root != lOther$Root) {
      return false;
    }
    final l$SortOrder = SortOrder;
    final lOther$SortOrder = other.SortOrder;
    if (_$data.containsKey('SortOrder') !=
        other._$data.containsKey('SortOrder')) {
      return false;
    }
    if (l$SortOrder != lOther$SortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$CategoryFilter = CategoryFilter;
    final l$Count = Count;
    final l$Heading = Heading;
    final l$IncludeIntroduction = IncludeIntroduction;
    final l$IncludePublishDate = IncludePublishDate;
    final l$PageTypeFilter = PageTypeFilter;
    final l$Recursive = Recursive;
    final l$Root = Root;
    final l$SortOrder = SortOrder;
    return Object.hashAll([
      _$data.containsKey('CategoryFilter') ? l$CategoryFilter : const {},
      _$data.containsKey('Count') ? l$Count : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('IncludeIntroduction')
          ? l$IncludeIntroduction
          : const {},
      _$data.containsKey('IncludePublishDate')
          ? l$IncludePublishDate
          : const {},
      _$data.containsKey('PageTypeFilter') ? l$PageTypeFilter : const {},
      _$data.containsKey('Recursive') ? l$Recursive : const {},
      _$data.containsKey('Root') ? l$Root : const {},
      _$data.containsKey('SortOrder') ? l$SortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$NewsPagePageListBlockOrderByInput<TRes> {
  factory CopyWith$Input$NewsPagePageListBlockOrderByInput(
    Input$NewsPagePageListBlockOrderByInput instance,
    TRes Function(Input$NewsPagePageListBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$NewsPagePageListBlockOrderByInput;

  factory CopyWith$Input$NewsPagePageListBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$NewsPagePageListBlockOrderByInput;

  TRes call({
    Input$CategoryModelOrderByInput? CategoryFilter,
    Enum$OrderBy? Count,
    Enum$OrderBy? Heading,
    Enum$OrderBy? IncludeIntroduction,
    Enum$OrderBy? IncludePublishDate,
    Enum$OrderBy? PageTypeFilter,
    Enum$OrderBy? Recursive,
    Input$ContentModelReferenceOrderByInput? Root,
    Enum$OrderBy? SortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get CategoryFilter;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Root;
}

class _CopyWithImpl$Input$NewsPagePageListBlockOrderByInput<TRes>
    implements CopyWith$Input$NewsPagePageListBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$NewsPagePageListBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$NewsPagePageListBlockOrderByInput _instance;

  final TRes Function(Input$NewsPagePageListBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? CategoryFilter = _undefined,
    Object? Count = _undefined,
    Object? Heading = _undefined,
    Object? IncludeIntroduction = _undefined,
    Object? IncludePublishDate = _undefined,
    Object? PageTypeFilter = _undefined,
    Object? Recursive = _undefined,
    Object? Root = _undefined,
    Object? SortOrder = _undefined,
  }) =>
      _then(Input$NewsPagePageListBlockOrderByInput._({
        ..._instance._$data,
        if (CategoryFilter != _undefined)
          'CategoryFilter':
              (CategoryFilter as Input$CategoryModelOrderByInput?),
        if (Count != _undefined) 'Count': (Count as Enum$OrderBy?),
        if (Heading != _undefined) 'Heading': (Heading as Enum$OrderBy?),
        if (IncludeIntroduction != _undefined)
          'IncludeIntroduction': (IncludeIntroduction as Enum$OrderBy?),
        if (IncludePublishDate != _undefined)
          'IncludePublishDate': (IncludePublishDate as Enum$OrderBy?),
        if (PageTypeFilter != _undefined)
          'PageTypeFilter': (PageTypeFilter as Enum$OrderBy?),
        if (Recursive != _undefined) 'Recursive': (Recursive as Enum$OrderBy?),
        if (Root != _undefined)
          'Root': (Root as Input$ContentModelReferenceOrderByInput?),
        if (SortOrder != _undefined) 'SortOrder': (SortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get CategoryFilter {
    final local$CategoryFilter = _instance.CategoryFilter;
    return local$CategoryFilter == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$CategoryFilter, (e) => call(CategoryFilter: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Root {
    final local$Root = _instance.Root;
    return local$Root == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$Root, (e) => call(Root: e));
  }
}

class _CopyWithStubImpl$Input$NewsPagePageListBlockOrderByInput<TRes>
    implements CopyWith$Input$NewsPagePageListBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$NewsPagePageListBlockOrderByInput(this._res);

  TRes _res;

  call({
    Input$CategoryModelOrderByInput? CategoryFilter,
    Enum$OrderBy? Count,
    Enum$OrderBy? Heading,
    Enum$OrderBy? IncludeIntroduction,
    Enum$OrderBy? IncludePublishDate,
    Enum$OrderBy? PageTypeFilter,
    Enum$OrderBy? Recursive,
    Input$ContentModelReferenceOrderByInput? Root,
    Enum$OrderBy? SortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get CategoryFilter =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Root =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$NewsPagePageListBlockWhereInput {
  factory Input$NewsPagePageListBlockWhereInput({
    Input$CategoryModelWhereInput? CategoryFilter,
    Input$IntFilterInput? Count,
    Input$SearchableStringFilterInput? Heading,
    Input$BoolFilterInput? IncludeIntroduction,
    Input$BoolFilterInput? IncludePublishDate,
    Input$StringFilterInput? PageTypeFilter,
    Input$BoolFilterInput? Recursive,
    Input$ContentModelReferenceWhereInput? Root,
    Input$IntFilterInput? SortOrder,
  }) =>
      Input$NewsPagePageListBlockWhereInput._({
        if (CategoryFilter != null) r'CategoryFilter': CategoryFilter,
        if (Count != null) r'Count': Count,
        if (Heading != null) r'Heading': Heading,
        if (IncludeIntroduction != null)
          r'IncludeIntroduction': IncludeIntroduction,
        if (IncludePublishDate != null)
          r'IncludePublishDate': IncludePublishDate,
        if (PageTypeFilter != null) r'PageTypeFilter': PageTypeFilter,
        if (Recursive != null) r'Recursive': Recursive,
        if (Root != null) r'Root': Root,
        if (SortOrder != null) r'SortOrder': SortOrder,
      });

  Input$NewsPagePageListBlockWhereInput._(this._$data);

  factory Input$NewsPagePageListBlockWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('CategoryFilter')) {
      final l$CategoryFilter = data['CategoryFilter'];
      result$data['CategoryFilter'] = l$CategoryFilter == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$CategoryFilter as Map<String, dynamic>));
    }
    if (data.containsKey('Count')) {
      final l$Count = data['Count'];
      result$data['Count'] = l$Count == null
          ? null
          : Input$IntFilterInput.fromJson((l$Count as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Heading as Map<String, dynamic>));
    }
    if (data.containsKey('IncludeIntroduction')) {
      final l$IncludeIntroduction = data['IncludeIntroduction'];
      result$data['IncludeIntroduction'] = l$IncludeIntroduction == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IncludeIntroduction as Map<String, dynamic>));
    }
    if (data.containsKey('IncludePublishDate')) {
      final l$IncludePublishDate = data['IncludePublishDate'];
      result$data['IncludePublishDate'] = l$IncludePublishDate == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IncludePublishDate as Map<String, dynamic>));
    }
    if (data.containsKey('PageTypeFilter')) {
      final l$PageTypeFilter = data['PageTypeFilter'];
      result$data['PageTypeFilter'] = l$PageTypeFilter == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$PageTypeFilter as Map<String, dynamic>));
    }
    if (data.containsKey('Recursive')) {
      final l$Recursive = data['Recursive'];
      result$data['Recursive'] = l$Recursive == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$Recursive as Map<String, dynamic>));
    }
    if (data.containsKey('Root')) {
      final l$Root = data['Root'];
      result$data['Root'] = l$Root == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$Root as Map<String, dynamic>));
    }
    if (data.containsKey('SortOrder')) {
      final l$SortOrder = data['SortOrder'];
      result$data['SortOrder'] = l$SortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$SortOrder as Map<String, dynamic>));
    }
    return Input$NewsPagePageListBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$CategoryModelWhereInput? get CategoryFilter =>
      (_$data['CategoryFilter'] as Input$CategoryModelWhereInput?);

  Input$IntFilterInput? get Count => (_$data['Count'] as Input$IntFilterInput?);

  Input$SearchableStringFilterInput? get Heading =>
      (_$data['Heading'] as Input$SearchableStringFilterInput?);

  Input$BoolFilterInput? get IncludeIntroduction =>
      (_$data['IncludeIntroduction'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IncludePublishDate =>
      (_$data['IncludePublishDate'] as Input$BoolFilterInput?);

  Input$StringFilterInput? get PageTypeFilter =>
      (_$data['PageTypeFilter'] as Input$StringFilterInput?);

  Input$BoolFilterInput? get Recursive =>
      (_$data['Recursive'] as Input$BoolFilterInput?);

  Input$ContentModelReferenceWhereInput? get Root =>
      (_$data['Root'] as Input$ContentModelReferenceWhereInput?);

  Input$IntFilterInput? get SortOrder =>
      (_$data['SortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('CategoryFilter')) {
      final l$CategoryFilter = CategoryFilter;
      result$data['CategoryFilter'] = l$CategoryFilter?.toJson();
    }
    if (_$data.containsKey('Count')) {
      final l$Count = Count;
      result$data['Count'] = l$Count?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] = l$Heading?.toJson();
    }
    if (_$data.containsKey('IncludeIntroduction')) {
      final l$IncludeIntroduction = IncludeIntroduction;
      result$data['IncludeIntroduction'] = l$IncludeIntroduction?.toJson();
    }
    if (_$data.containsKey('IncludePublishDate')) {
      final l$IncludePublishDate = IncludePublishDate;
      result$data['IncludePublishDate'] = l$IncludePublishDate?.toJson();
    }
    if (_$data.containsKey('PageTypeFilter')) {
      final l$PageTypeFilter = PageTypeFilter;
      result$data['PageTypeFilter'] = l$PageTypeFilter?.toJson();
    }
    if (_$data.containsKey('Recursive')) {
      final l$Recursive = Recursive;
      result$data['Recursive'] = l$Recursive?.toJson();
    }
    if (_$data.containsKey('Root')) {
      final l$Root = Root;
      result$data['Root'] = l$Root?.toJson();
    }
    if (_$data.containsKey('SortOrder')) {
      final l$SortOrder = SortOrder;
      result$data['SortOrder'] = l$SortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$NewsPagePageListBlockWhereInput<
          Input$NewsPagePageListBlockWhereInput>
      get copyWith => CopyWith$Input$NewsPagePageListBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$NewsPagePageListBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$CategoryFilter = CategoryFilter;
    final lOther$CategoryFilter = other.CategoryFilter;
    if (_$data.containsKey('CategoryFilter') !=
        other._$data.containsKey('CategoryFilter')) {
      return false;
    }
    if (l$CategoryFilter != lOther$CategoryFilter) {
      return false;
    }
    final l$Count = Count;
    final lOther$Count = other.Count;
    if (_$data.containsKey('Count') != other._$data.containsKey('Count')) {
      return false;
    }
    if (l$Count != lOther$Count) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$IncludeIntroduction = IncludeIntroduction;
    final lOther$IncludeIntroduction = other.IncludeIntroduction;
    if (_$data.containsKey('IncludeIntroduction') !=
        other._$data.containsKey('IncludeIntroduction')) {
      return false;
    }
    if (l$IncludeIntroduction != lOther$IncludeIntroduction) {
      return false;
    }
    final l$IncludePublishDate = IncludePublishDate;
    final lOther$IncludePublishDate = other.IncludePublishDate;
    if (_$data.containsKey('IncludePublishDate') !=
        other._$data.containsKey('IncludePublishDate')) {
      return false;
    }
    if (l$IncludePublishDate != lOther$IncludePublishDate) {
      return false;
    }
    final l$PageTypeFilter = PageTypeFilter;
    final lOther$PageTypeFilter = other.PageTypeFilter;
    if (_$data.containsKey('PageTypeFilter') !=
        other._$data.containsKey('PageTypeFilter')) {
      return false;
    }
    if (l$PageTypeFilter != lOther$PageTypeFilter) {
      return false;
    }
    final l$Recursive = Recursive;
    final lOther$Recursive = other.Recursive;
    if (_$data.containsKey('Recursive') !=
        other._$data.containsKey('Recursive')) {
      return false;
    }
    if (l$Recursive != lOther$Recursive) {
      return false;
    }
    final l$Root = Root;
    final lOther$Root = other.Root;
    if (_$data.containsKey('Root') != other._$data.containsKey('Root')) {
      return false;
    }
    if (l$Root != lOther$Root) {
      return false;
    }
    final l$SortOrder = SortOrder;
    final lOther$SortOrder = other.SortOrder;
    if (_$data.containsKey('SortOrder') !=
        other._$data.containsKey('SortOrder')) {
      return false;
    }
    if (l$SortOrder != lOther$SortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$CategoryFilter = CategoryFilter;
    final l$Count = Count;
    final l$Heading = Heading;
    final l$IncludeIntroduction = IncludeIntroduction;
    final l$IncludePublishDate = IncludePublishDate;
    final l$PageTypeFilter = PageTypeFilter;
    final l$Recursive = Recursive;
    final l$Root = Root;
    final l$SortOrder = SortOrder;
    return Object.hashAll([
      _$data.containsKey('CategoryFilter') ? l$CategoryFilter : const {},
      _$data.containsKey('Count') ? l$Count : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('IncludeIntroduction')
          ? l$IncludeIntroduction
          : const {},
      _$data.containsKey('IncludePublishDate')
          ? l$IncludePublishDate
          : const {},
      _$data.containsKey('PageTypeFilter') ? l$PageTypeFilter : const {},
      _$data.containsKey('Recursive') ? l$Recursive : const {},
      _$data.containsKey('Root') ? l$Root : const {},
      _$data.containsKey('SortOrder') ? l$SortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$NewsPagePageListBlockWhereInput<TRes> {
  factory CopyWith$Input$NewsPagePageListBlockWhereInput(
    Input$NewsPagePageListBlockWhereInput instance,
    TRes Function(Input$NewsPagePageListBlockWhereInput) then,
  ) = _CopyWithImpl$Input$NewsPagePageListBlockWhereInput;

  factory CopyWith$Input$NewsPagePageListBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$NewsPagePageListBlockWhereInput;

  TRes call({
    Input$CategoryModelWhereInput? CategoryFilter,
    Input$IntFilterInput? Count,
    Input$SearchableStringFilterInput? Heading,
    Input$BoolFilterInput? IncludeIntroduction,
    Input$BoolFilterInput? IncludePublishDate,
    Input$StringFilterInput? PageTypeFilter,
    Input$BoolFilterInput? Recursive,
    Input$ContentModelReferenceWhereInput? Root,
    Input$IntFilterInput? SortOrder,
  });
  CopyWith$Input$CategoryModelWhereInput<TRes> get CategoryFilter;
  CopyWith$Input$IntFilterInput<TRes> get Count;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading;
  CopyWith$Input$BoolFilterInput<TRes> get IncludeIntroduction;
  CopyWith$Input$BoolFilterInput<TRes> get IncludePublishDate;
  CopyWith$Input$StringFilterInput<TRes> get PageTypeFilter;
  CopyWith$Input$BoolFilterInput<TRes> get Recursive;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Root;
  CopyWith$Input$IntFilterInput<TRes> get SortOrder;
}

class _CopyWithImpl$Input$NewsPagePageListBlockWhereInput<TRes>
    implements CopyWith$Input$NewsPagePageListBlockWhereInput<TRes> {
  _CopyWithImpl$Input$NewsPagePageListBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$NewsPagePageListBlockWhereInput _instance;

  final TRes Function(Input$NewsPagePageListBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? CategoryFilter = _undefined,
    Object? Count = _undefined,
    Object? Heading = _undefined,
    Object? IncludeIntroduction = _undefined,
    Object? IncludePublishDate = _undefined,
    Object? PageTypeFilter = _undefined,
    Object? Recursive = _undefined,
    Object? Root = _undefined,
    Object? SortOrder = _undefined,
  }) =>
      _then(Input$NewsPagePageListBlockWhereInput._({
        ..._instance._$data,
        if (CategoryFilter != _undefined)
          'CategoryFilter': (CategoryFilter as Input$CategoryModelWhereInput?),
        if (Count != _undefined) 'Count': (Count as Input$IntFilterInput?),
        if (Heading != _undefined)
          'Heading': (Heading as Input$SearchableStringFilterInput?),
        if (IncludeIntroduction != _undefined)
          'IncludeIntroduction':
              (IncludeIntroduction as Input$BoolFilterInput?),
        if (IncludePublishDate != _undefined)
          'IncludePublishDate': (IncludePublishDate as Input$BoolFilterInput?),
        if (PageTypeFilter != _undefined)
          'PageTypeFilter': (PageTypeFilter as Input$StringFilterInput?),
        if (Recursive != _undefined)
          'Recursive': (Recursive as Input$BoolFilterInput?),
        if (Root != _undefined)
          'Root': (Root as Input$ContentModelReferenceWhereInput?),
        if (SortOrder != _undefined)
          'SortOrder': (SortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$CategoryModelWhereInput<TRes> get CategoryFilter {
    final local$CategoryFilter = _instance.CategoryFilter;
    return local$CategoryFilter == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$CategoryFilter, (e) => call(CategoryFilter: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get Count {
    final local$Count = _instance.Count;
    return local$Count == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(local$Count, (e) => call(Count: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading {
    final local$Heading = _instance.Heading;
    return local$Heading == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Heading, (e) => call(Heading: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IncludeIntroduction {
    final local$IncludeIntroduction = _instance.IncludeIntroduction;
    return local$IncludeIntroduction == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IncludeIntroduction, (e) => call(IncludeIntroduction: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IncludePublishDate {
    final local$IncludePublishDate = _instance.IncludePublishDate;
    return local$IncludePublishDate == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IncludePublishDate, (e) => call(IncludePublishDate: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get PageTypeFilter {
    final local$PageTypeFilter = _instance.PageTypeFilter;
    return local$PageTypeFilter == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$PageTypeFilter, (e) => call(PageTypeFilter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get Recursive {
    final local$Recursive = _instance.Recursive;
    return local$Recursive == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$Recursive, (e) => call(Recursive: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Root {
    final local$Root = _instance.Root;
    return local$Root == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$Root, (e) => call(Root: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get SortOrder {
    final local$SortOrder = _instance.SortOrder;
    return local$SortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$SortOrder, (e) => call(SortOrder: e));
  }
}

class _CopyWithStubImpl$Input$NewsPagePageListBlockWhereInput<TRes>
    implements CopyWith$Input$NewsPagePageListBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$NewsPagePageListBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$CategoryModelWhereInput? CategoryFilter,
    Input$IntFilterInput? Count,
    Input$SearchableStringFilterInput? Heading,
    Input$BoolFilterInput? IncludeIntroduction,
    Input$BoolFilterInput? IncludePublishDate,
    Input$StringFilterInput? PageTypeFilter,
    Input$BoolFilterInput? Recursive,
    Input$ContentModelReferenceWhereInput? Root,
    Input$IntFilterInput? SortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelWhereInput<TRes> get CategoryFilter =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get Count =>
      CopyWith$Input$IntFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IncludeIntroduction =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IncludePublishDate =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get PageTypeFilter =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get Recursive =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Root =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get SortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$NewsPageWhereInput {
  factory Input$NewsPageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$NewsPagePageListBlockWhereInput? NewsList,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$NewsPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$NewsPageWhereInput?>? $_not,
    List<Input$NewsPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$NewsPageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (NewsList != null) r'NewsList': NewsList,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$NewsPageWhereInput._(this._$data);

  factory Input$NewsPageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MainBody as Map<String, dynamic>));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('NewsList')) {
      final l$NewsList = data['NewsList'];
      result$data['NewsList'] = l$NewsList == null
          ? null
          : Input$NewsPagePageListBlockWhereInput.fromJson(
              (l$NewsList as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NewsPageWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NewsPageWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$NewsPageWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$NewsPageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MainBody =>
      (_$data['MainBody'] as Input$SearchableStringFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$NewsPagePageListBlockWhereInput? get NewsList =>
      (_$data['NewsList'] as Input$NewsPagePageListBlockWhereInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$NewsPageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$NewsPageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$NewsPageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$NewsPageWhereInput?>?);

  List<Input$NewsPageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$NewsPageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] = l$MainBody?.toJson();
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('NewsList')) {
      final l$NewsList = NewsList;
      result$data['NewsList'] = l$NewsList?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$NewsPageWhereInput<Input$NewsPageWhereInput> get copyWith =>
      CopyWith$Input$NewsPageWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$NewsPageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$NewsList = NewsList;
    final lOther$NewsList = other.NewsList;
    if (_$data.containsKey('NewsList') !=
        other._$data.containsKey('NewsList')) {
      return false;
    }
    if (l$NewsList != lOther$NewsList) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$NewsList = NewsList;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('NewsList') ? l$NewsList : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$NewsPageWhereInput<TRes> {
  factory CopyWith$Input$NewsPageWhereInput(
    Input$NewsPageWhereInput instance,
    TRes Function(Input$NewsPageWhereInput) then,
  ) = _CopyWithImpl$Input$NewsPageWhereInput;

  factory CopyWith$Input$NewsPageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$NewsPageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$NewsPagePageListBlockWhereInput? NewsList,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$NewsPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$NewsPageWhereInput?>? $_not,
    List<Input$NewsPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get MainContentArea;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$NewsPagePageListBlockWhereInput<TRes> get NewsList;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$NewsPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$NewsPageWhereInput<
                      Input$NewsPageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$NewsPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$NewsPageWhereInput<
                      Input$NewsPageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$NewsPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$NewsPageWhereInput<
                      Input$NewsPageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$NewsPageWhereInput<TRes>
    implements CopyWith$Input$NewsPageWhereInput<TRes> {
  _CopyWithImpl$Input$NewsPageWhereInput(
    this._instance,
    this._then,
  );

  final Input$NewsPageWhereInput _instance;

  final TRes Function(Input$NewsPageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? NewsList = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$NewsPageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MainBody != _undefined)
          'MainBody': (MainBody as Input$SearchableStringFilterInput?),
        if (MainContentArea != _undefined)
          'MainContentArea':
              (MainContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (NewsList != _undefined)
          'NewsList': (NewsList as Input$NewsPagePageListBlockWhereInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$NewsPageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$NewsPageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$NewsPageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody {
    final local$MainBody = _instance.MainBody;
    return local$MainBody == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MainBody, (e) => call(MainBody: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$NewsPagePageListBlockWhereInput<TRes> get NewsList {
    final local$NewsList = _instance.NewsList;
    return local$NewsList == null
        ? CopyWith$Input$NewsPagePageListBlockWhereInput.stub(_then(_instance))
        : CopyWith$Input$NewsPagePageListBlockWhereInput(
            local$NewsList, (e) => call(NewsList: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$NewsPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$NewsPageWhereInput<
                          Input$NewsPageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$NewsPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$NewsPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$NewsPageWhereInput<
                          Input$NewsPageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$NewsPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$NewsPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$NewsPageWhereInput<
                          Input$NewsPageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$NewsPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$NewsPageWhereInput<TRes>
    implements CopyWith$Input$NewsPageWhereInput<TRes> {
  _CopyWithStubImpl$Input$NewsPageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$NewsPagePageListBlockWhereInput? NewsList,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$NewsPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$NewsPageWhereInput?>? $_not,
    List<Input$NewsPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$NewsPagePageListBlockWhereInput<TRes> get NewsList =>
      CopyWith$Input$NewsPagePageListBlockWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$NumberFactor {
  factory Input$NumberFactor({
    Enum$FactorModifier? modifier,
    double? value,
  }) =>
      Input$NumberFactor._({
        if (modifier != null) r'modifier': modifier,
        if (value != null) r'value': value,
      });

  Input$NumberFactor._(this._$data);

  factory Input$NumberFactor.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('modifier')) {
      final l$modifier = data['modifier'];
      result$data['modifier'] = l$modifier == null
          ? null
          : fromJson$Enum$FactorModifier((l$modifier as String));
    }
    if (data.containsKey('value')) {
      final l$value = data['value'];
      result$data['value'] = (l$value as num?)?.toDouble();
    }
    return Input$NumberFactor._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$FactorModifier? get modifier =>
      (_$data['modifier'] as Enum$FactorModifier?);

  double? get value => (_$data['value'] as double?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('modifier')) {
      final l$modifier = modifier;
      result$data['modifier'] =
          l$modifier == null ? null : toJson$Enum$FactorModifier(l$modifier);
    }
    if (_$data.containsKey('value')) {
      final l$value = value;
      result$data['value'] = l$value;
    }
    return result$data;
  }

  CopyWith$Input$NumberFactor<Input$NumberFactor> get copyWith =>
      CopyWith$Input$NumberFactor(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$NumberFactor || runtimeType != other.runtimeType) {
      return false;
    }
    final l$modifier = modifier;
    final lOther$modifier = other.modifier;
    if (_$data.containsKey('modifier') !=
        other._$data.containsKey('modifier')) {
      return false;
    }
    if (l$modifier != lOther$modifier) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (_$data.containsKey('value') != other._$data.containsKey('value')) {
      return false;
    }
    if (l$value != lOther$value) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$modifier = modifier;
    final l$value = value;
    return Object.hashAll([
      _$data.containsKey('modifier') ? l$modifier : const {},
      _$data.containsKey('value') ? l$value : const {},
    ]);
  }
}

abstract class CopyWith$Input$NumberFactor<TRes> {
  factory CopyWith$Input$NumberFactor(
    Input$NumberFactor instance,
    TRes Function(Input$NumberFactor) then,
  ) = _CopyWithImpl$Input$NumberFactor;

  factory CopyWith$Input$NumberFactor.stub(TRes res) =
      _CopyWithStubImpl$Input$NumberFactor;

  TRes call({
    Enum$FactorModifier? modifier,
    double? value,
  });
}

class _CopyWithImpl$Input$NumberFactor<TRes>
    implements CopyWith$Input$NumberFactor<TRes> {
  _CopyWithImpl$Input$NumberFactor(
    this._instance,
    this._then,
  );

  final Input$NumberFactor _instance;

  final TRes Function(Input$NumberFactor) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? modifier = _undefined,
    Object? value = _undefined,
  }) =>
      _then(Input$NumberFactor._({
        ..._instance._$data,
        if (modifier != _undefined)
          'modifier': (modifier as Enum$FactorModifier?),
        if (value != _undefined) 'value': (value as double?),
      }));
}

class _CopyWithStubImpl$Input$NumberFactor<TRes>
    implements CopyWith$Input$NumberFactor<TRes> {
  _CopyWithStubImpl$Input$NumberFactor(this._res);

  TRes _res;

  call({
    Enum$FactorModifier? modifier,
    double? value,
  }) =>
      _res;
}

class Input$PageListBlockOrderByInput {
  factory Input$PageListBlockOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Input$CategoryModelOrderByInput? CategoryFilter,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Count,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Enum$OrderBy? IncludeIntroduction,
    Enum$OrderBy? IncludePublishDate,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Enum$OrderBy? PageTypeFilter,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? Recursive,
    Enum$OrderBy? RelativePath,
    Input$ContentModelReferenceOrderByInput? Root,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? SortOrder,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$PageListBlockOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (CategoryFilter != null) r'CategoryFilter': CategoryFilter,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Count != null) r'Count': Count,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (Heading != null) r'Heading': Heading,
        if (IncludeIntroduction != null)
          r'IncludeIntroduction': IncludeIntroduction,
        if (IncludePublishDate != null)
          r'IncludePublishDate': IncludePublishDate,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (PageTypeFilter != null) r'PageTypeFilter': PageTypeFilter,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (Recursive != null) r'Recursive': Recursive,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (Root != null) r'Root': Root,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (SortOrder != null) r'SortOrder': SortOrder,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$PageListBlockOrderByInput._(this._$data);

  factory Input$PageListBlockOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('CategoryFilter')) {
      final l$CategoryFilter = data['CategoryFilter'];
      result$data['CategoryFilter'] = l$CategoryFilter == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$CategoryFilter as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Count')) {
      final l$Count = data['Count'];
      result$data['Count'] =
          l$Count == null ? null : fromJson$Enum$OrderBy((l$Count as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : fromJson$Enum$OrderBy((l$Heading as String));
    }
    if (data.containsKey('IncludeIntroduction')) {
      final l$IncludeIntroduction = data['IncludeIntroduction'];
      result$data['IncludeIntroduction'] = l$IncludeIntroduction == null
          ? null
          : fromJson$Enum$OrderBy((l$IncludeIntroduction as String));
    }
    if (data.containsKey('IncludePublishDate')) {
      final l$IncludePublishDate = data['IncludePublishDate'];
      result$data['IncludePublishDate'] = l$IncludePublishDate == null
          ? null
          : fromJson$Enum$OrderBy((l$IncludePublishDate as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageTypeFilter')) {
      final l$PageTypeFilter = data['PageTypeFilter'];
      result$data['PageTypeFilter'] = l$PageTypeFilter == null
          ? null
          : fromJson$Enum$OrderBy((l$PageTypeFilter as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('Recursive')) {
      final l$Recursive = data['Recursive'];
      result$data['Recursive'] = l$Recursive == null
          ? null
          : fromJson$Enum$OrderBy((l$Recursive as String));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('Root')) {
      final l$Root = data['Root'];
      result$data['Root'] = l$Root == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$Root as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('SortOrder')) {
      final l$SortOrder = data['SortOrder'];
      result$data['SortOrder'] = l$SortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$SortOrder as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$PageListBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Input$CategoryModelOrderByInput? get CategoryFilter =>
      (_$data['CategoryFilter'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Count => (_$data['Count'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Heading => (_$data['Heading'] as Enum$OrderBy?);

  Enum$OrderBy? get IncludeIntroduction =>
      (_$data['IncludeIntroduction'] as Enum$OrderBy?);

  Enum$OrderBy? get IncludePublishDate =>
      (_$data['IncludePublishDate'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Enum$OrderBy? get PageTypeFilter =>
      (_$data['PageTypeFilter'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get Recursive => (_$data['Recursive'] as Enum$OrderBy?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get Root =>
      (_$data['Root'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get SortOrder => (_$data['SortOrder'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('CategoryFilter')) {
      final l$CategoryFilter = CategoryFilter;
      result$data['CategoryFilter'] = l$CategoryFilter?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Count')) {
      final l$Count = Count;
      result$data['Count'] =
          l$Count == null ? null : toJson$Enum$OrderBy(l$Count);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] =
          l$Heading == null ? null : toJson$Enum$OrderBy(l$Heading);
    }
    if (_$data.containsKey('IncludeIntroduction')) {
      final l$IncludeIntroduction = IncludeIntroduction;
      result$data['IncludeIntroduction'] = l$IncludeIntroduction == null
          ? null
          : toJson$Enum$OrderBy(l$IncludeIntroduction);
    }
    if (_$data.containsKey('IncludePublishDate')) {
      final l$IncludePublishDate = IncludePublishDate;
      result$data['IncludePublishDate'] = l$IncludePublishDate == null
          ? null
          : toJson$Enum$OrderBy(l$IncludePublishDate);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageTypeFilter')) {
      final l$PageTypeFilter = PageTypeFilter;
      result$data['PageTypeFilter'] = l$PageTypeFilter == null
          ? null
          : toJson$Enum$OrderBy(l$PageTypeFilter);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('Recursive')) {
      final l$Recursive = Recursive;
      result$data['Recursive'] =
          l$Recursive == null ? null : toJson$Enum$OrderBy(l$Recursive);
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('Root')) {
      final l$Root = Root;
      result$data['Root'] = l$Root?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('SortOrder')) {
      final l$SortOrder = SortOrder;
      result$data['SortOrder'] =
          l$SortOrder == null ? null : toJson$Enum$OrderBy(l$SortOrder);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$PageListBlockOrderByInput<Input$PageListBlockOrderByInput>
      get copyWith => CopyWith$Input$PageListBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$PageListBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$CategoryFilter = CategoryFilter;
    final lOther$CategoryFilter = other.CategoryFilter;
    if (_$data.containsKey('CategoryFilter') !=
        other._$data.containsKey('CategoryFilter')) {
      return false;
    }
    if (l$CategoryFilter != lOther$CategoryFilter) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Count = Count;
    final lOther$Count = other.Count;
    if (_$data.containsKey('Count') != other._$data.containsKey('Count')) {
      return false;
    }
    if (l$Count != lOther$Count) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$IncludeIntroduction = IncludeIntroduction;
    final lOther$IncludeIntroduction = other.IncludeIntroduction;
    if (_$data.containsKey('IncludeIntroduction') !=
        other._$data.containsKey('IncludeIntroduction')) {
      return false;
    }
    if (l$IncludeIntroduction != lOther$IncludeIntroduction) {
      return false;
    }
    final l$IncludePublishDate = IncludePublishDate;
    final lOther$IncludePublishDate = other.IncludePublishDate;
    if (_$data.containsKey('IncludePublishDate') !=
        other._$data.containsKey('IncludePublishDate')) {
      return false;
    }
    if (l$IncludePublishDate != lOther$IncludePublishDate) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageTypeFilter = PageTypeFilter;
    final lOther$PageTypeFilter = other.PageTypeFilter;
    if (_$data.containsKey('PageTypeFilter') !=
        other._$data.containsKey('PageTypeFilter')) {
      return false;
    }
    if (l$PageTypeFilter != lOther$PageTypeFilter) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$Recursive = Recursive;
    final lOther$Recursive = other.Recursive;
    if (_$data.containsKey('Recursive') !=
        other._$data.containsKey('Recursive')) {
      return false;
    }
    if (l$Recursive != lOther$Recursive) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$Root = Root;
    final lOther$Root = other.Root;
    if (_$data.containsKey('Root') != other._$data.containsKey('Root')) {
      return false;
    }
    if (l$Root != lOther$Root) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$SortOrder = SortOrder;
    final lOther$SortOrder = other.SortOrder;
    if (_$data.containsKey('SortOrder') !=
        other._$data.containsKey('SortOrder')) {
      return false;
    }
    if (l$SortOrder != lOther$SortOrder) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$CategoryFilter = CategoryFilter;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Count = Count;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$Heading = Heading;
    final l$IncludeIntroduction = IncludeIntroduction;
    final l$IncludePublishDate = IncludePublishDate;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$PageTypeFilter = PageTypeFilter;
    final l$ParentLink = ParentLink;
    final l$Recursive = Recursive;
    final l$RelativePath = RelativePath;
    final l$Root = Root;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$SortOrder = SortOrder;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('CategoryFilter') ? l$CategoryFilter : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Count') ? l$Count : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('IncludeIntroduction')
          ? l$IncludeIntroduction
          : const {},
      _$data.containsKey('IncludePublishDate')
          ? l$IncludePublishDate
          : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageTypeFilter') ? l$PageTypeFilter : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('Recursive') ? l$Recursive : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('Root') ? l$Root : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('SortOrder') ? l$SortOrder : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$PageListBlockOrderByInput<TRes> {
  factory CopyWith$Input$PageListBlockOrderByInput(
    Input$PageListBlockOrderByInput instance,
    TRes Function(Input$PageListBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$PageListBlockOrderByInput;

  factory CopyWith$Input$PageListBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$PageListBlockOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Input$CategoryModelOrderByInput? CategoryFilter,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Count,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Enum$OrderBy? IncludeIntroduction,
    Enum$OrderBy? IncludePublishDate,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Enum$OrderBy? PageTypeFilter,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? Recursive,
    Enum$OrderBy? RelativePath,
    Input$ContentModelReferenceOrderByInput? Root,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? SortOrder,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$CategoryModelOrderByInput<TRes> get CategoryFilter;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Root;
}

class _CopyWithImpl$Input$PageListBlockOrderByInput<TRes>
    implements CopyWith$Input$PageListBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$PageListBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$PageListBlockOrderByInput _instance;

  final TRes Function(Input$PageListBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? CategoryFilter = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Count = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? Heading = _undefined,
    Object? IncludeIntroduction = _undefined,
    Object? IncludePublishDate = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? PageTypeFilter = _undefined,
    Object? ParentLink = _undefined,
    Object? Recursive = _undefined,
    Object? RelativePath = _undefined,
    Object? Root = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? SortOrder = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$PageListBlockOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (CategoryFilter != _undefined)
          'CategoryFilter':
              (CategoryFilter as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Count != _undefined) 'Count': (Count as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (Heading != _undefined) 'Heading': (Heading as Enum$OrderBy?),
        if (IncludeIntroduction != _undefined)
          'IncludeIntroduction': (IncludeIntroduction as Enum$OrderBy?),
        if (IncludePublishDate != _undefined)
          'IncludePublishDate': (IncludePublishDate as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageTypeFilter != _undefined)
          'PageTypeFilter': (PageTypeFilter as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (Recursive != _undefined) 'Recursive': (Recursive as Enum$OrderBy?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (Root != _undefined)
          'Root': (Root as Input$ContentModelReferenceOrderByInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (SortOrder != _undefined) 'SortOrder': (SortOrder as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$CategoryModelOrderByInput<TRes> get CategoryFilter {
    final local$CategoryFilter = _instance.CategoryFilter;
    return local$CategoryFilter == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$CategoryFilter, (e) => call(CategoryFilter: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Root {
    final local$Root = _instance.Root;
    return local$Root == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$Root, (e) => call(Root: e));
  }
}

class _CopyWithStubImpl$Input$PageListBlockOrderByInput<TRes>
    implements CopyWith$Input$PageListBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$PageListBlockOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Input$CategoryModelOrderByInput? CategoryFilter,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Count,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Enum$OrderBy? IncludeIntroduction,
    Enum$OrderBy? IncludePublishDate,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Enum$OrderBy? PageTypeFilter,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? Recursive,
    Enum$OrderBy? RelativePath,
    Input$ContentModelReferenceOrderByInput? Root,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? SortOrder,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$CategoryModelOrderByInput<TRes> get CategoryFilter =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Root =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$PageListBlockWhereInput {
  factory Input$PageListBlockWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$CategoryModelWhereInput? CategoryFilter,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$IntFilterInput? Count,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$BoolFilterInput? IncludeIntroduction,
    Input$BoolFilterInput? IncludePublishDate,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$StringFilterInput? PageTypeFilter,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$BoolFilterInput? Recursive,
    Input$StringFilterInput? RelativePath,
    Input$ContentModelReferenceWhereInput? Root,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$IntFilterInput? SortOrder,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$PageListBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$PageListBlockWhereInput?>? $_not,
    List<Input$PageListBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$PageListBlockWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (CategoryFilter != null) r'CategoryFilter': CategoryFilter,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Count != null) r'Count': Count,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (Heading != null) r'Heading': Heading,
        if (IncludeIntroduction != null)
          r'IncludeIntroduction': IncludeIntroduction,
        if (IncludePublishDate != null)
          r'IncludePublishDate': IncludePublishDate,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (PageTypeFilter != null) r'PageTypeFilter': PageTypeFilter,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (Recursive != null) r'Recursive': Recursive,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (Root != null) r'Root': Root,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (SortOrder != null) r'SortOrder': SortOrder,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$PageListBlockWhereInput._(this._$data);

  factory Input$PageListBlockWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('CategoryFilter')) {
      final l$CategoryFilter = data['CategoryFilter'];
      result$data['CategoryFilter'] = l$CategoryFilter == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$CategoryFilter as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Count')) {
      final l$Count = data['Count'];
      result$data['Count'] = l$Count == null
          ? null
          : Input$IntFilterInput.fromJson((l$Count as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Heading as Map<String, dynamic>));
    }
    if (data.containsKey('IncludeIntroduction')) {
      final l$IncludeIntroduction = data['IncludeIntroduction'];
      result$data['IncludeIntroduction'] = l$IncludeIntroduction == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IncludeIntroduction as Map<String, dynamic>));
    }
    if (data.containsKey('IncludePublishDate')) {
      final l$IncludePublishDate = data['IncludePublishDate'];
      result$data['IncludePublishDate'] = l$IncludePublishDate == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IncludePublishDate as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageTypeFilter')) {
      final l$PageTypeFilter = data['PageTypeFilter'];
      result$data['PageTypeFilter'] = l$PageTypeFilter == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$PageTypeFilter as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('Recursive')) {
      final l$Recursive = data['Recursive'];
      result$data['Recursive'] = l$Recursive == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$Recursive as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('Root')) {
      final l$Root = data['Root'];
      result$data['Root'] = l$Root == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$Root as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('SortOrder')) {
      final l$SortOrder = data['SortOrder'];
      result$data['SortOrder'] = l$SortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$SortOrder as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$PageListBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$PageListBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$PageListBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$PageListBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$CategoryModelWhereInput? get CategoryFilter =>
      (_$data['CategoryFilter'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$IntFilterInput? get Count => (_$data['Count'] as Input$IntFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Heading =>
      (_$data['Heading'] as Input$SearchableStringFilterInput?);

  Input$BoolFilterInput? get IncludeIntroduction =>
      (_$data['IncludeIntroduction'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IncludePublishDate =>
      (_$data['IncludePublishDate'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get PageTypeFilter =>
      (_$data['PageTypeFilter'] as Input$StringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$BoolFilterInput? get Recursive =>
      (_$data['Recursive'] as Input$BoolFilterInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$ContentModelReferenceWhereInput? get Root =>
      (_$data['Root'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$IntFilterInput? get SortOrder =>
      (_$data['SortOrder'] as Input$IntFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$PageListBlockWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$PageListBlockWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$PageListBlockWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$PageListBlockWhereInput?>?);

  List<Input$PageListBlockWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$PageListBlockWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('CategoryFilter')) {
      final l$CategoryFilter = CategoryFilter;
      result$data['CategoryFilter'] = l$CategoryFilter?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Count')) {
      final l$Count = Count;
      result$data['Count'] = l$Count?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] = l$Heading?.toJson();
    }
    if (_$data.containsKey('IncludeIntroduction')) {
      final l$IncludeIntroduction = IncludeIntroduction;
      result$data['IncludeIntroduction'] = l$IncludeIntroduction?.toJson();
    }
    if (_$data.containsKey('IncludePublishDate')) {
      final l$IncludePublishDate = IncludePublishDate;
      result$data['IncludePublishDate'] = l$IncludePublishDate?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageTypeFilter')) {
      final l$PageTypeFilter = PageTypeFilter;
      result$data['PageTypeFilter'] = l$PageTypeFilter?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('Recursive')) {
      final l$Recursive = Recursive;
      result$data['Recursive'] = l$Recursive?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('Root')) {
      final l$Root = Root;
      result$data['Root'] = l$Root?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('SortOrder')) {
      final l$SortOrder = SortOrder;
      result$data['SortOrder'] = l$SortOrder?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$PageListBlockWhereInput<Input$PageListBlockWhereInput>
      get copyWith => CopyWith$Input$PageListBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$PageListBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$CategoryFilter = CategoryFilter;
    final lOther$CategoryFilter = other.CategoryFilter;
    if (_$data.containsKey('CategoryFilter') !=
        other._$data.containsKey('CategoryFilter')) {
      return false;
    }
    if (l$CategoryFilter != lOther$CategoryFilter) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Count = Count;
    final lOther$Count = other.Count;
    if (_$data.containsKey('Count') != other._$data.containsKey('Count')) {
      return false;
    }
    if (l$Count != lOther$Count) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$IncludeIntroduction = IncludeIntroduction;
    final lOther$IncludeIntroduction = other.IncludeIntroduction;
    if (_$data.containsKey('IncludeIntroduction') !=
        other._$data.containsKey('IncludeIntroduction')) {
      return false;
    }
    if (l$IncludeIntroduction != lOther$IncludeIntroduction) {
      return false;
    }
    final l$IncludePublishDate = IncludePublishDate;
    final lOther$IncludePublishDate = other.IncludePublishDate;
    if (_$data.containsKey('IncludePublishDate') !=
        other._$data.containsKey('IncludePublishDate')) {
      return false;
    }
    if (l$IncludePublishDate != lOther$IncludePublishDate) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageTypeFilter = PageTypeFilter;
    final lOther$PageTypeFilter = other.PageTypeFilter;
    if (_$data.containsKey('PageTypeFilter') !=
        other._$data.containsKey('PageTypeFilter')) {
      return false;
    }
    if (l$PageTypeFilter != lOther$PageTypeFilter) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$Recursive = Recursive;
    final lOther$Recursive = other.Recursive;
    if (_$data.containsKey('Recursive') !=
        other._$data.containsKey('Recursive')) {
      return false;
    }
    if (l$Recursive != lOther$Recursive) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$Root = Root;
    final lOther$Root = other.Root;
    if (_$data.containsKey('Root') != other._$data.containsKey('Root')) {
      return false;
    }
    if (l$Root != lOther$Root) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$SortOrder = SortOrder;
    final lOther$SortOrder = other.SortOrder;
    if (_$data.containsKey('SortOrder') !=
        other._$data.containsKey('SortOrder')) {
      return false;
    }
    if (l$SortOrder != lOther$SortOrder) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$CategoryFilter = CategoryFilter;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Count = Count;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$Heading = Heading;
    final l$IncludeIntroduction = IncludeIntroduction;
    final l$IncludePublishDate = IncludePublishDate;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$PageTypeFilter = PageTypeFilter;
    final l$ParentLink = ParentLink;
    final l$Recursive = Recursive;
    final l$RelativePath = RelativePath;
    final l$Root = Root;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$SortOrder = SortOrder;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('CategoryFilter') ? l$CategoryFilter : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Count') ? l$Count : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('IncludeIntroduction')
          ? l$IncludeIntroduction
          : const {},
      _$data.containsKey('IncludePublishDate')
          ? l$IncludePublishDate
          : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageTypeFilter') ? l$PageTypeFilter : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('Recursive') ? l$Recursive : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('Root') ? l$Root : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('SortOrder') ? l$SortOrder : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$PageListBlockWhereInput<TRes> {
  factory CopyWith$Input$PageListBlockWhereInput(
    Input$PageListBlockWhereInput instance,
    TRes Function(Input$PageListBlockWhereInput) then,
  ) = _CopyWithImpl$Input$PageListBlockWhereInput;

  factory CopyWith$Input$PageListBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$PageListBlockWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$CategoryModelWhereInput? CategoryFilter,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$IntFilterInput? Count,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$BoolFilterInput? IncludeIntroduction,
    Input$BoolFilterInput? IncludePublishDate,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$StringFilterInput? PageTypeFilter,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$BoolFilterInput? Recursive,
    Input$StringFilterInput? RelativePath,
    Input$ContentModelReferenceWhereInput? Root,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$IntFilterInput? SortOrder,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$PageListBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$PageListBlockWhereInput?>? $_not,
    List<Input$PageListBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$CategoryModelWhereInput<TRes> get CategoryFilter;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$IntFilterInput<TRes> get Count;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading;
  CopyWith$Input$BoolFilterInput<TRes> get IncludeIntroduction;
  CopyWith$Input$BoolFilterInput<TRes> get IncludePublishDate;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$StringFilterInput<TRes> get PageTypeFilter;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$BoolFilterInput<TRes> get Recursive;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Root;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$IntFilterInput<TRes> get SortOrder;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$PageListBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$PageListBlockWhereInput<
                      Input$PageListBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$PageListBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$PageListBlockWhereInput<
                      Input$PageListBlockWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$PageListBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$PageListBlockWhereInput<
                      Input$PageListBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$PageListBlockWhereInput<TRes>
    implements CopyWith$Input$PageListBlockWhereInput<TRes> {
  _CopyWithImpl$Input$PageListBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$PageListBlockWhereInput _instance;

  final TRes Function(Input$PageListBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? CategoryFilter = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Count = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? Heading = _undefined,
    Object? IncludeIntroduction = _undefined,
    Object? IncludePublishDate = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? PageTypeFilter = _undefined,
    Object? ParentLink = _undefined,
    Object? Recursive = _undefined,
    Object? RelativePath = _undefined,
    Object? Root = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? SortOrder = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$PageListBlockWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (CategoryFilter != _undefined)
          'CategoryFilter': (CategoryFilter as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Count != _undefined) 'Count': (Count as Input$IntFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (Heading != _undefined)
          'Heading': (Heading as Input$SearchableStringFilterInput?),
        if (IncludeIntroduction != _undefined)
          'IncludeIntroduction':
              (IncludeIntroduction as Input$BoolFilterInput?),
        if (IncludePublishDate != _undefined)
          'IncludePublishDate': (IncludePublishDate as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageTypeFilter != _undefined)
          'PageTypeFilter': (PageTypeFilter as Input$StringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (Recursive != _undefined)
          'Recursive': (Recursive as Input$BoolFilterInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (Root != _undefined)
          'Root': (Root as Input$ContentModelReferenceWhereInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (SortOrder != _undefined)
          'SortOrder': (SortOrder as Input$IntFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$PageListBlockWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$PageListBlockWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$PageListBlockWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get CategoryFilter {
    final local$CategoryFilter = _instance.CategoryFilter;
    return local$CategoryFilter == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$CategoryFilter, (e) => call(CategoryFilter: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get Count {
    final local$Count = _instance.Count;
    return local$Count == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(local$Count, (e) => call(Count: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading {
    final local$Heading = _instance.Heading;
    return local$Heading == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Heading, (e) => call(Heading: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IncludeIntroduction {
    final local$IncludeIntroduction = _instance.IncludeIntroduction;
    return local$IncludeIntroduction == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IncludeIntroduction, (e) => call(IncludeIntroduction: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IncludePublishDate {
    final local$IncludePublishDate = _instance.IncludePublishDate;
    return local$IncludePublishDate == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IncludePublishDate, (e) => call(IncludePublishDate: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get PageTypeFilter {
    final local$PageTypeFilter = _instance.PageTypeFilter;
    return local$PageTypeFilter == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$PageTypeFilter, (e) => call(PageTypeFilter: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get Recursive {
    final local$Recursive = _instance.Recursive;
    return local$Recursive == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$Recursive, (e) => call(Recursive: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Root {
    final local$Root = _instance.Root;
    return local$Root == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$Root, (e) => call(Root: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$IntFilterInput<TRes> get SortOrder {
    final local$SortOrder = _instance.SortOrder;
    return local$SortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$SortOrder, (e) => call(SortOrder: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$PageListBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$PageListBlockWhereInput<
                          Input$PageListBlockWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$PageListBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$PageListBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$PageListBlockWhereInput<
                          Input$PageListBlockWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$PageListBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$PageListBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$PageListBlockWhereInput<
                          Input$PageListBlockWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$PageListBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$PageListBlockWhereInput<TRes>
    implements CopyWith$Input$PageListBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$PageListBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$CategoryModelWhereInput? CategoryFilter,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$IntFilterInput? Count,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$BoolFilterInput? IncludeIntroduction,
    Input$BoolFilterInput? IncludePublishDate,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$StringFilterInput? PageTypeFilter,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$BoolFilterInput? Recursive,
    Input$StringFilterInput? RelativePath,
    Input$ContentModelReferenceWhereInput? Root,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$IntFilterInput? SortOrder,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$StringFilterInput? Url,
    List<Input$PageListBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$PageListBlockWhereInput?>? $_not,
    List<Input$PageListBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get CategoryFilter =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get Count =>
      CopyWith$Input$IntFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IncludeIntroduction =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IncludePublishDate =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get PageTypeFilter =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get Recursive =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Root =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$IntFilterInput<TRes> get SortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$ProductPageOrderByInput {
  factory Input$ProductPageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentAreaItemModelSearchOrderByInput? RelatedContentArea,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? UniqueSellingPoints,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$ProductPageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelatedContentArea != null)
          r'RelatedContentArea': RelatedContentArea,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (UniqueSellingPoints != null)
          r'UniqueSellingPoints': UniqueSellingPoints,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ProductPageOrderByInput._(this._$data);

  factory Input$ProductPageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : fromJson$Enum$OrderBy((l$MainBody as String));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelatedContentArea')) {
      final l$RelatedContentArea = data['RelatedContentArea'];
      result$data['RelatedContentArea'] = l$RelatedContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$RelatedContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('UniqueSellingPoints')) {
      final l$UniqueSellingPoints = data['UniqueSellingPoints'];
      result$data['UniqueSellingPoints'] = l$UniqueSellingPoints == null
          ? null
          : fromJson$Enum$OrderBy((l$UniqueSellingPoints as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$ProductPageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MainBody => (_$data['MainBody'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentAreaItemModelSearchOrderByInput? get RelatedContentArea =>
      (_$data['RelatedContentArea']
          as Input$ContentAreaItemModelSearchOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get UniqueSellingPoints =>
      (_$data['UniqueSellingPoints'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] =
          l$MainBody == null ? null : toJson$Enum$OrderBy(l$MainBody);
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelatedContentArea')) {
      final l$RelatedContentArea = RelatedContentArea;
      result$data['RelatedContentArea'] = l$RelatedContentArea?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('UniqueSellingPoints')) {
      final l$UniqueSellingPoints = UniqueSellingPoints;
      result$data['UniqueSellingPoints'] = l$UniqueSellingPoints == null
          ? null
          : toJson$Enum$OrderBy(l$UniqueSellingPoints);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$ProductPageOrderByInput<Input$ProductPageOrderByInput>
      get copyWith => CopyWith$Input$ProductPageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ProductPageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelatedContentArea = RelatedContentArea;
    final lOther$RelatedContentArea = other.RelatedContentArea;
    if (_$data.containsKey('RelatedContentArea') !=
        other._$data.containsKey('RelatedContentArea')) {
      return false;
    }
    if (l$RelatedContentArea != lOther$RelatedContentArea) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$UniqueSellingPoints = UniqueSellingPoints;
    final lOther$UniqueSellingPoints = other.UniqueSellingPoints;
    if (_$data.containsKey('UniqueSellingPoints') !=
        other._$data.containsKey('UniqueSellingPoints')) {
      return false;
    }
    if (l$UniqueSellingPoints != lOther$UniqueSellingPoints) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelatedContentArea = RelatedContentArea;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$UniqueSellingPoints = UniqueSellingPoints;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelatedContentArea')
          ? l$RelatedContentArea
          : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('UniqueSellingPoints')
          ? l$UniqueSellingPoints
          : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ProductPageOrderByInput<TRes> {
  factory CopyWith$Input$ProductPageOrderByInput(
    Input$ProductPageOrderByInput instance,
    TRes Function(Input$ProductPageOrderByInput) then,
  ) = _CopyWithImpl$Input$ProductPageOrderByInput;

  factory CopyWith$Input$ProductPageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ProductPageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentAreaItemModelSearchOrderByInput? RelatedContentArea,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? UniqueSellingPoints,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get RelatedContentArea;
}

class _CopyWithImpl$Input$ProductPageOrderByInput<TRes>
    implements CopyWith$Input$ProductPageOrderByInput<TRes> {
  _CopyWithImpl$Input$ProductPageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$ProductPageOrderByInput _instance;

  final TRes Function(Input$ProductPageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelatedContentArea = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? UniqueSellingPoints = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ProductPageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MainBody != _undefined) 'MainBody': (MainBody as Enum$OrderBy?),
        if (MainContentArea != _undefined)
          'MainContentArea': (MainContentArea
              as Input$ContentAreaItemModelSearchOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelatedContentArea != _undefined)
          'RelatedContentArea': (RelatedContentArea
              as Input$ContentAreaItemModelSearchOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (UniqueSellingPoints != _undefined)
          'UniqueSellingPoints': (UniqueSellingPoints as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get RelatedContentArea {
    final local$RelatedContentArea = _instance.RelatedContentArea;
    return local$RelatedContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$RelatedContentArea, (e) => call(RelatedContentArea: e));
  }
}

class _CopyWithStubImpl$Input$ProductPageOrderByInput<TRes>
    implements CopyWith$Input$ProductPageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$ProductPageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentAreaItemModelSearchOrderByInput? RelatedContentArea,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? UniqueSellingPoints,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get RelatedContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);
}

class Input$ProductPageWhereInput {
  factory Input$ProductPageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentAreaItemModelSearchWhereInput? RelatedContentArea,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? UniqueSellingPoints,
    Input$StringFilterInput? Url,
    List<Input$ProductPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ProductPageWhereInput?>? $_not,
    List<Input$ProductPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$ProductPageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelatedContentArea != null)
          r'RelatedContentArea': RelatedContentArea,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (UniqueSellingPoints != null)
          r'UniqueSellingPoints': UniqueSellingPoints,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$ProductPageWhereInput._(this._$data);

  factory Input$ProductPageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MainBody as Map<String, dynamic>));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelatedContentArea')) {
      final l$RelatedContentArea = data['RelatedContentArea'];
      result$data['RelatedContentArea'] = l$RelatedContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$RelatedContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('UniqueSellingPoints')) {
      final l$UniqueSellingPoints = data['UniqueSellingPoints'];
      result$data['UniqueSellingPoints'] = l$UniqueSellingPoints == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$UniqueSellingPoints as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ProductPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ProductPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$ProductPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$ProductPageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MainBody =>
      (_$data['MainBody'] as Input$SearchableStringFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentAreaItemModelSearchWhereInput? get RelatedContentArea =>
      (_$data['RelatedContentArea']
          as Input$ContentAreaItemModelSearchWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get UniqueSellingPoints =>
      (_$data['UniqueSellingPoints'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$ProductPageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$ProductPageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$ProductPageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$ProductPageWhereInput?>?);

  List<Input$ProductPageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$ProductPageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] = l$MainBody?.toJson();
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelatedContentArea')) {
      final l$RelatedContentArea = RelatedContentArea;
      result$data['RelatedContentArea'] = l$RelatedContentArea?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('UniqueSellingPoints')) {
      final l$UniqueSellingPoints = UniqueSellingPoints;
      result$data['UniqueSellingPoints'] = l$UniqueSellingPoints?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$ProductPageWhereInput<Input$ProductPageWhereInput>
      get copyWith => CopyWith$Input$ProductPageWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$ProductPageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelatedContentArea = RelatedContentArea;
    final lOther$RelatedContentArea = other.RelatedContentArea;
    if (_$data.containsKey('RelatedContentArea') !=
        other._$data.containsKey('RelatedContentArea')) {
      return false;
    }
    if (l$RelatedContentArea != lOther$RelatedContentArea) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$UniqueSellingPoints = UniqueSellingPoints;
    final lOther$UniqueSellingPoints = other.UniqueSellingPoints;
    if (_$data.containsKey('UniqueSellingPoints') !=
        other._$data.containsKey('UniqueSellingPoints')) {
      return false;
    }
    if (l$UniqueSellingPoints != lOther$UniqueSellingPoints) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelatedContentArea = RelatedContentArea;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$UniqueSellingPoints = UniqueSellingPoints;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelatedContentArea')
          ? l$RelatedContentArea
          : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('UniqueSellingPoints')
          ? l$UniqueSellingPoints
          : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$ProductPageWhereInput<TRes> {
  factory CopyWith$Input$ProductPageWhereInput(
    Input$ProductPageWhereInput instance,
    TRes Function(Input$ProductPageWhereInput) then,
  ) = _CopyWithImpl$Input$ProductPageWhereInput;

  factory CopyWith$Input$ProductPageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$ProductPageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentAreaItemModelSearchWhereInput? RelatedContentArea,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? UniqueSellingPoints,
    Input$StringFilterInput? Url,
    List<Input$ProductPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ProductPageWhereInput?>? $_not,
    List<Input$ProductPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get MainContentArea;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get RelatedContentArea;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get UniqueSellingPoints;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$ProductPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ProductPageWhereInput<
                      Input$ProductPageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$ProductPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ProductPageWhereInput<
                      Input$ProductPageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$ProductPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$ProductPageWhereInput<
                      Input$ProductPageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$ProductPageWhereInput<TRes>
    implements CopyWith$Input$ProductPageWhereInput<TRes> {
  _CopyWithImpl$Input$ProductPageWhereInput(
    this._instance,
    this._then,
  );

  final Input$ProductPageWhereInput _instance;

  final TRes Function(Input$ProductPageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelatedContentArea = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? UniqueSellingPoints = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$ProductPageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MainBody != _undefined)
          'MainBody': (MainBody as Input$SearchableStringFilterInput?),
        if (MainContentArea != _undefined)
          'MainContentArea':
              (MainContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelatedContentArea != _undefined)
          'RelatedContentArea': (RelatedContentArea
              as Input$ContentAreaItemModelSearchWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (UniqueSellingPoints != _undefined)
          'UniqueSellingPoints':
              (UniqueSellingPoints as Input$StringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$ProductPageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$ProductPageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$ProductPageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody {
    final local$MainBody = _instance.MainBody;
    return local$MainBody == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MainBody, (e) => call(MainBody: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get RelatedContentArea {
    final local$RelatedContentArea = _instance.RelatedContentArea;
    return local$RelatedContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$RelatedContentArea, (e) => call(RelatedContentArea: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get UniqueSellingPoints {
    final local$UniqueSellingPoints = _instance.UniqueSellingPoints;
    return local$UniqueSellingPoints == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$UniqueSellingPoints, (e) => call(UniqueSellingPoints: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$ProductPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ProductPageWhereInput<
                          Input$ProductPageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$ProductPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$ProductPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ProductPageWhereInput<
                          Input$ProductPageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$ProductPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$ProductPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$ProductPageWhereInput<
                          Input$ProductPageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$ProductPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$ProductPageWhereInput<TRes>
    implements CopyWith$Input$ProductPageWhereInput<TRes> {
  _CopyWithStubImpl$Input$ProductPageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentAreaItemModelSearchWhereInput? RelatedContentArea,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? UniqueSellingPoints,
    Input$StringFilterInput? Url,
    List<Input$ProductPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$ProductPageWhereInput?>? $_not,
    List<Input$ProductPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get RelatedContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get UniqueSellingPoints =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$RangeFacetsInput {
  factory Input$RangeFacetsInput({
    int? from,
    int? to,
  }) =>
      Input$RangeFacetsInput._({
        if (from != null) r'from': from,
        if (to != null) r'to': to,
      });

  Input$RangeFacetsInput._(this._$data);

  factory Input$RangeFacetsInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('from')) {
      final l$from = data['from'];
      result$data['from'] = (l$from as int?);
    }
    if (data.containsKey('to')) {
      final l$to = data['to'];
      result$data['to'] = (l$to as int?);
    }
    return Input$RangeFacetsInput._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get from => (_$data['from'] as int?);

  int? get to => (_$data['to'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('from')) {
      final l$from = from;
      result$data['from'] = l$from;
    }
    if (_$data.containsKey('to')) {
      final l$to = to;
      result$data['to'] = l$to;
    }
    return result$data;
  }

  CopyWith$Input$RangeFacetsInput<Input$RangeFacetsInput> get copyWith =>
      CopyWith$Input$RangeFacetsInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$RangeFacetsInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$from = from;
    final lOther$from = other.from;
    if (_$data.containsKey('from') != other._$data.containsKey('from')) {
      return false;
    }
    if (l$from != lOther$from) {
      return false;
    }
    final l$to = to;
    final lOther$to = other.to;
    if (_$data.containsKey('to') != other._$data.containsKey('to')) {
      return false;
    }
    if (l$to != lOther$to) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$from = from;
    final l$to = to;
    return Object.hashAll([
      _$data.containsKey('from') ? l$from : const {},
      _$data.containsKey('to') ? l$to : const {},
    ]);
  }
}

abstract class CopyWith$Input$RangeFacetsInput<TRes> {
  factory CopyWith$Input$RangeFacetsInput(
    Input$RangeFacetsInput instance,
    TRes Function(Input$RangeFacetsInput) then,
  ) = _CopyWithImpl$Input$RangeFacetsInput;

  factory CopyWith$Input$RangeFacetsInput.stub(TRes res) =
      _CopyWithStubImpl$Input$RangeFacetsInput;

  TRes call({
    int? from,
    int? to,
  });
}

class _CopyWithImpl$Input$RangeFacetsInput<TRes>
    implements CopyWith$Input$RangeFacetsInput<TRes> {
  _CopyWithImpl$Input$RangeFacetsInput(
    this._instance,
    this._then,
  );

  final Input$RangeFacetsInput _instance;

  final TRes Function(Input$RangeFacetsInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? from = _undefined,
    Object? to = _undefined,
  }) =>
      _then(Input$RangeFacetsInput._({
        ..._instance._$data,
        if (from != _undefined) 'from': (from as int?),
        if (to != _undefined) 'to': (to as int?),
      }));
}

class _CopyWithStubImpl$Input$RangeFacetsInput<TRes>
    implements CopyWith$Input$RangeFacetsInput<TRes> {
  _CopyWithStubImpl$Input$RangeFacetsInput(this._res);

  TRes _res;

  call({
    int? from,
    int? to,
  }) =>
      _res;
}

class Input$SearchPageOrderByInput {
  factory Input$SearchPageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentAreaItemModelSearchOrderByInput? RelatedContentArea,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$SearchPageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelatedContentArea != null)
          r'RelatedContentArea': RelatedContentArea,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$SearchPageOrderByInput._(this._$data);

  factory Input$SearchPageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelatedContentArea')) {
      final l$RelatedContentArea = data['RelatedContentArea'];
      result$data['RelatedContentArea'] = l$RelatedContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$RelatedContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$SearchPageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentAreaItemModelSearchOrderByInput? get RelatedContentArea =>
      (_$data['RelatedContentArea']
          as Input$ContentAreaItemModelSearchOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelatedContentArea')) {
      final l$RelatedContentArea = RelatedContentArea;
      result$data['RelatedContentArea'] = l$RelatedContentArea?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$SearchPageOrderByInput<Input$SearchPageOrderByInput>
      get copyWith => CopyWith$Input$SearchPageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SearchPageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelatedContentArea = RelatedContentArea;
    final lOther$RelatedContentArea = other.RelatedContentArea;
    if (_$data.containsKey('RelatedContentArea') !=
        other._$data.containsKey('RelatedContentArea')) {
      return false;
    }
    if (l$RelatedContentArea != lOther$RelatedContentArea) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelatedContentArea = RelatedContentArea;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelatedContentArea')
          ? l$RelatedContentArea
          : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$SearchPageOrderByInput<TRes> {
  factory CopyWith$Input$SearchPageOrderByInput(
    Input$SearchPageOrderByInput instance,
    TRes Function(Input$SearchPageOrderByInput) then,
  ) = _CopyWithImpl$Input$SearchPageOrderByInput;

  factory CopyWith$Input$SearchPageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SearchPageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentAreaItemModelSearchOrderByInput? RelatedContentArea,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get RelatedContentArea;
}

class _CopyWithImpl$Input$SearchPageOrderByInput<TRes>
    implements CopyWith$Input$SearchPageOrderByInput<TRes> {
  _CopyWithImpl$Input$SearchPageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$SearchPageOrderByInput _instance;

  final TRes Function(Input$SearchPageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelatedContentArea = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$SearchPageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelatedContentArea != _undefined)
          'RelatedContentArea': (RelatedContentArea
              as Input$ContentAreaItemModelSearchOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get RelatedContentArea {
    final local$RelatedContentArea = _instance.RelatedContentArea;
    return local$RelatedContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$RelatedContentArea, (e) => call(RelatedContentArea: e));
  }
}

class _CopyWithStubImpl$Input$SearchPageOrderByInput<TRes>
    implements CopyWith$Input$SearchPageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$SearchPageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentAreaItemModelSearchOrderByInput? RelatedContentArea,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get RelatedContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);
}

class Input$SearchPageWhereInput {
  factory Input$SearchPageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentAreaItemModelSearchWhereInput? RelatedContentArea,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$SearchPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SearchPageWhereInput?>? $_not,
    List<Input$SearchPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$SearchPageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelatedContentArea != null)
          r'RelatedContentArea': RelatedContentArea,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$SearchPageWhereInput._(this._$data);

  factory Input$SearchPageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelatedContentArea')) {
      final l$RelatedContentArea = data['RelatedContentArea'];
      result$data['RelatedContentArea'] = l$RelatedContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$RelatedContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SearchPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SearchPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SearchPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$SearchPageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentAreaItemModelSearchWhereInput? get RelatedContentArea =>
      (_$data['RelatedContentArea']
          as Input$ContentAreaItemModelSearchWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$SearchPageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$SearchPageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$SearchPageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$SearchPageWhereInput?>?);

  List<Input$SearchPageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$SearchPageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelatedContentArea')) {
      final l$RelatedContentArea = RelatedContentArea;
      result$data['RelatedContentArea'] = l$RelatedContentArea?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SearchPageWhereInput<Input$SearchPageWhereInput>
      get copyWith => CopyWith$Input$SearchPageWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SearchPageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelatedContentArea = RelatedContentArea;
    final lOther$RelatedContentArea = other.RelatedContentArea;
    if (_$data.containsKey('RelatedContentArea') !=
        other._$data.containsKey('RelatedContentArea')) {
      return false;
    }
    if (l$RelatedContentArea != lOther$RelatedContentArea) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelatedContentArea = RelatedContentArea;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelatedContentArea')
          ? l$RelatedContentArea
          : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$SearchPageWhereInput<TRes> {
  factory CopyWith$Input$SearchPageWhereInput(
    Input$SearchPageWhereInput instance,
    TRes Function(Input$SearchPageWhereInput) then,
  ) = _CopyWithImpl$Input$SearchPageWhereInput;

  factory CopyWith$Input$SearchPageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SearchPageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentAreaItemModelSearchWhereInput? RelatedContentArea,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$SearchPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SearchPageWhereInput?>? $_not,
    List<Input$SearchPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get RelatedContentArea;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$SearchPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SearchPageWhereInput<
                      Input$SearchPageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$SearchPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SearchPageWhereInput<
                      Input$SearchPageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$SearchPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SearchPageWhereInput<
                      Input$SearchPageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$SearchPageWhereInput<TRes>
    implements CopyWith$Input$SearchPageWhereInput<TRes> {
  _CopyWithImpl$Input$SearchPageWhereInput(
    this._instance,
    this._then,
  );

  final Input$SearchPageWhereInput _instance;

  final TRes Function(Input$SearchPageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelatedContentArea = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$SearchPageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelatedContentArea != _undefined)
          'RelatedContentArea': (RelatedContentArea
              as Input$ContentAreaItemModelSearchWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$SearchPageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$SearchPageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$SearchPageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get RelatedContentArea {
    final local$RelatedContentArea = _instance.RelatedContentArea;
    return local$RelatedContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$RelatedContentArea, (e) => call(RelatedContentArea: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$SearchPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SearchPageWhereInput<
                          Input$SearchPageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$SearchPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$SearchPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SearchPageWhereInput<
                          Input$SearchPageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$SearchPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$SearchPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SearchPageWhereInput<
                          Input$SearchPageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$SearchPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$SearchPageWhereInput<TRes>
    implements CopyWith$Input$SearchPageWhereInput<TRes> {
  _CopyWithStubImpl$Input$SearchPageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentAreaItemModelSearchWhereInput? RelatedContentArea,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$SearchPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SearchPageWhereInput?>? $_not,
    List<Input$SearchPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get RelatedContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$SearchableStringFilterInput {
  factory Input$SearchableStringFilterInput({
    int? boost,
    String? contains,
    String? eq,
    bool? exist,
    bool? fuzzy,
    List<String?>? $in,
    String? like,
    String? match,
    String? notEq,
    List<String?>? notIn,
    String? startsWith,
    List<Enum$SynonymSlot?>? synonyms,
  }) =>
      Input$SearchableStringFilterInput._({
        if (boost != null) r'boost': boost,
        if (contains != null) r'contains': contains,
        if (eq != null) r'eq': eq,
        if (exist != null) r'exist': exist,
        if (fuzzy != null) r'fuzzy': fuzzy,
        if ($in != null) r'in': $in,
        if (like != null) r'like': like,
        if (match != null) r'match': match,
        if (notEq != null) r'notEq': notEq,
        if (notIn != null) r'notIn': notIn,
        if (startsWith != null) r'startsWith': startsWith,
        if (synonyms != null) r'synonyms': synonyms,
      });

  Input$SearchableStringFilterInput._(this._$data);

  factory Input$SearchableStringFilterInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('boost')) {
      final l$boost = data['boost'];
      result$data['boost'] = (l$boost as int?);
    }
    if (data.containsKey('contains')) {
      final l$contains = data['contains'];
      result$data['contains'] = (l$contains as String?);
    }
    if (data.containsKey('eq')) {
      final l$eq = data['eq'];
      result$data['eq'] = (l$eq as String?);
    }
    if (data.containsKey('exist')) {
      final l$exist = data['exist'];
      result$data['exist'] = (l$exist as bool?);
    }
    if (data.containsKey('fuzzy')) {
      final l$fuzzy = data['fuzzy'];
      result$data['fuzzy'] = (l$fuzzy as bool?);
    }
    if (data.containsKey('in')) {
      final l$$in = data['in'];
      result$data['in'] =
          (l$$in as List<dynamic>?)?.map((e) => (e as String?)).toList();
    }
    if (data.containsKey('like')) {
      final l$like = data['like'];
      result$data['like'] = (l$like as String?);
    }
    if (data.containsKey('match')) {
      final l$match = data['match'];
      result$data['match'] = (l$match as String?);
    }
    if (data.containsKey('notEq')) {
      final l$notEq = data['notEq'];
      result$data['notEq'] = (l$notEq as String?);
    }
    if (data.containsKey('notIn')) {
      final l$notIn = data['notIn'];
      result$data['notIn'] =
          (l$notIn as List<dynamic>?)?.map((e) => (e as String?)).toList();
    }
    if (data.containsKey('startsWith')) {
      final l$startsWith = data['startsWith'];
      result$data['startsWith'] = (l$startsWith as String?);
    }
    if (data.containsKey('synonyms')) {
      final l$synonyms = data['synonyms'];
      result$data['synonyms'] = (l$synonyms as List<dynamic>?)
          ?.map((e) =>
              e == null ? null : fromJson$Enum$SynonymSlot((e as String)))
          .toList();
    }
    return Input$SearchableStringFilterInput._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get boost => (_$data['boost'] as int?);

  String? get contains => (_$data['contains'] as String?);

  String? get eq => (_$data['eq'] as String?);

  bool? get exist => (_$data['exist'] as bool?);

  bool? get fuzzy => (_$data['fuzzy'] as bool?);

  List<String?>? get $in => (_$data['in'] as List<String?>?);

  String? get like => (_$data['like'] as String?);

  String? get match => (_$data['match'] as String?);

  String? get notEq => (_$data['notEq'] as String?);

  List<String?>? get notIn => (_$data['notIn'] as List<String?>?);

  String? get startsWith => (_$data['startsWith'] as String?);

  List<Enum$SynonymSlot?>? get synonyms =>
      (_$data['synonyms'] as List<Enum$SynonymSlot?>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('boost')) {
      final l$boost = boost;
      result$data['boost'] = l$boost;
    }
    if (_$data.containsKey('contains')) {
      final l$contains = contains;
      result$data['contains'] = l$contains;
    }
    if (_$data.containsKey('eq')) {
      final l$eq = eq;
      result$data['eq'] = l$eq;
    }
    if (_$data.containsKey('exist')) {
      final l$exist = exist;
      result$data['exist'] = l$exist;
    }
    if (_$data.containsKey('fuzzy')) {
      final l$fuzzy = fuzzy;
      result$data['fuzzy'] = l$fuzzy;
    }
    if (_$data.containsKey('in')) {
      final l$$in = $in;
      result$data['in'] = l$$in?.map((e) => e).toList();
    }
    if (_$data.containsKey('like')) {
      final l$like = like;
      result$data['like'] = l$like;
    }
    if (_$data.containsKey('match')) {
      final l$match = match;
      result$data['match'] = l$match;
    }
    if (_$data.containsKey('notEq')) {
      final l$notEq = notEq;
      result$data['notEq'] = l$notEq;
    }
    if (_$data.containsKey('notIn')) {
      final l$notIn = notIn;
      result$data['notIn'] = l$notIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('startsWith')) {
      final l$startsWith = startsWith;
      result$data['startsWith'] = l$startsWith;
    }
    if (_$data.containsKey('synonyms')) {
      final l$synonyms = synonyms;
      result$data['synonyms'] = l$synonyms
          ?.map((e) => e == null ? null : toJson$Enum$SynonymSlot(e))
          .toList();
    }
    return result$data;
  }

  CopyWith$Input$SearchableStringFilterInput<Input$SearchableStringFilterInput>
      get copyWith => CopyWith$Input$SearchableStringFilterInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SearchableStringFilterInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$boost = boost;
    final lOther$boost = other.boost;
    if (_$data.containsKey('boost') != other._$data.containsKey('boost')) {
      return false;
    }
    if (l$boost != lOther$boost) {
      return false;
    }
    final l$contains = contains;
    final lOther$contains = other.contains;
    if (_$data.containsKey('contains') !=
        other._$data.containsKey('contains')) {
      return false;
    }
    if (l$contains != lOther$contains) {
      return false;
    }
    final l$eq = eq;
    final lOther$eq = other.eq;
    if (_$data.containsKey('eq') != other._$data.containsKey('eq')) {
      return false;
    }
    if (l$eq != lOther$eq) {
      return false;
    }
    final l$exist = exist;
    final lOther$exist = other.exist;
    if (_$data.containsKey('exist') != other._$data.containsKey('exist')) {
      return false;
    }
    if (l$exist != lOther$exist) {
      return false;
    }
    final l$fuzzy = fuzzy;
    final lOther$fuzzy = other.fuzzy;
    if (_$data.containsKey('fuzzy') != other._$data.containsKey('fuzzy')) {
      return false;
    }
    if (l$fuzzy != lOther$fuzzy) {
      return false;
    }
    final l$$in = $in;
    final lOther$$in = other.$in;
    if (_$data.containsKey('in') != other._$data.containsKey('in')) {
      return false;
    }
    if (l$$in != null && lOther$$in != null) {
      if (l$$in.length != lOther$$in.length) {
        return false;
      }
      for (int i = 0; i < l$$in.length; i++) {
        final l$$in$entry = l$$in[i];
        final lOther$$in$entry = lOther$$in[i];
        if (l$$in$entry != lOther$$in$entry) {
          return false;
        }
      }
    } else if (l$$in != lOther$$in) {
      return false;
    }
    final l$like = like;
    final lOther$like = other.like;
    if (_$data.containsKey('like') != other._$data.containsKey('like')) {
      return false;
    }
    if (l$like != lOther$like) {
      return false;
    }
    final l$match = match;
    final lOther$match = other.match;
    if (_$data.containsKey('match') != other._$data.containsKey('match')) {
      return false;
    }
    if (l$match != lOther$match) {
      return false;
    }
    final l$notEq = notEq;
    final lOther$notEq = other.notEq;
    if (_$data.containsKey('notEq') != other._$data.containsKey('notEq')) {
      return false;
    }
    if (l$notEq != lOther$notEq) {
      return false;
    }
    final l$notIn = notIn;
    final lOther$notIn = other.notIn;
    if (_$data.containsKey('notIn') != other._$data.containsKey('notIn')) {
      return false;
    }
    if (l$notIn != null && lOther$notIn != null) {
      if (l$notIn.length != lOther$notIn.length) {
        return false;
      }
      for (int i = 0; i < l$notIn.length; i++) {
        final l$notIn$entry = l$notIn[i];
        final lOther$notIn$entry = lOther$notIn[i];
        if (l$notIn$entry != lOther$notIn$entry) {
          return false;
        }
      }
    } else if (l$notIn != lOther$notIn) {
      return false;
    }
    final l$startsWith = startsWith;
    final lOther$startsWith = other.startsWith;
    if (_$data.containsKey('startsWith') !=
        other._$data.containsKey('startsWith')) {
      return false;
    }
    if (l$startsWith != lOther$startsWith) {
      return false;
    }
    final l$synonyms = synonyms;
    final lOther$synonyms = other.synonyms;
    if (_$data.containsKey('synonyms') !=
        other._$data.containsKey('synonyms')) {
      return false;
    }
    if (l$synonyms != null && lOther$synonyms != null) {
      if (l$synonyms.length != lOther$synonyms.length) {
        return false;
      }
      for (int i = 0; i < l$synonyms.length; i++) {
        final l$synonyms$entry = l$synonyms[i];
        final lOther$synonyms$entry = lOther$synonyms[i];
        if (l$synonyms$entry != lOther$synonyms$entry) {
          return false;
        }
      }
    } else if (l$synonyms != lOther$synonyms) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$boost = boost;
    final l$contains = contains;
    final l$eq = eq;
    final l$exist = exist;
    final l$fuzzy = fuzzy;
    final l$$in = $in;
    final l$like = like;
    final l$match = match;
    final l$notEq = notEq;
    final l$notIn = notIn;
    final l$startsWith = startsWith;
    final l$synonyms = synonyms;
    return Object.hashAll([
      _$data.containsKey('boost') ? l$boost : const {},
      _$data.containsKey('contains') ? l$contains : const {},
      _$data.containsKey('eq') ? l$eq : const {},
      _$data.containsKey('exist') ? l$exist : const {},
      _$data.containsKey('fuzzy') ? l$fuzzy : const {},
      _$data.containsKey('in')
          ? l$$in == null
              ? null
              : Object.hashAll(l$$in.map((v) => v))
          : const {},
      _$data.containsKey('like') ? l$like : const {},
      _$data.containsKey('match') ? l$match : const {},
      _$data.containsKey('notEq') ? l$notEq : const {},
      _$data.containsKey('notIn')
          ? l$notIn == null
              ? null
              : Object.hashAll(l$notIn.map((v) => v))
          : const {},
      _$data.containsKey('startsWith') ? l$startsWith : const {},
      _$data.containsKey('synonyms')
          ? l$synonyms == null
              ? null
              : Object.hashAll(l$synonyms.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SearchableStringFilterInput<TRes> {
  factory CopyWith$Input$SearchableStringFilterInput(
    Input$SearchableStringFilterInput instance,
    TRes Function(Input$SearchableStringFilterInput) then,
  ) = _CopyWithImpl$Input$SearchableStringFilterInput;

  factory CopyWith$Input$SearchableStringFilterInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SearchableStringFilterInput;

  TRes call({
    int? boost,
    String? contains,
    String? eq,
    bool? exist,
    bool? fuzzy,
    List<String?>? $in,
    String? like,
    String? match,
    String? notEq,
    List<String?>? notIn,
    String? startsWith,
    List<Enum$SynonymSlot?>? synonyms,
  });
}

class _CopyWithImpl$Input$SearchableStringFilterInput<TRes>
    implements CopyWith$Input$SearchableStringFilterInput<TRes> {
  _CopyWithImpl$Input$SearchableStringFilterInput(
    this._instance,
    this._then,
  );

  final Input$SearchableStringFilterInput _instance;

  final TRes Function(Input$SearchableStringFilterInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? boost = _undefined,
    Object? contains = _undefined,
    Object? eq = _undefined,
    Object? exist = _undefined,
    Object? fuzzy = _undefined,
    Object? $in = _undefined,
    Object? like = _undefined,
    Object? match = _undefined,
    Object? notEq = _undefined,
    Object? notIn = _undefined,
    Object? startsWith = _undefined,
    Object? synonyms = _undefined,
  }) =>
      _then(Input$SearchableStringFilterInput._({
        ..._instance._$data,
        if (boost != _undefined) 'boost': (boost as int?),
        if (contains != _undefined) 'contains': (contains as String?),
        if (eq != _undefined) 'eq': (eq as String?),
        if (exist != _undefined) 'exist': (exist as bool?),
        if (fuzzy != _undefined) 'fuzzy': (fuzzy as bool?),
        if ($in != _undefined) 'in': ($in as List<String?>?),
        if (like != _undefined) 'like': (like as String?),
        if (match != _undefined) 'match': (match as String?),
        if (notEq != _undefined) 'notEq': (notEq as String?),
        if (notIn != _undefined) 'notIn': (notIn as List<String?>?),
        if (startsWith != _undefined) 'startsWith': (startsWith as String?),
        if (synonyms != _undefined)
          'synonyms': (synonyms as List<Enum$SynonymSlot?>?),
      }));
}

class _CopyWithStubImpl$Input$SearchableStringFilterInput<TRes>
    implements CopyWith$Input$SearchableStringFilterInput<TRes> {
  _CopyWithStubImpl$Input$SearchableStringFilterInput(this._res);

  TRes _res;

  call({
    int? boost,
    String? contains,
    String? eq,
    bool? exist,
    bool? fuzzy,
    List<String?>? $in,
    String? like,
    String? match,
    String? notEq,
    List<String?>? notIn,
    String? startsWith,
    List<Enum$SynonymSlot?>? synonyms,
  }) =>
      _res;
}

class Input$SiteDefinitionLanguageModelOrderByInput {
  factory Input$SiteDefinitionLanguageModelOrderByInput({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? IsMasterLanguage,
    Enum$OrderBy? Name,
    Enum$OrderBy? Url,
    Enum$OrderBy? UrlSegment,
  }) =>
      Input$SiteDefinitionLanguageModelOrderByInput._({
        if (DisplayName != null) r'DisplayName': DisplayName,
        if (IsMasterLanguage != null) r'IsMasterLanguage': IsMasterLanguage,
        if (Name != null) r'Name': Name,
        if (Url != null) r'Url': Url,
        if (UrlSegment != null) r'UrlSegment': UrlSegment,
      });

  Input$SiteDefinitionLanguageModelOrderByInput._(this._$data);

  factory Input$SiteDefinitionLanguageModelOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('DisplayName')) {
      final l$DisplayName = data['DisplayName'];
      result$data['DisplayName'] = l$DisplayName == null
          ? null
          : fromJson$Enum$OrderBy((l$DisplayName as String));
    }
    if (data.containsKey('IsMasterLanguage')) {
      final l$IsMasterLanguage = data['IsMasterLanguage'];
      result$data['IsMasterLanguage'] = l$IsMasterLanguage == null
          ? null
          : fromJson$Enum$OrderBy((l$IsMasterLanguage as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('UrlSegment')) {
      final l$UrlSegment = data['UrlSegment'];
      result$data['UrlSegment'] = l$UrlSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$UrlSegment as String));
    }
    return Input$SiteDefinitionLanguageModelOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get DisplayName => (_$data['DisplayName'] as Enum$OrderBy?);

  Enum$OrderBy? get IsMasterLanguage =>
      (_$data['IsMasterLanguage'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get UrlSegment => (_$data['UrlSegment'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('DisplayName')) {
      final l$DisplayName = DisplayName;
      result$data['DisplayName'] =
          l$DisplayName == null ? null : toJson$Enum$OrderBy(l$DisplayName);
    }
    if (_$data.containsKey('IsMasterLanguage')) {
      final l$IsMasterLanguage = IsMasterLanguage;
      result$data['IsMasterLanguage'] = l$IsMasterLanguage == null
          ? null
          : toJson$Enum$OrderBy(l$IsMasterLanguage);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('UrlSegment')) {
      final l$UrlSegment = UrlSegment;
      result$data['UrlSegment'] =
          l$UrlSegment == null ? null : toJson$Enum$OrderBy(l$UrlSegment);
    }
    return result$data;
  }

  CopyWith$Input$SiteDefinitionLanguageModelOrderByInput<
          Input$SiteDefinitionLanguageModelOrderByInput>
      get copyWith => CopyWith$Input$SiteDefinitionLanguageModelOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SiteDefinitionLanguageModelOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$DisplayName = DisplayName;
    final lOther$DisplayName = other.DisplayName;
    if (_$data.containsKey('DisplayName') !=
        other._$data.containsKey('DisplayName')) {
      return false;
    }
    if (l$DisplayName != lOther$DisplayName) {
      return false;
    }
    final l$IsMasterLanguage = IsMasterLanguage;
    final lOther$IsMasterLanguage = other.IsMasterLanguage;
    if (_$data.containsKey('IsMasterLanguage') !=
        other._$data.containsKey('IsMasterLanguage')) {
      return false;
    }
    if (l$IsMasterLanguage != lOther$IsMasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$UrlSegment = UrlSegment;
    final lOther$UrlSegment = other.UrlSegment;
    if (_$data.containsKey('UrlSegment') !=
        other._$data.containsKey('UrlSegment')) {
      return false;
    }
    if (l$UrlSegment != lOther$UrlSegment) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$DisplayName = DisplayName;
    final l$IsMasterLanguage = IsMasterLanguage;
    final l$Name = Name;
    final l$Url = Url;
    final l$UrlSegment = UrlSegment;
    return Object.hashAll([
      _$data.containsKey('DisplayName') ? l$DisplayName : const {},
      _$data.containsKey('IsMasterLanguage') ? l$IsMasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('UrlSegment') ? l$UrlSegment : const {},
    ]);
  }
}

abstract class CopyWith$Input$SiteDefinitionLanguageModelOrderByInput<TRes> {
  factory CopyWith$Input$SiteDefinitionLanguageModelOrderByInput(
    Input$SiteDefinitionLanguageModelOrderByInput instance,
    TRes Function(Input$SiteDefinitionLanguageModelOrderByInput) then,
  ) = _CopyWithImpl$Input$SiteDefinitionLanguageModelOrderByInput;

  factory CopyWith$Input$SiteDefinitionLanguageModelOrderByInput.stub(
          TRes res) =
      _CopyWithStubImpl$Input$SiteDefinitionLanguageModelOrderByInput;

  TRes call({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? IsMasterLanguage,
    Enum$OrderBy? Name,
    Enum$OrderBy? Url,
    Enum$OrderBy? UrlSegment,
  });
}

class _CopyWithImpl$Input$SiteDefinitionLanguageModelOrderByInput<TRes>
    implements CopyWith$Input$SiteDefinitionLanguageModelOrderByInput<TRes> {
  _CopyWithImpl$Input$SiteDefinitionLanguageModelOrderByInput(
    this._instance,
    this._then,
  );

  final Input$SiteDefinitionLanguageModelOrderByInput _instance;

  final TRes Function(Input$SiteDefinitionLanguageModelOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? DisplayName = _undefined,
    Object? IsMasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? Url = _undefined,
    Object? UrlSegment = _undefined,
  }) =>
      _then(Input$SiteDefinitionLanguageModelOrderByInput._({
        ..._instance._$data,
        if (DisplayName != _undefined)
          'DisplayName': (DisplayName as Enum$OrderBy?),
        if (IsMasterLanguage != _undefined)
          'IsMasterLanguage': (IsMasterLanguage as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if (UrlSegment != _undefined)
          'UrlSegment': (UrlSegment as Enum$OrderBy?),
      }));
}

class _CopyWithStubImpl$Input$SiteDefinitionLanguageModelOrderByInput<TRes>
    implements CopyWith$Input$SiteDefinitionLanguageModelOrderByInput<TRes> {
  _CopyWithStubImpl$Input$SiteDefinitionLanguageModelOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? DisplayName,
    Enum$OrderBy? IsMasterLanguage,
    Enum$OrderBy? Name,
    Enum$OrderBy? Url,
    Enum$OrderBy? UrlSegment,
  }) =>
      _res;
}

class Input$SiteDefinitionLanguageModelWhereInput {
  factory Input$SiteDefinitionLanguageModelWhereInput({
    Input$StringFilterInput? DisplayName,
    Input$BoolFilterInput? IsMasterLanguage,
    Input$StringFilterInput? Name,
    Input$StringFilterInput? Url,
    Input$StringFilterInput? UrlSegment,
  }) =>
      Input$SiteDefinitionLanguageModelWhereInput._({
        if (DisplayName != null) r'DisplayName': DisplayName,
        if (IsMasterLanguage != null) r'IsMasterLanguage': IsMasterLanguage,
        if (Name != null) r'Name': Name,
        if (Url != null) r'Url': Url,
        if (UrlSegment != null) r'UrlSegment': UrlSegment,
      });

  Input$SiteDefinitionLanguageModelWhereInput._(this._$data);

  factory Input$SiteDefinitionLanguageModelWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('DisplayName')) {
      final l$DisplayName = data['DisplayName'];
      result$data['DisplayName'] = l$DisplayName == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$DisplayName as Map<String, dynamic>));
    }
    if (data.containsKey('IsMasterLanguage')) {
      final l$IsMasterLanguage = data['IsMasterLanguage'];
      result$data['IsMasterLanguage'] = l$IsMasterLanguage == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsMasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$StringFilterInput.fromJson((l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('UrlSegment')) {
      final l$UrlSegment = data['UrlSegment'];
      result$data['UrlSegment'] = l$UrlSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$UrlSegment as Map<String, dynamic>));
    }
    return Input$SiteDefinitionLanguageModelWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get DisplayName =>
      (_$data['DisplayName'] as Input$StringFilterInput?);

  Input$BoolFilterInput? get IsMasterLanguage =>
      (_$data['IsMasterLanguage'] as Input$BoolFilterInput?);

  Input$StringFilterInput? get Name =>
      (_$data['Name'] as Input$StringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  Input$StringFilterInput? get UrlSegment =>
      (_$data['UrlSegment'] as Input$StringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('DisplayName')) {
      final l$DisplayName = DisplayName;
      result$data['DisplayName'] = l$DisplayName?.toJson();
    }
    if (_$data.containsKey('IsMasterLanguage')) {
      final l$IsMasterLanguage = IsMasterLanguage;
      result$data['IsMasterLanguage'] = l$IsMasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('UrlSegment')) {
      final l$UrlSegment = UrlSegment;
      result$data['UrlSegment'] = l$UrlSegment?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SiteDefinitionLanguageModelWhereInput<
          Input$SiteDefinitionLanguageModelWhereInput>
      get copyWith => CopyWith$Input$SiteDefinitionLanguageModelWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SiteDefinitionLanguageModelWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$DisplayName = DisplayName;
    final lOther$DisplayName = other.DisplayName;
    if (_$data.containsKey('DisplayName') !=
        other._$data.containsKey('DisplayName')) {
      return false;
    }
    if (l$DisplayName != lOther$DisplayName) {
      return false;
    }
    final l$IsMasterLanguage = IsMasterLanguage;
    final lOther$IsMasterLanguage = other.IsMasterLanguage;
    if (_$data.containsKey('IsMasterLanguage') !=
        other._$data.containsKey('IsMasterLanguage')) {
      return false;
    }
    if (l$IsMasterLanguage != lOther$IsMasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$UrlSegment = UrlSegment;
    final lOther$UrlSegment = other.UrlSegment;
    if (_$data.containsKey('UrlSegment') !=
        other._$data.containsKey('UrlSegment')) {
      return false;
    }
    if (l$UrlSegment != lOther$UrlSegment) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$DisplayName = DisplayName;
    final l$IsMasterLanguage = IsMasterLanguage;
    final l$Name = Name;
    final l$Url = Url;
    final l$UrlSegment = UrlSegment;
    return Object.hashAll([
      _$data.containsKey('DisplayName') ? l$DisplayName : const {},
      _$data.containsKey('IsMasterLanguage') ? l$IsMasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('UrlSegment') ? l$UrlSegment : const {},
    ]);
  }
}

abstract class CopyWith$Input$SiteDefinitionLanguageModelWhereInput<TRes> {
  factory CopyWith$Input$SiteDefinitionLanguageModelWhereInput(
    Input$SiteDefinitionLanguageModelWhereInput instance,
    TRes Function(Input$SiteDefinitionLanguageModelWhereInput) then,
  ) = _CopyWithImpl$Input$SiteDefinitionLanguageModelWhereInput;

  factory CopyWith$Input$SiteDefinitionLanguageModelWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SiteDefinitionLanguageModelWhereInput;

  TRes call({
    Input$StringFilterInput? DisplayName,
    Input$BoolFilterInput? IsMasterLanguage,
    Input$StringFilterInput? Name,
    Input$StringFilterInput? Url,
    Input$StringFilterInput? UrlSegment,
  });
  CopyWith$Input$StringFilterInput<TRes> get DisplayName;
  CopyWith$Input$BoolFilterInput<TRes> get IsMasterLanguage;
  CopyWith$Input$StringFilterInput<TRes> get Name;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  CopyWith$Input$StringFilterInput<TRes> get UrlSegment;
}

class _CopyWithImpl$Input$SiteDefinitionLanguageModelWhereInput<TRes>
    implements CopyWith$Input$SiteDefinitionLanguageModelWhereInput<TRes> {
  _CopyWithImpl$Input$SiteDefinitionLanguageModelWhereInput(
    this._instance,
    this._then,
  );

  final Input$SiteDefinitionLanguageModelWhereInput _instance;

  final TRes Function(Input$SiteDefinitionLanguageModelWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? DisplayName = _undefined,
    Object? IsMasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? Url = _undefined,
    Object? UrlSegment = _undefined,
  }) =>
      _then(Input$SiteDefinitionLanguageModelWhereInput._({
        ..._instance._$data,
        if (DisplayName != _undefined)
          'DisplayName': (DisplayName as Input$StringFilterInput?),
        if (IsMasterLanguage != _undefined)
          'IsMasterLanguage': (IsMasterLanguage as Input$BoolFilterInput?),
        if (Name != _undefined) 'Name': (Name as Input$StringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if (UrlSegment != _undefined)
          'UrlSegment': (UrlSegment as Input$StringFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get DisplayName {
    final local$DisplayName = _instance.DisplayName;
    return local$DisplayName == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$DisplayName, (e) => call(DisplayName: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsMasterLanguage {
    final local$IsMasterLanguage = _instance.IsMasterLanguage;
    return local$IsMasterLanguage == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsMasterLanguage, (e) => call(IsMasterLanguage: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get UrlSegment {
    final local$UrlSegment = _instance.UrlSegment;
    return local$UrlSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$UrlSegment, (e) => call(UrlSegment: e));
  }
}

class _CopyWithStubImpl$Input$SiteDefinitionLanguageModelWhereInput<TRes>
    implements CopyWith$Input$SiteDefinitionLanguageModelWhereInput<TRes> {
  _CopyWithStubImpl$Input$SiteDefinitionLanguageModelWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? DisplayName,
    Input$BoolFilterInput? IsMasterLanguage,
    Input$StringFilterInput? Name,
    Input$StringFilterInput? Url,
    Input$StringFilterInput? UrlSegment,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get DisplayName =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsMasterLanguage =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Name =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get UrlSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);
}

class Input$SiteDefinitionOrderByInput {
  factory Input$SiteDefinitionOrderByInput({
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Input$ContentRootsModelOrderByInput? ContentRoots,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? EditLocation,
    Input$HostDefinitionModelOrderByInput? Hosts,
    Enum$OrderBy? Id,
    Input$SiteDefinitionLanguageModelOrderByInput? Languages,
    Enum$OrderBy? Name,
    Enum$OrderBy? Status,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  }) =>
      Input$SiteDefinitionOrderByInput._({
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentRoots != null) r'ContentRoots': ContentRoots,
        if (ContentType != null) r'ContentType': ContentType,
        if (EditLocation != null) r'EditLocation': EditLocation,
        if (Hosts != null) r'Hosts': Hosts,
        if (Id != null) r'Id': Id,
        if (Languages != null) r'Languages': Languages,
        if (Name != null) r'Name': Name,
        if (Status != null) r'Status': Status,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
      });

  Input$SiteDefinitionOrderByInput._(this._$data);

  factory Input$SiteDefinitionOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentRoots')) {
      final l$ContentRoots = data['ContentRoots'];
      result$data['ContentRoots'] = l$ContentRoots == null
          ? null
          : Input$ContentRootsModelOrderByInput.fromJson(
              (l$ContentRoots as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('EditLocation')) {
      final l$EditLocation = data['EditLocation'];
      result$data['EditLocation'] = l$EditLocation == null
          ? null
          : fromJson$Enum$OrderBy((l$EditLocation as String));
    }
    if (data.containsKey('Hosts')) {
      final l$Hosts = data['Hosts'];
      result$data['Hosts'] = l$Hosts == null
          ? null
          : Input$HostDefinitionModelOrderByInput.fromJson(
              (l$Hosts as Map<String, dynamic>));
    }
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] =
          l$Id == null ? null : fromJson$Enum$OrderBy((l$Id as String));
    }
    if (data.containsKey('Languages')) {
      final l$Languages = data['Languages'];
      result$data['Languages'] = l$Languages == null
          ? null
          : Input$SiteDefinitionLanguageModelOrderByInput.fromJson(
              (l$Languages as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    return Input$SiteDefinitionOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentRootsModelOrderByInput? get ContentRoots =>
      (_$data['ContentRoots'] as Input$ContentRootsModelOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get EditLocation => (_$data['EditLocation'] as Enum$OrderBy?);

  Input$HostDefinitionModelOrderByInput? get Hosts =>
      (_$data['Hosts'] as Input$HostDefinitionModelOrderByInput?);

  Enum$OrderBy? get Id => (_$data['Id'] as Enum$OrderBy?);

  Input$SiteDefinitionLanguageModelOrderByInput? get Languages =>
      (_$data['Languages'] as Input$SiteDefinitionLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentRoots')) {
      final l$ContentRoots = ContentRoots;
      result$data['ContentRoots'] = l$ContentRoots?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('EditLocation')) {
      final l$EditLocation = EditLocation;
      result$data['EditLocation'] =
          l$EditLocation == null ? null : toJson$Enum$OrderBy(l$EditLocation);
    }
    if (_$data.containsKey('Hosts')) {
      final l$Hosts = Hosts;
      result$data['Hosts'] = l$Hosts?.toJson();
    }
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id == null ? null : toJson$Enum$OrderBy(l$Id);
    }
    if (_$data.containsKey('Languages')) {
      final l$Languages = Languages;
      result$data['Languages'] = l$Languages?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    return result$data;
  }

  CopyWith$Input$SiteDefinitionOrderByInput<Input$SiteDefinitionOrderByInput>
      get copyWith => CopyWith$Input$SiteDefinitionOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SiteDefinitionOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentRoots = ContentRoots;
    final lOther$ContentRoots = other.ContentRoots;
    if (_$data.containsKey('ContentRoots') !=
        other._$data.containsKey('ContentRoots')) {
      return false;
    }
    if (l$ContentRoots != lOther$ContentRoots) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$EditLocation = EditLocation;
    final lOther$EditLocation = other.EditLocation;
    if (_$data.containsKey('EditLocation') !=
        other._$data.containsKey('EditLocation')) {
      return false;
    }
    if (l$EditLocation != lOther$EditLocation) {
      return false;
    }
    final l$Hosts = Hosts;
    final lOther$Hosts = other.Hosts;
    if (_$data.containsKey('Hosts') != other._$data.containsKey('Hosts')) {
      return false;
    }
    if (l$Hosts != lOther$Hosts) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Languages = Languages;
    final lOther$Languages = other.Languages;
    if (_$data.containsKey('Languages') !=
        other._$data.containsKey('Languages')) {
      return false;
    }
    if (l$Languages != lOther$Languages) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentLink = ContentLink;
    final l$ContentRoots = ContentRoots;
    final l$ContentType = ContentType;
    final l$EditLocation = EditLocation;
    final l$Hosts = Hosts;
    final l$Id = Id;
    final l$Languages = Languages;
    final l$Name = Name;
    final l$Status = Status;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    return Object.hashAll([
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentRoots') ? l$ContentRoots : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('EditLocation') ? l$EditLocation : const {},
      _$data.containsKey('Hosts') ? l$Hosts : const {},
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Languages') ? l$Languages : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
    ]);
  }
}

abstract class CopyWith$Input$SiteDefinitionOrderByInput<TRes> {
  factory CopyWith$Input$SiteDefinitionOrderByInput(
    Input$SiteDefinitionOrderByInput instance,
    TRes Function(Input$SiteDefinitionOrderByInput) then,
  ) = _CopyWithImpl$Input$SiteDefinitionOrderByInput;

  factory CopyWith$Input$SiteDefinitionOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SiteDefinitionOrderByInput;

  TRes call({
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Input$ContentRootsModelOrderByInput? ContentRoots,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? EditLocation,
    Input$HostDefinitionModelOrderByInput? Hosts,
    Enum$OrderBy? Id,
    Input$SiteDefinitionLanguageModelOrderByInput? Languages,
    Enum$OrderBy? Name,
    Enum$OrderBy? Status,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  });
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentRootsModelOrderByInput<TRes> get ContentRoots;
  CopyWith$Input$HostDefinitionModelOrderByInput<TRes> get Hosts;
  CopyWith$Input$SiteDefinitionLanguageModelOrderByInput<TRes> get Languages;
}

class _CopyWithImpl$Input$SiteDefinitionOrderByInput<TRes>
    implements CopyWith$Input$SiteDefinitionOrderByInput<TRes> {
  _CopyWithImpl$Input$SiteDefinitionOrderByInput(
    this._instance,
    this._then,
  );

  final Input$SiteDefinitionOrderByInput _instance;

  final TRes Function(Input$SiteDefinitionOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? ContentLink = _undefined,
    Object? ContentRoots = _undefined,
    Object? ContentType = _undefined,
    Object? EditLocation = _undefined,
    Object? Hosts = _undefined,
    Object? Id = _undefined,
    Object? Languages = _undefined,
    Object? Name = _undefined,
    Object? Status = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
  }) =>
      _then(Input$SiteDefinitionOrderByInput._({
        ..._instance._$data,
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentRoots != _undefined)
          'ContentRoots':
              (ContentRoots as Input$ContentRootsModelOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (EditLocation != _undefined)
          'EditLocation': (EditLocation as Enum$OrderBy?),
        if (Hosts != _undefined)
          'Hosts': (Hosts as Input$HostDefinitionModelOrderByInput?),
        if (Id != _undefined) 'Id': (Id as Enum$OrderBy?),
        if (Languages != _undefined)
          'Languages':
              (Languages as Input$SiteDefinitionLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
      }));

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentRootsModelOrderByInput<TRes> get ContentRoots {
    final local$ContentRoots = _instance.ContentRoots;
    return local$ContentRoots == null
        ? CopyWith$Input$ContentRootsModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentRootsModelOrderByInput(
            local$ContentRoots, (e) => call(ContentRoots: e));
  }

  CopyWith$Input$HostDefinitionModelOrderByInput<TRes> get Hosts {
    final local$Hosts = _instance.Hosts;
    return local$Hosts == null
        ? CopyWith$Input$HostDefinitionModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$HostDefinitionModelOrderByInput(
            local$Hosts, (e) => call(Hosts: e));
  }

  CopyWith$Input$SiteDefinitionLanguageModelOrderByInput<TRes> get Languages {
    final local$Languages = _instance.Languages;
    return local$Languages == null
        ? CopyWith$Input$SiteDefinitionLanguageModelOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$SiteDefinitionLanguageModelOrderByInput(
            local$Languages, (e) => call(Languages: e));
  }
}

class _CopyWithStubImpl$Input$SiteDefinitionOrderByInput<TRes>
    implements CopyWith$Input$SiteDefinitionOrderByInput<TRes> {
  _CopyWithStubImpl$Input$SiteDefinitionOrderByInput(this._res);

  TRes _res;

  call({
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Input$ContentRootsModelOrderByInput? ContentRoots,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? EditLocation,
    Input$HostDefinitionModelOrderByInput? Hosts,
    Enum$OrderBy? Id,
    Input$SiteDefinitionLanguageModelOrderByInput? Languages,
    Enum$OrderBy? Name,
    Enum$OrderBy? Status,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentRootsModelOrderByInput<TRes> get ContentRoots =>
      CopyWith$Input$ContentRootsModelOrderByInput.stub(_res);

  CopyWith$Input$HostDefinitionModelOrderByInput<TRes> get Hosts =>
      CopyWith$Input$HostDefinitionModelOrderByInput.stub(_res);

  CopyWith$Input$SiteDefinitionLanguageModelOrderByInput<TRes> get Languages =>
      CopyWith$Input$SiteDefinitionLanguageModelOrderByInput.stub(_res);
}

class Input$SiteDefinitionWhereInput {
  factory Input$SiteDefinitionWhereInput({
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$ContentRootsModelWhereInput? ContentRoots,
    Input$StringFilterInput? ContentType,
    Input$StringFilterInput? EditLocation,
    Input$HostDefinitionModelWhereInput? Hosts,
    Input$StringFilterInput? Id,
    Input$SiteDefinitionLanguageModelWhereInput? Languages,
    Input$SearchableStringFilterInput? Name,
    Input$StringFilterInput? Status,
    List<Input$SiteDefinitionWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SiteDefinitionWhereInput?>? $_not,
    List<Input$SiteDefinitionWhereInput?>? $_or,
  }) =>
      Input$SiteDefinitionWhereInput._({
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentRoots != null) r'ContentRoots': ContentRoots,
        if (ContentType != null) r'ContentType': ContentType,
        if (EditLocation != null) r'EditLocation': EditLocation,
        if (Hosts != null) r'Hosts': Hosts,
        if (Id != null) r'Id': Id,
        if (Languages != null) r'Languages': Languages,
        if (Name != null) r'Name': Name,
        if (Status != null) r'Status': Status,
        if ($_and != null) r'_and': $_and,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
      });

  Input$SiteDefinitionWhereInput._(this._$data);

  factory Input$SiteDefinitionWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentRoots')) {
      final l$ContentRoots = data['ContentRoots'];
      result$data['ContentRoots'] = l$ContentRoots == null
          ? null
          : Input$ContentRootsModelWhereInput.fromJson(
              (l$ContentRoots as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('EditLocation')) {
      final l$EditLocation = data['EditLocation'];
      result$data['EditLocation'] = l$EditLocation == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$EditLocation as Map<String, dynamic>));
    }
    if (data.containsKey('Hosts')) {
      final l$Hosts = data['Hosts'];
      result$data['Hosts'] = l$Hosts == null
          ? null
          : Input$HostDefinitionModelWhereInput.fromJson(
              (l$Hosts as Map<String, dynamic>));
    }
    if (data.containsKey('Id')) {
      final l$Id = data['Id'];
      result$data['Id'] = l$Id == null
          ? null
          : Input$StringFilterInput.fromJson((l$Id as Map<String, dynamic>));
    }
    if (data.containsKey('Languages')) {
      final l$Languages = data['Languages'];
      result$data['Languages'] = l$Languages == null
          ? null
          : Input$SiteDefinitionLanguageModelWhereInput.fromJson(
              (l$Languages as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SiteDefinitionWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SiteDefinitionWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SiteDefinitionWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    return Input$SiteDefinitionWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentRootsModelWhereInput? get ContentRoots =>
      (_$data['ContentRoots'] as Input$ContentRootsModelWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$StringFilterInput? get EditLocation =>
      (_$data['EditLocation'] as Input$StringFilterInput?);

  Input$HostDefinitionModelWhereInput? get Hosts =>
      (_$data['Hosts'] as Input$HostDefinitionModelWhereInput?);

  Input$StringFilterInput? get Id => (_$data['Id'] as Input$StringFilterInput?);

  Input$SiteDefinitionLanguageModelWhereInput? get Languages =>
      (_$data['Languages'] as Input$SiteDefinitionLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  List<Input$SiteDefinitionWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$SiteDefinitionWhereInput?>?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$SiteDefinitionWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$SiteDefinitionWhereInput?>?);

  List<Input$SiteDefinitionWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$SiteDefinitionWhereInput?>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentRoots')) {
      final l$ContentRoots = ContentRoots;
      result$data['ContentRoots'] = l$ContentRoots?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('EditLocation')) {
      final l$EditLocation = EditLocation;
      result$data['EditLocation'] = l$EditLocation?.toJson();
    }
    if (_$data.containsKey('Hosts')) {
      final l$Hosts = Hosts;
      result$data['Hosts'] = l$Hosts?.toJson();
    }
    if (_$data.containsKey('Id')) {
      final l$Id = Id;
      result$data['Id'] = l$Id?.toJson();
    }
    if (_$data.containsKey('Languages')) {
      final l$Languages = Languages;
      result$data['Languages'] = l$Languages?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    return result$data;
  }

  CopyWith$Input$SiteDefinitionWhereInput<Input$SiteDefinitionWhereInput>
      get copyWith => CopyWith$Input$SiteDefinitionWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SiteDefinitionWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentRoots = ContentRoots;
    final lOther$ContentRoots = other.ContentRoots;
    if (_$data.containsKey('ContentRoots') !=
        other._$data.containsKey('ContentRoots')) {
      return false;
    }
    if (l$ContentRoots != lOther$ContentRoots) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$EditLocation = EditLocation;
    final lOther$EditLocation = other.EditLocation;
    if (_$data.containsKey('EditLocation') !=
        other._$data.containsKey('EditLocation')) {
      return false;
    }
    if (l$EditLocation != lOther$EditLocation) {
      return false;
    }
    final l$Hosts = Hosts;
    final lOther$Hosts = other.Hosts;
    if (_$data.containsKey('Hosts') != other._$data.containsKey('Hosts')) {
      return false;
    }
    if (l$Hosts != lOther$Hosts) {
      return false;
    }
    final l$Id = Id;
    final lOther$Id = other.Id;
    if (_$data.containsKey('Id') != other._$data.containsKey('Id')) {
      return false;
    }
    if (l$Id != lOther$Id) {
      return false;
    }
    final l$Languages = Languages;
    final lOther$Languages = other.Languages;
    if (_$data.containsKey('Languages') !=
        other._$data.containsKey('Languages')) {
      return false;
    }
    if (l$Languages != lOther$Languages) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$ContentLink = ContentLink;
    final l$ContentRoots = ContentRoots;
    final l$ContentType = ContentType;
    final l$EditLocation = EditLocation;
    final l$Hosts = Hosts;
    final l$Id = Id;
    final l$Languages = Languages;
    final l$Name = Name;
    final l$Status = Status;
    final l$$_and = $_and;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    return Object.hashAll([
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentRoots') ? l$ContentRoots : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('EditLocation') ? l$EditLocation : const {},
      _$data.containsKey('Hosts') ? l$Hosts : const {},
      _$data.containsKey('Id') ? l$Id : const {},
      _$data.containsKey('Languages') ? l$Languages : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$SiteDefinitionWhereInput<TRes> {
  factory CopyWith$Input$SiteDefinitionWhereInput(
    Input$SiteDefinitionWhereInput instance,
    TRes Function(Input$SiteDefinitionWhereInput) then,
  ) = _CopyWithImpl$Input$SiteDefinitionWhereInput;

  factory CopyWith$Input$SiteDefinitionWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SiteDefinitionWhereInput;

  TRes call({
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$ContentRootsModelWhereInput? ContentRoots,
    Input$StringFilterInput? ContentType,
    Input$StringFilterInput? EditLocation,
    Input$HostDefinitionModelWhereInput? Hosts,
    Input$StringFilterInput? Id,
    Input$SiteDefinitionLanguageModelWhereInput? Languages,
    Input$SearchableStringFilterInput? Name,
    Input$StringFilterInput? Status,
    List<Input$SiteDefinitionWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SiteDefinitionWhereInput?>? $_not,
    List<Input$SiteDefinitionWhereInput?>? $_or,
  });
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$ContentRootsModelWhereInput<TRes> get ContentRoots;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$StringFilterInput<TRes> get EditLocation;
  CopyWith$Input$HostDefinitionModelWhereInput<TRes> get Hosts;
  CopyWith$Input$StringFilterInput<TRes> get Id;
  CopyWith$Input$SiteDefinitionLanguageModelWhereInput<TRes> get Languages;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  TRes $_and(
      Iterable<Input$SiteDefinitionWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SiteDefinitionWhereInput<
                      Input$SiteDefinitionWhereInput>?>?)
          _fn);
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$SiteDefinitionWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SiteDefinitionWhereInput<
                      Input$SiteDefinitionWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$SiteDefinitionWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SiteDefinitionWhereInput<
                      Input$SiteDefinitionWhereInput>?>?)
          _fn);
}

class _CopyWithImpl$Input$SiteDefinitionWhereInput<TRes>
    implements CopyWith$Input$SiteDefinitionWhereInput<TRes> {
  _CopyWithImpl$Input$SiteDefinitionWhereInput(
    this._instance,
    this._then,
  );

  final Input$SiteDefinitionWhereInput _instance;

  final TRes Function(Input$SiteDefinitionWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? ContentLink = _undefined,
    Object? ContentRoots = _undefined,
    Object? ContentType = _undefined,
    Object? EditLocation = _undefined,
    Object? Hosts = _undefined,
    Object? Id = _undefined,
    Object? Languages = _undefined,
    Object? Name = _undefined,
    Object? Status = _undefined,
    Object? $_and = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
  }) =>
      _then(Input$SiteDefinitionWhereInput._({
        ..._instance._$data,
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentRoots != _undefined)
          'ContentRoots': (ContentRoots as Input$ContentRootsModelWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (EditLocation != _undefined)
          'EditLocation': (EditLocation as Input$StringFilterInput?),
        if (Hosts != _undefined)
          'Hosts': (Hosts as Input$HostDefinitionModelWhereInput?),
        if (Id != _undefined) 'Id': (Id as Input$StringFilterInput?),
        if (Languages != _undefined)
          'Languages':
              (Languages as Input$SiteDefinitionLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$SiteDefinitionWhereInput?>?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$SiteDefinitionWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$SiteDefinitionWhereInput?>?),
      }));

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentRootsModelWhereInput<TRes> get ContentRoots {
    final local$ContentRoots = _instance.ContentRoots;
    return local$ContentRoots == null
        ? CopyWith$Input$ContentRootsModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentRootsModelWhereInput(
            local$ContentRoots, (e) => call(ContentRoots: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get EditLocation {
    final local$EditLocation = _instance.EditLocation;
    return local$EditLocation == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$EditLocation, (e) => call(EditLocation: e));
  }

  CopyWith$Input$HostDefinitionModelWhereInput<TRes> get Hosts {
    final local$Hosts = _instance.Hosts;
    return local$Hosts == null
        ? CopyWith$Input$HostDefinitionModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$HostDefinitionModelWhereInput(
            local$Hosts, (e) => call(Hosts: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Id {
    final local$Id = _instance.Id;
    return local$Id == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Id, (e) => call(Id: e));
  }

  CopyWith$Input$SiteDefinitionLanguageModelWhereInput<TRes> get Languages {
    final local$Languages = _instance.Languages;
    return local$Languages == null
        ? CopyWith$Input$SiteDefinitionLanguageModelWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$SiteDefinitionLanguageModelWhereInput(
            local$Languages, (e) => call(Languages: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  TRes $_and(
          Iterable<Input$SiteDefinitionWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SiteDefinitionWhereInput<
                          Input$SiteDefinitionWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$SiteDefinitionWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$SiteDefinitionWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SiteDefinitionWhereInput<
                          Input$SiteDefinitionWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$SiteDefinitionWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$SiteDefinitionWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SiteDefinitionWhereInput<
                          Input$SiteDefinitionWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$SiteDefinitionWhereInput(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Input$SiteDefinitionWhereInput<TRes>
    implements CopyWith$Input$SiteDefinitionWhereInput<TRes> {
  _CopyWithStubImpl$Input$SiteDefinitionWhereInput(this._res);

  TRes _res;

  call({
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$ContentRootsModelWhereInput? ContentRoots,
    Input$StringFilterInput? ContentType,
    Input$StringFilterInput? EditLocation,
    Input$HostDefinitionModelWhereInput? Hosts,
    Input$StringFilterInput? Id,
    Input$SiteDefinitionLanguageModelWhereInput? Languages,
    Input$SearchableStringFilterInput? Name,
    Input$StringFilterInput? Status,
    List<Input$SiteDefinitionWhereInput?>? $_and,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SiteDefinitionWhereInput?>? $_not,
    List<Input$SiteDefinitionWhereInput?>? $_or,
  }) =>
      _res;

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentRootsModelWhereInput<TRes> get ContentRoots =>
      CopyWith$Input$ContentRootsModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get EditLocation =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$HostDefinitionModelWhereInput<TRes> get Hosts =>
      CopyWith$Input$HostDefinitionModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Id =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SiteDefinitionLanguageModelWhereInput<TRes> get Languages =>
      CopyWith$Input$SiteDefinitionLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;
}

class Input$SiteLogotypeBlockOrderByInput {
  factory Input$SiteLogotypeBlockOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Title,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$SiteLogotypeBlockOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Title != null) r'Title': Title,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$SiteLogotypeBlockOrderByInput._(this._$data);

  factory Input$SiteLogotypeBlockOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Title')) {
      final l$Title = data['Title'];
      result$data['Title'] =
          l$Title == null ? null : fromJson$Enum$OrderBy((l$Title as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$SiteLogotypeBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Title => (_$data['Title'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Title')) {
      final l$Title = Title;
      result$data['Title'] =
          l$Title == null ? null : toJson$Enum$OrderBy(l$Title);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$SiteLogotypeBlockOrderByInput<
          Input$SiteLogotypeBlockOrderByInput>
      get copyWith => CopyWith$Input$SiteLogotypeBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SiteLogotypeBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Title = Title;
    final lOther$Title = other.Title;
    if (_$data.containsKey('Title') != other._$data.containsKey('Title')) {
      return false;
    }
    if (l$Title != lOther$Title) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Title = Title;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Title') ? l$Title : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$SiteLogotypeBlockOrderByInput<TRes> {
  factory CopyWith$Input$SiteLogotypeBlockOrderByInput(
    Input$SiteLogotypeBlockOrderByInput instance,
    TRes Function(Input$SiteLogotypeBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$SiteLogotypeBlockOrderByInput;

  factory CopyWith$Input$SiteLogotypeBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SiteLogotypeBlockOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Title,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$SiteLogotypeBlockOrderByInput<TRes>
    implements CopyWith$Input$SiteLogotypeBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$SiteLogotypeBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$SiteLogotypeBlockOrderByInput _instance;

  final TRes Function(Input$SiteLogotypeBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Title = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$SiteLogotypeBlockOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Title != _undefined) 'Title': (Title as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$SiteLogotypeBlockOrderByInput<TRes>
    implements CopyWith$Input$SiteLogotypeBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$SiteLogotypeBlockOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Title,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$SiteLogotypeBlockWhereInput {
  factory Input$SiteLogotypeBlockWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? Title,
    Input$StringFilterInput? Url,
    List<Input$SiteLogotypeBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SiteLogotypeBlockWhereInput?>? $_not,
    List<Input$SiteLogotypeBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$SiteLogotypeBlockWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Title != null) r'Title': Title,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$SiteLogotypeBlockWhereInput._(this._$data);

  factory Input$SiteLogotypeBlockWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Title')) {
      final l$Title = data['Title'];
      result$data['Title'] = l$Title == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Title as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SiteLogotypeBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SiteLogotypeBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SiteLogotypeBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$SiteLogotypeBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get Title =>
      (_$data['Title'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$SiteLogotypeBlockWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$SiteLogotypeBlockWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$SiteLogotypeBlockWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$SiteLogotypeBlockWhereInput?>?);

  List<Input$SiteLogotypeBlockWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$SiteLogotypeBlockWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Title')) {
      final l$Title = Title;
      result$data['Title'] = l$Title?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SiteLogotypeBlockWhereInput<Input$SiteLogotypeBlockWhereInput>
      get copyWith => CopyWith$Input$SiteLogotypeBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SiteLogotypeBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Title = Title;
    final lOther$Title = other.Title;
    if (_$data.containsKey('Title') != other._$data.containsKey('Title')) {
      return false;
    }
    if (l$Title != lOther$Title) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Title = Title;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Title') ? l$Title : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$SiteLogotypeBlockWhereInput<TRes> {
  factory CopyWith$Input$SiteLogotypeBlockWhereInput(
    Input$SiteLogotypeBlockWhereInput instance,
    TRes Function(Input$SiteLogotypeBlockWhereInput) then,
  ) = _CopyWithImpl$Input$SiteLogotypeBlockWhereInput;

  factory CopyWith$Input$SiteLogotypeBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SiteLogotypeBlockWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? Title,
    Input$StringFilterInput? Url,
    List<Input$SiteLogotypeBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SiteLogotypeBlockWhereInput?>? $_not,
    List<Input$SiteLogotypeBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Title;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$SiteLogotypeBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SiteLogotypeBlockWhereInput<
                      Input$SiteLogotypeBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$SiteLogotypeBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SiteLogotypeBlockWhereInput<
                      Input$SiteLogotypeBlockWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$SiteLogotypeBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SiteLogotypeBlockWhereInput<
                      Input$SiteLogotypeBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$SiteLogotypeBlockWhereInput<TRes>
    implements CopyWith$Input$SiteLogotypeBlockWhereInput<TRes> {
  _CopyWithImpl$Input$SiteLogotypeBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$SiteLogotypeBlockWhereInput _instance;

  final TRes Function(Input$SiteLogotypeBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Title = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$SiteLogotypeBlockWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Title != _undefined)
          'Title': (Title as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$SiteLogotypeBlockWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$SiteLogotypeBlockWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$SiteLogotypeBlockWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Title {
    final local$Title = _instance.Title;
    return local$Title == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Title, (e) => call(Title: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$SiteLogotypeBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SiteLogotypeBlockWhereInput<
                          Input$SiteLogotypeBlockWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$SiteLogotypeBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$SiteLogotypeBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SiteLogotypeBlockWhereInput<
                          Input$SiteLogotypeBlockWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$SiteLogotypeBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$SiteLogotypeBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SiteLogotypeBlockWhereInput<
                          Input$SiteLogotypeBlockWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$SiteLogotypeBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$SiteLogotypeBlockWhereInput<TRes>
    implements CopyWith$Input$SiteLogotypeBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$SiteLogotypeBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? Title,
    Input$StringFilterInput? Url,
    List<Input$SiteLogotypeBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SiteLogotypeBlockWhereInput?>? $_not,
    List<Input$SiteLogotypeBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Title =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$SitePageDataOrderByInput {
  factory Input$SitePageDataOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$SitePageDataOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$SitePageDataOrderByInput._(this._$data);

  factory Input$SitePageDataOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$SitePageDataOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$SitePageDataOrderByInput<Input$SitePageDataOrderByInput>
      get copyWith => CopyWith$Input$SitePageDataOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SitePageDataOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$SitePageDataOrderByInput<TRes> {
  factory CopyWith$Input$SitePageDataOrderByInput(
    Input$SitePageDataOrderByInput instance,
    TRes Function(Input$SitePageDataOrderByInput) then,
  ) = _CopyWithImpl$Input$SitePageDataOrderByInput;

  factory CopyWith$Input$SitePageDataOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SitePageDataOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$SitePageDataOrderByInput<TRes>
    implements CopyWith$Input$SitePageDataOrderByInput<TRes> {
  _CopyWithImpl$Input$SitePageDataOrderByInput(
    this._instance,
    this._then,
  );

  final Input$SitePageDataOrderByInput _instance;

  final TRes Function(Input$SitePageDataOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$SitePageDataOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$SitePageDataOrderByInput<TRes>
    implements CopyWith$Input$SitePageDataOrderByInput<TRes> {
  _CopyWithStubImpl$Input$SitePageDataOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$SitePageDataWhereInput {
  factory Input$SitePageDataWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$SitePageDataWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SitePageDataWhereInput?>? $_not,
    List<Input$SitePageDataWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$SitePageDataWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$SitePageDataWhereInput._(this._$data);

  factory Input$SitePageDataWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SitePageDataWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SitePageDataWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$SitePageDataWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$SitePageDataWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$SitePageDataWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$SitePageDataWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$SitePageDataWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$SitePageDataWhereInput?>?);

  List<Input$SitePageDataWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$SitePageDataWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$SitePageDataWhereInput<Input$SitePageDataWhereInput>
      get copyWith => CopyWith$Input$SitePageDataWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$SitePageDataWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$SitePageDataWhereInput<TRes> {
  factory CopyWith$Input$SitePageDataWhereInput(
    Input$SitePageDataWhereInput instance,
    TRes Function(Input$SitePageDataWhereInput) then,
  ) = _CopyWithImpl$Input$SitePageDataWhereInput;

  factory CopyWith$Input$SitePageDataWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$SitePageDataWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$SitePageDataWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SitePageDataWhereInput?>? $_not,
    List<Input$SitePageDataWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$SitePageDataWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SitePageDataWhereInput<
                      Input$SitePageDataWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$SitePageDataWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SitePageDataWhereInput<
                      Input$SitePageDataWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$SitePageDataWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$SitePageDataWhereInput<
                      Input$SitePageDataWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$SitePageDataWhereInput<TRes>
    implements CopyWith$Input$SitePageDataWhereInput<TRes> {
  _CopyWithImpl$Input$SitePageDataWhereInput(
    this._instance,
    this._then,
  );

  final Input$SitePageDataWhereInput _instance;

  final TRes Function(Input$SitePageDataWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$SitePageDataWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$SitePageDataWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$SitePageDataWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$SitePageDataWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$SitePageDataWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SitePageDataWhereInput<
                          Input$SitePageDataWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$SitePageDataWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$SitePageDataWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SitePageDataWhereInput<
                          Input$SitePageDataWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$SitePageDataWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$SitePageDataWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$SitePageDataWhereInput<
                          Input$SitePageDataWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$SitePageDataWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$SitePageDataWhereInput<TRes>
    implements CopyWith$Input$SitePageDataWhereInput<TRes> {
  _CopyWithStubImpl$Input$SitePageDataWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$SitePageDataWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$SitePageDataWhereInput?>? $_not,
    List<Input$SitePageDataWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$StandardPageOrderByInput {
  factory Input$StandardPageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$StandardPageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$StandardPageOrderByInput._(this._$data);

  factory Input$StandardPageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : fromJson$Enum$OrderBy((l$MainBody as String));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$StandardPageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MainBody => (_$data['MainBody'] as Enum$OrderBy?);

  Input$ContentAreaItemModelSearchOrderByInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] =
          l$MainBody == null ? null : toJson$Enum$OrderBy(l$MainBody);
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$StandardPageOrderByInput<Input$StandardPageOrderByInput>
      get copyWith => CopyWith$Input$StandardPageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$StandardPageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$StandardPageOrderByInput<TRes> {
  factory CopyWith$Input$StandardPageOrderByInput(
    Input$StandardPageOrderByInput instance,
    TRes Function(Input$StandardPageOrderByInput) then,
  ) = _CopyWithImpl$Input$StandardPageOrderByInput;

  factory CopyWith$Input$StandardPageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$StandardPageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$StandardPageOrderByInput<TRes>
    implements CopyWith$Input$StandardPageOrderByInput<TRes> {
  _CopyWithImpl$Input$StandardPageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$StandardPageOrderByInput _instance;

  final TRes Function(Input$StandardPageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$StandardPageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MainBody != _undefined) 'MainBody': (MainBody as Enum$OrderBy?),
        if (MainContentArea != _undefined)
          'MainContentArea': (MainContentArea
              as Input$ContentAreaItemModelSearchOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$StandardPageOrderByInput<TRes>
    implements CopyWith$Input$StandardPageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$StandardPageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Enum$OrderBy? MainBody,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$StandardPageWhereInput {
  factory Input$StandardPageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$StandardPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$StandardPageWhereInput?>? $_not,
    List<Input$StandardPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$StandardPageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainBody != null) r'MainBody': MainBody,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$StandardPageWhereInput._(this._$data);

  factory Input$StandardPageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainBody')) {
      final l$MainBody = data['MainBody'];
      result$data['MainBody'] = l$MainBody == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MainBody as Map<String, dynamic>));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$StandardPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$StandardPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$StandardPageWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$StandardPageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MainBody =>
      (_$data['MainBody'] as Input$SearchableStringFilterInput?);

  Input$ContentAreaItemModelSearchWhereInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$StandardPageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$StandardPageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$StandardPageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$StandardPageWhereInput?>?);

  List<Input$StandardPageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$StandardPageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainBody')) {
      final l$MainBody = MainBody;
      result$data['MainBody'] = l$MainBody?.toJson();
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$StandardPageWhereInput<Input$StandardPageWhereInput>
      get copyWith => CopyWith$Input$StandardPageWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$StandardPageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainBody = MainBody;
    final lOther$MainBody = other.MainBody;
    if (_$data.containsKey('MainBody') !=
        other._$data.containsKey('MainBody')) {
      return false;
    }
    if (l$MainBody != lOther$MainBody) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainBody = MainBody;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainBody') ? l$MainBody : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$StandardPageWhereInput<TRes> {
  factory CopyWith$Input$StandardPageWhereInput(
    Input$StandardPageWhereInput instance,
    TRes Function(Input$StandardPageWhereInput) then,
  ) = _CopyWithImpl$Input$StandardPageWhereInput;

  factory CopyWith$Input$StandardPageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$StandardPageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$StandardPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$StandardPageWhereInput?>? $_not,
    List<Input$StandardPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get MainContentArea;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$StandardPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$StandardPageWhereInput<
                      Input$StandardPageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$StandardPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$StandardPageWhereInput<
                      Input$StandardPageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$StandardPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$StandardPageWhereInput<
                      Input$StandardPageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$StandardPageWhereInput<TRes>
    implements CopyWith$Input$StandardPageWhereInput<TRes> {
  _CopyWithImpl$Input$StandardPageWhereInput(
    this._instance,
    this._then,
  );

  final Input$StandardPageWhereInput _instance;

  final TRes Function(Input$StandardPageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainBody = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$StandardPageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MainBody != _undefined)
          'MainBody': (MainBody as Input$SearchableStringFilterInput?),
        if (MainContentArea != _undefined)
          'MainContentArea':
              (MainContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$StandardPageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$StandardPageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$StandardPageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody {
    final local$MainBody = _instance.MainBody;
    return local$MainBody == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MainBody, (e) => call(MainBody: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$StandardPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$StandardPageWhereInput<
                          Input$StandardPageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$StandardPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$StandardPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$StandardPageWhereInput<
                          Input$StandardPageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$StandardPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$StandardPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$StandardPageWhereInput<
                          Input$StandardPageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$StandardPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$StandardPageWhereInput<TRes>
    implements CopyWith$Input$StandardPageWhereInput<TRes> {
  _CopyWithStubImpl$Input$StandardPageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$SearchableStringFilterInput? MainBody,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$StandardPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$StandardPageWhereInput?>? $_not,
    List<Input$StandardPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MainBody =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$StartPageOrderByInput {
  factory Input$StartPageOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$LinkItemNodeOrderByInput? CompanyInformationPageLinks,
    Input$ContentModelReferenceOrderByInput? ContactsPageLink,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$LinkItemNodeOrderByInput? CustomerZonePageLinks,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Input$ContentModelReferenceOrderByInput? GlobalNewsPageLink,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$LinkItemNodeOrderByInput? NewsPageLinks,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$LinkItemNodeOrderByInput? ProductPageLinks,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Input$ContentModelReferenceOrderByInput? SearchPageLink,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Input$StartPageSiteLogotypeBlockOrderByInput? SiteLogotype,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$StartPageOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (CompanyInformationPageLinks != null)
          r'CompanyInformationPageLinks': CompanyInformationPageLinks,
        if (ContactsPageLink != null) r'ContactsPageLink': ContactsPageLink,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (CustomerZonePageLinks != null)
          r'CustomerZonePageLinks': CustomerZonePageLinks,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (GlobalNewsPageLink != null)
          r'GlobalNewsPageLink': GlobalNewsPageLink,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (NewsPageLinks != null) r'NewsPageLinks': NewsPageLinks,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (ProductPageLinks != null) r'ProductPageLinks': ProductPageLinks,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (SearchPageLink != null) r'SearchPageLink': SearchPageLink,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (SiteLogotype != null) r'SiteLogotype': SiteLogotype,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$StartPageOrderByInput._(this._$data);

  factory Input$StartPageOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('CompanyInformationPageLinks')) {
      final l$CompanyInformationPageLinks = data['CompanyInformationPageLinks'];
      result$data['CompanyInformationPageLinks'] =
          l$CompanyInformationPageLinks == null
              ? null
              : Input$LinkItemNodeOrderByInput.fromJson(
                  (l$CompanyInformationPageLinks as Map<String, dynamic>));
    }
    if (data.containsKey('ContactsPageLink')) {
      final l$ContactsPageLink = data['ContactsPageLink'];
      result$data['ContactsPageLink'] = l$ContactsPageLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContactsPageLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('CustomerZonePageLinks')) {
      final l$CustomerZonePageLinks = data['CustomerZonePageLinks'];
      result$data['CustomerZonePageLinks'] = l$CustomerZonePageLinks == null
          ? null
          : Input$LinkItemNodeOrderByInput.fromJson(
              (l$CustomerZonePageLinks as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : fromJson$Enum$OrderBy((l$DisableIndexing as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('GlobalNewsPageLink')) {
      final l$GlobalNewsPageLink = data['GlobalNewsPageLink'];
      result$data['GlobalNewsPageLink'] = l$GlobalNewsPageLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$GlobalNewsPageLink as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteFooter as String));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : fromJson$Enum$OrderBy((l$HideSiteHeader as String));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchOrderByInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaDescription as String));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaKeywords as String));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : fromJson$Enum$OrderBy((l$MetaTitle as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('NewsPageLinks')) {
      final l$NewsPageLinks = data['NewsPageLinks'];
      result$data['NewsPageLinks'] = l$NewsPageLinks == null
          ? null
          : Input$LinkItemNodeOrderByInput.fromJson(
              (l$NewsPageLinks as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ProductPageLinks')) {
      final l$ProductPageLinks = data['ProductPageLinks'];
      result$data['ProductPageLinks'] = l$ProductPageLinks == null
          ? null
          : Input$LinkItemNodeOrderByInput.fromJson(
              (l$ProductPageLinks as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('SearchPageLink')) {
      final l$SearchPageLink = data['SearchPageLink'];
      result$data['SearchPageLink'] = l$SearchPageLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$SearchPageLink as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('SiteLogotype')) {
      final l$SiteLogotype = data['SiteLogotype'];
      result$data['SiteLogotype'] = l$SiteLogotype == null
          ? null
          : Input$StartPageSiteLogotypeBlockOrderByInput.fromJson(
              (l$SiteLogotype as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : fromJson$Enum$OrderBy((l$TeaserText as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$StartPageOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$LinkItemNodeOrderByInput? get CompanyInformationPageLinks =>
      (_$data['CompanyInformationPageLinks']
          as Input$LinkItemNodeOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContactsPageLink =>
      (_$data['ContactsPageLink'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentAreaItemModelSearchOrderByInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$LinkItemNodeOrderByInput? get CustomerZonePageLinks =>
      (_$data['CustomerZonePageLinks'] as Input$LinkItemNodeOrderByInput?);

  Enum$OrderBy? get DisableIndexing =>
      (_$data['DisableIndexing'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get GlobalNewsPageLink =>
      (_$data['GlobalNewsPageLink']
          as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Enum$OrderBy?);

  Enum$OrderBy? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Enum$OrderBy?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentAreaItemModelSearchOrderByInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MetaDescription =>
      (_$data['MetaDescription'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaKeywords => (_$data['MetaKeywords'] as Enum$OrderBy?);

  Enum$OrderBy? get MetaTitle => (_$data['MetaTitle'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$LinkItemNodeOrderByInput? get NewsPageLinks =>
      (_$data['NewsPageLinks'] as Input$LinkItemNodeOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Input$LinkItemNodeOrderByInput? get ProductPageLinks =>
      (_$data['ProductPageLinks'] as Input$LinkItemNodeOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get SearchPageLink =>
      (_$data['SearchPageLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Input$StartPageSiteLogotypeBlockOrderByInput? get SiteLogotype =>
      (_$data['SiteLogotype'] as Input$StartPageSiteLogotypeBlockOrderByInput?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get TeaserText => (_$data['TeaserText'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('CompanyInformationPageLinks')) {
      final l$CompanyInformationPageLinks = CompanyInformationPageLinks;
      result$data['CompanyInformationPageLinks'] =
          l$CompanyInformationPageLinks?.toJson();
    }
    if (_$data.containsKey('ContactsPageLink')) {
      final l$ContactsPageLink = ContactsPageLink;
      result$data['ContactsPageLink'] = l$ContactsPageLink?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('CustomerZonePageLinks')) {
      final l$CustomerZonePageLinks = CustomerZonePageLinks;
      result$data['CustomerZonePageLinks'] = l$CustomerZonePageLinks?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : toJson$Enum$OrderBy(l$DisableIndexing);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('GlobalNewsPageLink')) {
      final l$GlobalNewsPageLink = GlobalNewsPageLink;
      result$data['GlobalNewsPageLink'] = l$GlobalNewsPageLink?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteFooter);
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : toJson$Enum$OrderBy(l$HideSiteHeader);
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : toJson$Enum$OrderBy(l$MetaDescription);
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] =
          l$MetaKeywords == null ? null : toJson$Enum$OrderBy(l$MetaKeywords);
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] =
          l$MetaTitle == null ? null : toJson$Enum$OrderBy(l$MetaTitle);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('NewsPageLinks')) {
      final l$NewsPageLinks = NewsPageLinks;
      result$data['NewsPageLinks'] = l$NewsPageLinks?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('ProductPageLinks')) {
      final l$ProductPageLinks = ProductPageLinks;
      result$data['ProductPageLinks'] = l$ProductPageLinks?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('SearchPageLink')) {
      final l$SearchPageLink = SearchPageLink;
      result$data['SearchPageLink'] = l$SearchPageLink?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('SiteLogotype')) {
      final l$SiteLogotype = SiteLogotype;
      result$data['SiteLogotype'] = l$SiteLogotype?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] =
          l$TeaserText == null ? null : toJson$Enum$OrderBy(l$TeaserText);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$StartPageOrderByInput<Input$StartPageOrderByInput>
      get copyWith => CopyWith$Input$StartPageOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$StartPageOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$CompanyInformationPageLinks = CompanyInformationPageLinks;
    final lOther$CompanyInformationPageLinks =
        other.CompanyInformationPageLinks;
    if (_$data.containsKey('CompanyInformationPageLinks') !=
        other._$data.containsKey('CompanyInformationPageLinks')) {
      return false;
    }
    if (l$CompanyInformationPageLinks != lOther$CompanyInformationPageLinks) {
      return false;
    }
    final l$ContactsPageLink = ContactsPageLink;
    final lOther$ContactsPageLink = other.ContactsPageLink;
    if (_$data.containsKey('ContactsPageLink') !=
        other._$data.containsKey('ContactsPageLink')) {
      return false;
    }
    if (l$ContactsPageLink != lOther$ContactsPageLink) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$CustomerZonePageLinks = CustomerZonePageLinks;
    final lOther$CustomerZonePageLinks = other.CustomerZonePageLinks;
    if (_$data.containsKey('CustomerZonePageLinks') !=
        other._$data.containsKey('CustomerZonePageLinks')) {
      return false;
    }
    if (l$CustomerZonePageLinks != lOther$CustomerZonePageLinks) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$GlobalNewsPageLink = GlobalNewsPageLink;
    final lOther$GlobalNewsPageLink = other.GlobalNewsPageLink;
    if (_$data.containsKey('GlobalNewsPageLink') !=
        other._$data.containsKey('GlobalNewsPageLink')) {
      return false;
    }
    if (l$GlobalNewsPageLink != lOther$GlobalNewsPageLink) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$NewsPageLinks = NewsPageLinks;
    final lOther$NewsPageLinks = other.NewsPageLinks;
    if (_$data.containsKey('NewsPageLinks') !=
        other._$data.containsKey('NewsPageLinks')) {
      return false;
    }
    if (l$NewsPageLinks != lOther$NewsPageLinks) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$ProductPageLinks = ProductPageLinks;
    final lOther$ProductPageLinks = other.ProductPageLinks;
    if (_$data.containsKey('ProductPageLinks') !=
        other._$data.containsKey('ProductPageLinks')) {
      return false;
    }
    if (l$ProductPageLinks != lOther$ProductPageLinks) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$SearchPageLink = SearchPageLink;
    final lOther$SearchPageLink = other.SearchPageLink;
    if (_$data.containsKey('SearchPageLink') !=
        other._$data.containsKey('SearchPageLink')) {
      return false;
    }
    if (l$SearchPageLink != lOther$SearchPageLink) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$SiteLogotype = SiteLogotype;
    final lOther$SiteLogotype = other.SiteLogotype;
    if (_$data.containsKey('SiteLogotype') !=
        other._$data.containsKey('SiteLogotype')) {
      return false;
    }
    if (l$SiteLogotype != lOther$SiteLogotype) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$CompanyInformationPageLinks = CompanyInformationPageLinks;
    final l$ContactsPageLink = ContactsPageLink;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$CustomerZonePageLinks = CustomerZonePageLinks;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$GlobalNewsPageLink = GlobalNewsPageLink;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$NewsPageLinks = NewsPageLinks;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$ProductPageLinks = ProductPageLinks;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$SearchPageLink = SearchPageLink;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$SiteLogotype = SiteLogotype;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('CompanyInformationPageLinks')
          ? l$CompanyInformationPageLinks
          : const {},
      _$data.containsKey('ContactsPageLink') ? l$ContactsPageLink : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('CustomerZonePageLinks')
          ? l$CustomerZonePageLinks
          : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('GlobalNewsPageLink')
          ? l$GlobalNewsPageLink
          : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('NewsPageLinks') ? l$NewsPageLinks : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('ProductPageLinks') ? l$ProductPageLinks : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('SearchPageLink') ? l$SearchPageLink : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('SiteLogotype') ? l$SiteLogotype : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$StartPageOrderByInput<TRes> {
  factory CopyWith$Input$StartPageOrderByInput(
    Input$StartPageOrderByInput instance,
    TRes Function(Input$StartPageOrderByInput) then,
  ) = _CopyWithImpl$Input$StartPageOrderByInput;

  factory CopyWith$Input$StartPageOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$StartPageOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$LinkItemNodeOrderByInput? CompanyInformationPageLinks,
    Input$ContentModelReferenceOrderByInput? ContactsPageLink,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$LinkItemNodeOrderByInput? CustomerZonePageLinks,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Input$ContentModelReferenceOrderByInput? GlobalNewsPageLink,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$LinkItemNodeOrderByInput? NewsPageLinks,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$LinkItemNodeOrderByInput? ProductPageLinks,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Input$ContentModelReferenceOrderByInput? SearchPageLink,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Input$StartPageSiteLogotypeBlockOrderByInput? SiteLogotype,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get CompanyInformationPageLinks;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContactsPageLink;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get CustomerZonePageLinks;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get GlobalNewsPageLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get NewsPageLinks;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get ProductPageLinks;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get SearchPageLink;
  CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput<TRes> get SiteLogotype;
}

class _CopyWithImpl$Input$StartPageOrderByInput<TRes>
    implements CopyWith$Input$StartPageOrderByInput<TRes> {
  _CopyWithImpl$Input$StartPageOrderByInput(
    this._instance,
    this._then,
  );

  final Input$StartPageOrderByInput _instance;

  final TRes Function(Input$StartPageOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? CompanyInformationPageLinks = _undefined,
    Object? ContactsPageLink = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? CustomerZonePageLinks = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? GlobalNewsPageLink = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? NewsPageLinks = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? ProductPageLinks = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? SearchPageLink = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? SiteLogotype = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$StartPageOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (CompanyInformationPageLinks != _undefined)
          'CompanyInformationPageLinks':
              (CompanyInformationPageLinks as Input$LinkItemNodeOrderByInput?),
        if (ContactsPageLink != _undefined)
          'ContactsPageLink':
              (ContactsPageLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchOrderByInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (CustomerZonePageLinks != _undefined)
          'CustomerZonePageLinks':
              (CustomerZonePageLinks as Input$LinkItemNodeOrderByInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (GlobalNewsPageLink != _undefined)
          'GlobalNewsPageLink':
              (GlobalNewsPageLink as Input$ContentModelReferenceOrderByInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Enum$OrderBy?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Enum$OrderBy?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MainContentArea != _undefined)
          'MainContentArea': (MainContentArea
              as Input$ContentAreaItemModelSearchOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MetaDescription != _undefined)
          'MetaDescription': (MetaDescription as Enum$OrderBy?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Enum$OrderBy?),
        if (MetaTitle != _undefined) 'MetaTitle': (MetaTitle as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (NewsPageLinks != _undefined)
          'NewsPageLinks': (NewsPageLinks as Input$LinkItemNodeOrderByInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceOrderByInput?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (ProductPageLinks != _undefined)
          'ProductPageLinks':
              (ProductPageLinks as Input$LinkItemNodeOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (SearchPageLink != _undefined)
          'SearchPageLink':
              (SearchPageLink as Input$ContentModelReferenceOrderByInput?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (SiteLogotype != _undefined)
          'SiteLogotype':
              (SiteLogotype as Input$StartPageSiteLogotypeBlockOrderByInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$LinkItemNodeOrderByInput<TRes>
      get CompanyInformationPageLinks {
    final local$CompanyInformationPageLinks =
        _instance.CompanyInformationPageLinks;
    return local$CompanyInformationPageLinks == null
        ? CopyWith$Input$LinkItemNodeOrderByInput.stub(_then(_instance))
        : CopyWith$Input$LinkItemNodeOrderByInput(
            local$CompanyInformationPageLinks,
            (e) => call(CompanyInformationPageLinks: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContactsPageLink {
    final local$ContactsPageLink = _instance.ContactsPageLink;
    return local$ContactsPageLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContactsPageLink, (e) => call(ContactsPageLink: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get CustomerZonePageLinks {
    final local$CustomerZonePageLinks = _instance.CustomerZonePageLinks;
    return local$CustomerZonePageLinks == null
        ? CopyWith$Input$LinkItemNodeOrderByInput.stub(_then(_instance))
        : CopyWith$Input$LinkItemNodeOrderByInput(
            local$CustomerZonePageLinks, (e) => call(CustomerZonePageLinks: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes>
      get GlobalNewsPageLink {
    final local$GlobalNewsPageLink = _instance.GlobalNewsPageLink;
    return local$GlobalNewsPageLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$GlobalNewsPageLink, (e) => call(GlobalNewsPageLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchOrderByInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get NewsPageLinks {
    final local$NewsPageLinks = _instance.NewsPageLinks;
    return local$NewsPageLinks == null
        ? CopyWith$Input$LinkItemNodeOrderByInput.stub(_then(_instance))
        : CopyWith$Input$LinkItemNodeOrderByInput(
            local$NewsPageLinks, (e) => call(NewsPageLinks: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get ProductPageLinks {
    final local$ProductPageLinks = _instance.ProductPageLinks;
    return local$ProductPageLinks == null
        ? CopyWith$Input$LinkItemNodeOrderByInput.stub(_then(_instance))
        : CopyWith$Input$LinkItemNodeOrderByInput(
            local$ProductPageLinks, (e) => call(ProductPageLinks: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get SearchPageLink {
    final local$SearchPageLink = _instance.SearchPageLink;
    return local$SearchPageLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$SearchPageLink, (e) => call(SearchPageLink: e));
  }

  CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput<TRes> get SiteLogotype {
    final local$SiteLogotype = _instance.SiteLogotype;
    return local$SiteLogotype == null
        ? CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput(
            local$SiteLogotype, (e) => call(SiteLogotype: e));
  }
}

class _CopyWithStubImpl$Input$StartPageOrderByInput<TRes>
    implements CopyWith$Input$StartPageOrderByInput<TRes> {
  _CopyWithStubImpl$Input$StartPageOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$LinkItemNodeOrderByInput? CompanyInformationPageLinks,
    Input$ContentModelReferenceOrderByInput? ContactsPageLink,
    Input$ContentAreaItemModelSearchOrderByInput? ContentArea,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$LinkItemNodeOrderByInput? CustomerZonePageLinks,
    Enum$OrderBy? DisableIndexing,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Input$ContentModelReferenceOrderByInput? GlobalNewsPageLink,
    Enum$OrderBy? HideSiteFooter,
    Enum$OrderBy? HideSiteHeader,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentAreaItemModelSearchOrderByInput? MainContentArea,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MetaDescription,
    Enum$OrderBy? MetaKeywords,
    Enum$OrderBy? MetaTitle,
    Enum$OrderBy? Name,
    Input$LinkItemNodeOrderByInput? NewsPageLinks,
    Input$ContentModelReferenceOrderByInput? PageImage,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$LinkItemNodeOrderByInput? ProductPageLinks,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Input$ContentModelReferenceOrderByInput? SearchPageLink,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Input$StartPageSiteLogotypeBlockOrderByInput? SiteLogotype,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? TeaserText,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$LinkItemNodeOrderByInput<TRes>
      get CompanyInformationPageLinks =>
          CopyWith$Input$LinkItemNodeOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContactsPageLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get CustomerZonePageLinks =>
      CopyWith$Input$LinkItemNodeOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes>
      get GlobalNewsPageLink =>
          CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchOrderByInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get NewsPageLinks =>
      CopyWith$Input$LinkItemNodeOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$LinkItemNodeOrderByInput<TRes> get ProductPageLinks =>
      CopyWith$Input$LinkItemNodeOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get SearchPageLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput<TRes>
      get SiteLogotype =>
          CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput.stub(_res);
}

class Input$StartPageSiteLogotypeBlockOrderByInput {
  factory Input$StartPageSiteLogotypeBlockOrderByInput({
    Enum$OrderBy? Title,
    Enum$OrderBy? Url,
  }) =>
      Input$StartPageSiteLogotypeBlockOrderByInput._({
        if (Title != null) r'Title': Title,
        if (Url != null) r'Url': Url,
      });

  Input$StartPageSiteLogotypeBlockOrderByInput._(this._$data);

  factory Input$StartPageSiteLogotypeBlockOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Title')) {
      final l$Title = data['Title'];
      result$data['Title'] =
          l$Title == null ? null : fromJson$Enum$OrderBy((l$Title as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    return Input$StartPageSiteLogotypeBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Title => (_$data['Title'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Title')) {
      final l$Title = Title;
      result$data['Title'] =
          l$Title == null ? null : toJson$Enum$OrderBy(l$Title);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    return result$data;
  }

  CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput<
          Input$StartPageSiteLogotypeBlockOrderByInput>
      get copyWith => CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$StartPageSiteLogotypeBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Title = Title;
    final lOther$Title = other.Title;
    if (_$data.containsKey('Title') != other._$data.containsKey('Title')) {
      return false;
    }
    if (l$Title != lOther$Title) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Title = Title;
    final l$Url = Url;
    return Object.hashAll([
      _$data.containsKey('Title') ? l$Title : const {},
      _$data.containsKey('Url') ? l$Url : const {},
    ]);
  }
}

abstract class CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput<TRes> {
  factory CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput(
    Input$StartPageSiteLogotypeBlockOrderByInput instance,
    TRes Function(Input$StartPageSiteLogotypeBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$StartPageSiteLogotypeBlockOrderByInput;

  factory CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$StartPageSiteLogotypeBlockOrderByInput;

  TRes call({
    Enum$OrderBy? Title,
    Enum$OrderBy? Url,
  });
}

class _CopyWithImpl$Input$StartPageSiteLogotypeBlockOrderByInput<TRes>
    implements CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$StartPageSiteLogotypeBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$StartPageSiteLogotypeBlockOrderByInput _instance;

  final TRes Function(Input$StartPageSiteLogotypeBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Title = _undefined,
    Object? Url = _undefined,
  }) =>
      _then(Input$StartPageSiteLogotypeBlockOrderByInput._({
        ..._instance._$data,
        if (Title != _undefined) 'Title': (Title as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
      }));
}

class _CopyWithStubImpl$Input$StartPageSiteLogotypeBlockOrderByInput<TRes>
    implements CopyWith$Input$StartPageSiteLogotypeBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$StartPageSiteLogotypeBlockOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Title,
    Enum$OrderBy? Url,
  }) =>
      _res;
}

class Input$StartPageSiteLogotypeBlockWhereInput {
  factory Input$StartPageSiteLogotypeBlockWhereInput({
    Input$SearchableStringFilterInput? Title,
    Input$StringFilterInput? Url,
  }) =>
      Input$StartPageSiteLogotypeBlockWhereInput._({
        if (Title != null) r'Title': Title,
        if (Url != null) r'Url': Url,
      });

  Input$StartPageSiteLogotypeBlockWhereInput._(this._$data);

  factory Input$StartPageSiteLogotypeBlockWhereInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Title')) {
      final l$Title = data['Title'];
      result$data['Title'] = l$Title == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Title as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    return Input$StartPageSiteLogotypeBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$SearchableStringFilterInput? get Title =>
      (_$data['Title'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Title')) {
      final l$Title = Title;
      result$data['Title'] = l$Title?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$StartPageSiteLogotypeBlockWhereInput<
          Input$StartPageSiteLogotypeBlockWhereInput>
      get copyWith => CopyWith$Input$StartPageSiteLogotypeBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$StartPageSiteLogotypeBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Title = Title;
    final lOther$Title = other.Title;
    if (_$data.containsKey('Title') != other._$data.containsKey('Title')) {
      return false;
    }
    if (l$Title != lOther$Title) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Title = Title;
    final l$Url = Url;
    return Object.hashAll([
      _$data.containsKey('Title') ? l$Title : const {},
      _$data.containsKey('Url') ? l$Url : const {},
    ]);
  }
}

abstract class CopyWith$Input$StartPageSiteLogotypeBlockWhereInput<TRes> {
  factory CopyWith$Input$StartPageSiteLogotypeBlockWhereInput(
    Input$StartPageSiteLogotypeBlockWhereInput instance,
    TRes Function(Input$StartPageSiteLogotypeBlockWhereInput) then,
  ) = _CopyWithImpl$Input$StartPageSiteLogotypeBlockWhereInput;

  factory CopyWith$Input$StartPageSiteLogotypeBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$StartPageSiteLogotypeBlockWhereInput;

  TRes call({
    Input$SearchableStringFilterInput? Title,
    Input$StringFilterInput? Url,
  });
  CopyWith$Input$SearchableStringFilterInput<TRes> get Title;
  CopyWith$Input$StringFilterInput<TRes> get Url;
}

class _CopyWithImpl$Input$StartPageSiteLogotypeBlockWhereInput<TRes>
    implements CopyWith$Input$StartPageSiteLogotypeBlockWhereInput<TRes> {
  _CopyWithImpl$Input$StartPageSiteLogotypeBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$StartPageSiteLogotypeBlockWhereInput _instance;

  final TRes Function(Input$StartPageSiteLogotypeBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Title = _undefined,
    Object? Url = _undefined,
  }) =>
      _then(Input$StartPageSiteLogotypeBlockWhereInput._({
        ..._instance._$data,
        if (Title != _undefined)
          'Title': (Title as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
      }));

  CopyWith$Input$SearchableStringFilterInput<TRes> get Title {
    final local$Title = _instance.Title;
    return local$Title == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Title, (e) => call(Title: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }
}

class _CopyWithStubImpl$Input$StartPageSiteLogotypeBlockWhereInput<TRes>
    implements CopyWith$Input$StartPageSiteLogotypeBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$StartPageSiteLogotypeBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$SearchableStringFilterInput? Title,
    Input$StringFilterInput? Url,
  }) =>
      _res;

  CopyWith$Input$SearchableStringFilterInput<TRes> get Title =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);
}

class Input$StartPageWhereInput {
  factory Input$StartPageWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$LinkItemNodeWhereInput? CompanyInformationPageLinks,
    Input$ContentModelReferenceWhereInput? ContactsPageLink,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$LinkItemNodeWhereInput? CustomerZonePageLinks,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$ContentModelReferenceWhereInput? GlobalNewsPageLink,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$LinkItemNodeWhereInput? NewsPageLinks,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$LinkItemNodeWhereInput? ProductPageLinks,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$ContentModelReferenceWhereInput? SearchPageLink,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$StartPageSiteLogotypeBlockWhereInput? SiteLogotype,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$StartPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$StartPageWhereInput?>? $_not,
    List<Input$StartPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$StartPageWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (CompanyInformationPageLinks != null)
          r'CompanyInformationPageLinks': CompanyInformationPageLinks,
        if (ContactsPageLink != null) r'ContactsPageLink': ContactsPageLink,
        if (ContentArea != null) r'ContentArea': ContentArea,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (CustomerZonePageLinks != null)
          r'CustomerZonePageLinks': CustomerZonePageLinks,
        if (DisableIndexing != null) r'DisableIndexing': DisableIndexing,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (GlobalNewsPageLink != null)
          r'GlobalNewsPageLink': GlobalNewsPageLink,
        if (HideSiteFooter != null) r'HideSiteFooter': HideSiteFooter,
        if (HideSiteHeader != null) r'HideSiteHeader': HideSiteHeader,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MainContentArea != null) r'MainContentArea': MainContentArea,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MetaDescription != null) r'MetaDescription': MetaDescription,
        if (MetaKeywords != null) r'MetaKeywords': MetaKeywords,
        if (MetaTitle != null) r'MetaTitle': MetaTitle,
        if (Name != null) r'Name': Name,
        if (NewsPageLinks != null) r'NewsPageLinks': NewsPageLinks,
        if (PageImage != null) r'PageImage': PageImage,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (ProductPageLinks != null) r'ProductPageLinks': ProductPageLinks,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (SearchPageLink != null) r'SearchPageLink': SearchPageLink,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (SiteLogotype != null) r'SiteLogotype': SiteLogotype,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (TeaserText != null) r'TeaserText': TeaserText,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$StartPageWhereInput._(this._$data);

  factory Input$StartPageWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('CompanyInformationPageLinks')) {
      final l$CompanyInformationPageLinks = data['CompanyInformationPageLinks'];
      result$data['CompanyInformationPageLinks'] =
          l$CompanyInformationPageLinks == null
              ? null
              : Input$LinkItemNodeWhereInput.fromJson(
                  (l$CompanyInformationPageLinks as Map<String, dynamic>));
    }
    if (data.containsKey('ContactsPageLink')) {
      final l$ContactsPageLink = data['ContactsPageLink'];
      result$data['ContactsPageLink'] = l$ContactsPageLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContactsPageLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentArea')) {
      final l$ContentArea = data['ContentArea'];
      result$data['ContentArea'] = l$ContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$ContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('CustomerZonePageLinks')) {
      final l$CustomerZonePageLinks = data['CustomerZonePageLinks'];
      result$data['CustomerZonePageLinks'] = l$CustomerZonePageLinks == null
          ? null
          : Input$LinkItemNodeWhereInput.fromJson(
              (l$CustomerZonePageLinks as Map<String, dynamic>));
    }
    if (data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = data['DisableIndexing'];
      result$data['DisableIndexing'] = l$DisableIndexing == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$DisableIndexing as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('GlobalNewsPageLink')) {
      final l$GlobalNewsPageLink = data['GlobalNewsPageLink'];
      result$data['GlobalNewsPageLink'] = l$GlobalNewsPageLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$GlobalNewsPageLink as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = data['HideSiteFooter'];
      result$data['HideSiteFooter'] = l$HideSiteFooter == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteFooter as Map<String, dynamic>));
    }
    if (data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = data['HideSiteHeader'];
      result$data['HideSiteHeader'] = l$HideSiteHeader == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$HideSiteHeader as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MainContentArea')) {
      final l$MainContentArea = data['MainContentArea'];
      result$data['MainContentArea'] = l$MainContentArea == null
          ? null
          : Input$ContentAreaItemModelSearchWhereInput.fromJson(
              (l$MainContentArea as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MetaDescription')) {
      final l$MetaDescription = data['MetaDescription'];
      result$data['MetaDescription'] = l$MetaDescription == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaDescription as Map<String, dynamic>));
    }
    if (data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = data['MetaKeywords'];
      result$data['MetaKeywords'] = l$MetaKeywords == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MetaKeywords as Map<String, dynamic>));
    }
    if (data.containsKey('MetaTitle')) {
      final l$MetaTitle = data['MetaTitle'];
      result$data['MetaTitle'] = l$MetaTitle == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$MetaTitle as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('NewsPageLinks')) {
      final l$NewsPageLinks = data['NewsPageLinks'];
      result$data['NewsPageLinks'] = l$NewsPageLinks == null
          ? null
          : Input$LinkItemNodeWhereInput.fromJson(
              (l$NewsPageLinks as Map<String, dynamic>));
    }
    if (data.containsKey('PageImage')) {
      final l$PageImage = data['PageImage'];
      result$data['PageImage'] = l$PageImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PageImage as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ProductPageLinks')) {
      final l$ProductPageLinks = data['ProductPageLinks'];
      result$data['ProductPageLinks'] = l$ProductPageLinks == null
          ? null
          : Input$LinkItemNodeWhereInput.fromJson(
              (l$ProductPageLinks as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('SearchPageLink')) {
      final l$SearchPageLink = data['SearchPageLink'];
      result$data['SearchPageLink'] = l$SearchPageLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$SearchPageLink as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('SiteLogotype')) {
      final l$SiteLogotype = data['SiteLogotype'];
      result$data['SiteLogotype'] = l$SiteLogotype == null
          ? null
          : Input$StartPageSiteLogotypeBlockWhereInput.fromJson(
              (l$SiteLogotype as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('TeaserText')) {
      final l$TeaserText = data['TeaserText'];
      result$data['TeaserText'] = l$TeaserText == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$TeaserText as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$StartPageWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$StartPageWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$StartPageWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$StartPageWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$LinkItemNodeWhereInput? get CompanyInformationPageLinks =>
      (_$data['CompanyInformationPageLinks'] as Input$LinkItemNodeWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContactsPageLink =>
      (_$data['ContactsPageLink'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentAreaItemModelSearchWhereInput? get ContentArea =>
      (_$data['ContentArea'] as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$LinkItemNodeWhereInput? get CustomerZonePageLinks =>
      (_$data['CustomerZonePageLinks'] as Input$LinkItemNodeWhereInput?);

  Input$BoolFilterInput? get DisableIndexing =>
      (_$data['DisableIndexing'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentModelReferenceWhereInput? get GlobalNewsPageLink =>
      (_$data['GlobalNewsPageLink'] as Input$ContentModelReferenceWhereInput?);

  Input$BoolFilterInput? get HideSiteFooter =>
      (_$data['HideSiteFooter'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get HideSiteHeader =>
      (_$data['HideSiteHeader'] as Input$BoolFilterInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentAreaItemModelSearchWhereInput? get MainContentArea =>
      (_$data['MainContentArea']
          as Input$ContentAreaItemModelSearchWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get MetaDescription =>
      (_$data['MetaDescription'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get MetaKeywords =>
      (_$data['MetaKeywords'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get MetaTitle =>
      (_$data['MetaTitle'] as Input$SearchableStringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$LinkItemNodeWhereInput? get NewsPageLinks =>
      (_$data['NewsPageLinks'] as Input$LinkItemNodeWhereInput?);

  Input$ContentModelReferenceWhereInput? get PageImage =>
      (_$data['PageImage'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$LinkItemNodeWhereInput? get ProductPageLinks =>
      (_$data['ProductPageLinks'] as Input$LinkItemNodeWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get SearchPageLink =>
      (_$data['SearchPageLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$StartPageSiteLogotypeBlockWhereInput? get SiteLogotype =>
      (_$data['SiteLogotype'] as Input$StartPageSiteLogotypeBlockWhereInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get TeaserText =>
      (_$data['TeaserText'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$StartPageWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$StartPageWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$StartPageWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$StartPageWhereInput?>?);

  List<Input$StartPageWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$StartPageWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('CompanyInformationPageLinks')) {
      final l$CompanyInformationPageLinks = CompanyInformationPageLinks;
      result$data['CompanyInformationPageLinks'] =
          l$CompanyInformationPageLinks?.toJson();
    }
    if (_$data.containsKey('ContactsPageLink')) {
      final l$ContactsPageLink = ContactsPageLink;
      result$data['ContactsPageLink'] = l$ContactsPageLink?.toJson();
    }
    if (_$data.containsKey('ContentArea')) {
      final l$ContentArea = ContentArea;
      result$data['ContentArea'] = l$ContentArea?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('CustomerZonePageLinks')) {
      final l$CustomerZonePageLinks = CustomerZonePageLinks;
      result$data['CustomerZonePageLinks'] = l$CustomerZonePageLinks?.toJson();
    }
    if (_$data.containsKey('DisableIndexing')) {
      final l$DisableIndexing = DisableIndexing;
      result$data['DisableIndexing'] = l$DisableIndexing?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('GlobalNewsPageLink')) {
      final l$GlobalNewsPageLink = GlobalNewsPageLink;
      result$data['GlobalNewsPageLink'] = l$GlobalNewsPageLink?.toJson();
    }
    if (_$data.containsKey('HideSiteFooter')) {
      final l$HideSiteFooter = HideSiteFooter;
      result$data['HideSiteFooter'] = l$HideSiteFooter?.toJson();
    }
    if (_$data.containsKey('HideSiteHeader')) {
      final l$HideSiteHeader = HideSiteHeader;
      result$data['HideSiteHeader'] = l$HideSiteHeader?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MainContentArea')) {
      final l$MainContentArea = MainContentArea;
      result$data['MainContentArea'] = l$MainContentArea?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MetaDescription')) {
      final l$MetaDescription = MetaDescription;
      result$data['MetaDescription'] = l$MetaDescription?.toJson();
    }
    if (_$data.containsKey('MetaKeywords')) {
      final l$MetaKeywords = MetaKeywords;
      result$data['MetaKeywords'] = l$MetaKeywords?.toJson();
    }
    if (_$data.containsKey('MetaTitle')) {
      final l$MetaTitle = MetaTitle;
      result$data['MetaTitle'] = l$MetaTitle?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('NewsPageLinks')) {
      final l$NewsPageLinks = NewsPageLinks;
      result$data['NewsPageLinks'] = l$NewsPageLinks?.toJson();
    }
    if (_$data.containsKey('PageImage')) {
      final l$PageImage = PageImage;
      result$data['PageImage'] = l$PageImage?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('ProductPageLinks')) {
      final l$ProductPageLinks = ProductPageLinks;
      result$data['ProductPageLinks'] = l$ProductPageLinks?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('SearchPageLink')) {
      final l$SearchPageLink = SearchPageLink;
      result$data['SearchPageLink'] = l$SearchPageLink?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('SiteLogotype')) {
      final l$SiteLogotype = SiteLogotype;
      result$data['SiteLogotype'] = l$SiteLogotype?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('TeaserText')) {
      final l$TeaserText = TeaserText;
      result$data['TeaserText'] = l$TeaserText?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$StartPageWhereInput<Input$StartPageWhereInput> get copyWith =>
      CopyWith$Input$StartPageWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$StartPageWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$CompanyInformationPageLinks = CompanyInformationPageLinks;
    final lOther$CompanyInformationPageLinks =
        other.CompanyInformationPageLinks;
    if (_$data.containsKey('CompanyInformationPageLinks') !=
        other._$data.containsKey('CompanyInformationPageLinks')) {
      return false;
    }
    if (l$CompanyInformationPageLinks != lOther$CompanyInformationPageLinks) {
      return false;
    }
    final l$ContactsPageLink = ContactsPageLink;
    final lOther$ContactsPageLink = other.ContactsPageLink;
    if (_$data.containsKey('ContactsPageLink') !=
        other._$data.containsKey('ContactsPageLink')) {
      return false;
    }
    if (l$ContactsPageLink != lOther$ContactsPageLink) {
      return false;
    }
    final l$ContentArea = ContentArea;
    final lOther$ContentArea = other.ContentArea;
    if (_$data.containsKey('ContentArea') !=
        other._$data.containsKey('ContentArea')) {
      return false;
    }
    if (l$ContentArea != lOther$ContentArea) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$CustomerZonePageLinks = CustomerZonePageLinks;
    final lOther$CustomerZonePageLinks = other.CustomerZonePageLinks;
    if (_$data.containsKey('CustomerZonePageLinks') !=
        other._$data.containsKey('CustomerZonePageLinks')) {
      return false;
    }
    if (l$CustomerZonePageLinks != lOther$CustomerZonePageLinks) {
      return false;
    }
    final l$DisableIndexing = DisableIndexing;
    final lOther$DisableIndexing = other.DisableIndexing;
    if (_$data.containsKey('DisableIndexing') !=
        other._$data.containsKey('DisableIndexing')) {
      return false;
    }
    if (l$DisableIndexing != lOther$DisableIndexing) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$GlobalNewsPageLink = GlobalNewsPageLink;
    final lOther$GlobalNewsPageLink = other.GlobalNewsPageLink;
    if (_$data.containsKey('GlobalNewsPageLink') !=
        other._$data.containsKey('GlobalNewsPageLink')) {
      return false;
    }
    if (l$GlobalNewsPageLink != lOther$GlobalNewsPageLink) {
      return false;
    }
    final l$HideSiteFooter = HideSiteFooter;
    final lOther$HideSiteFooter = other.HideSiteFooter;
    if (_$data.containsKey('HideSiteFooter') !=
        other._$data.containsKey('HideSiteFooter')) {
      return false;
    }
    if (l$HideSiteFooter != lOther$HideSiteFooter) {
      return false;
    }
    final l$HideSiteHeader = HideSiteHeader;
    final lOther$HideSiteHeader = other.HideSiteHeader;
    if (_$data.containsKey('HideSiteHeader') !=
        other._$data.containsKey('HideSiteHeader')) {
      return false;
    }
    if (l$HideSiteHeader != lOther$HideSiteHeader) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MainContentArea = MainContentArea;
    final lOther$MainContentArea = other.MainContentArea;
    if (_$data.containsKey('MainContentArea') !=
        other._$data.containsKey('MainContentArea')) {
      return false;
    }
    if (l$MainContentArea != lOther$MainContentArea) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MetaDescription = MetaDescription;
    final lOther$MetaDescription = other.MetaDescription;
    if (_$data.containsKey('MetaDescription') !=
        other._$data.containsKey('MetaDescription')) {
      return false;
    }
    if (l$MetaDescription != lOther$MetaDescription) {
      return false;
    }
    final l$MetaKeywords = MetaKeywords;
    final lOther$MetaKeywords = other.MetaKeywords;
    if (_$data.containsKey('MetaKeywords') !=
        other._$data.containsKey('MetaKeywords')) {
      return false;
    }
    if (l$MetaKeywords != lOther$MetaKeywords) {
      return false;
    }
    final l$MetaTitle = MetaTitle;
    final lOther$MetaTitle = other.MetaTitle;
    if (_$data.containsKey('MetaTitle') !=
        other._$data.containsKey('MetaTitle')) {
      return false;
    }
    if (l$MetaTitle != lOther$MetaTitle) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$NewsPageLinks = NewsPageLinks;
    final lOther$NewsPageLinks = other.NewsPageLinks;
    if (_$data.containsKey('NewsPageLinks') !=
        other._$data.containsKey('NewsPageLinks')) {
      return false;
    }
    if (l$NewsPageLinks != lOther$NewsPageLinks) {
      return false;
    }
    final l$PageImage = PageImage;
    final lOther$PageImage = other.PageImage;
    if (_$data.containsKey('PageImage') !=
        other._$data.containsKey('PageImage')) {
      return false;
    }
    if (l$PageImage != lOther$PageImage) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$ProductPageLinks = ProductPageLinks;
    final lOther$ProductPageLinks = other.ProductPageLinks;
    if (_$data.containsKey('ProductPageLinks') !=
        other._$data.containsKey('ProductPageLinks')) {
      return false;
    }
    if (l$ProductPageLinks != lOther$ProductPageLinks) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$SearchPageLink = SearchPageLink;
    final lOther$SearchPageLink = other.SearchPageLink;
    if (_$data.containsKey('SearchPageLink') !=
        other._$data.containsKey('SearchPageLink')) {
      return false;
    }
    if (l$SearchPageLink != lOther$SearchPageLink) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$SiteLogotype = SiteLogotype;
    final lOther$SiteLogotype = other.SiteLogotype;
    if (_$data.containsKey('SiteLogotype') !=
        other._$data.containsKey('SiteLogotype')) {
      return false;
    }
    if (l$SiteLogotype != lOther$SiteLogotype) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$TeaserText = TeaserText;
    final lOther$TeaserText = other.TeaserText;
    if (_$data.containsKey('TeaserText') !=
        other._$data.containsKey('TeaserText')) {
      return false;
    }
    if (l$TeaserText != lOther$TeaserText) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$CompanyInformationPageLinks = CompanyInformationPageLinks;
    final l$ContactsPageLink = ContactsPageLink;
    final l$ContentArea = ContentArea;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$CustomerZonePageLinks = CustomerZonePageLinks;
    final l$DisableIndexing = DisableIndexing;
    final l$ExistingLanguages = ExistingLanguages;
    final l$GlobalNewsPageLink = GlobalNewsPageLink;
    final l$HideSiteFooter = HideSiteFooter;
    final l$HideSiteHeader = HideSiteHeader;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MainContentArea = MainContentArea;
    final l$MasterLanguage = MasterLanguage;
    final l$MetaDescription = MetaDescription;
    final l$MetaKeywords = MetaKeywords;
    final l$MetaTitle = MetaTitle;
    final l$Name = Name;
    final l$NewsPageLinks = NewsPageLinks;
    final l$PageImage = PageImage;
    final l$ParentLink = ParentLink;
    final l$ProductPageLinks = ProductPageLinks;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$SearchPageLink = SearchPageLink;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$SiteLogotype = SiteLogotype;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$TeaserText = TeaserText;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('CompanyInformationPageLinks')
          ? l$CompanyInformationPageLinks
          : const {},
      _$data.containsKey('ContactsPageLink') ? l$ContactsPageLink : const {},
      _$data.containsKey('ContentArea') ? l$ContentArea : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('CustomerZonePageLinks')
          ? l$CustomerZonePageLinks
          : const {},
      _$data.containsKey('DisableIndexing') ? l$DisableIndexing : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('GlobalNewsPageLink')
          ? l$GlobalNewsPageLink
          : const {},
      _$data.containsKey('HideSiteFooter') ? l$HideSiteFooter : const {},
      _$data.containsKey('HideSiteHeader') ? l$HideSiteHeader : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MainContentArea') ? l$MainContentArea : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MetaDescription') ? l$MetaDescription : const {},
      _$data.containsKey('MetaKeywords') ? l$MetaKeywords : const {},
      _$data.containsKey('MetaTitle') ? l$MetaTitle : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('NewsPageLinks') ? l$NewsPageLinks : const {},
      _$data.containsKey('PageImage') ? l$PageImage : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('ProductPageLinks') ? l$ProductPageLinks : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('SearchPageLink') ? l$SearchPageLink : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('SiteLogotype') ? l$SiteLogotype : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('TeaserText') ? l$TeaserText : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$StartPageWhereInput<TRes> {
  factory CopyWith$Input$StartPageWhereInput(
    Input$StartPageWhereInput instance,
    TRes Function(Input$StartPageWhereInput) then,
  ) = _CopyWithImpl$Input$StartPageWhereInput;

  factory CopyWith$Input$StartPageWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$StartPageWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$LinkItemNodeWhereInput? CompanyInformationPageLinks,
    Input$ContentModelReferenceWhereInput? ContactsPageLink,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$LinkItemNodeWhereInput? CustomerZonePageLinks,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$ContentModelReferenceWhereInput? GlobalNewsPageLink,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$LinkItemNodeWhereInput? NewsPageLinks,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$LinkItemNodeWhereInput? ProductPageLinks,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$ContentModelReferenceWhereInput? SearchPageLink,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$StartPageSiteLogotypeBlockWhereInput? SiteLogotype,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$StartPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$StartPageWhereInput?>? $_not,
    List<Input$StartPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$LinkItemNodeWhereInput<TRes> get CompanyInformationPageLinks;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContactsPageLink;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$LinkItemNodeWhereInput<TRes> get CustomerZonePageLinks;
  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get GlobalNewsPageLink;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter;
  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get MainContentArea;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription;
  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords;
  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$LinkItemNodeWhereInput<TRes> get NewsPageLinks;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$LinkItemNodeWhereInput<TRes> get ProductPageLinks;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get SearchPageLink;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$StartPageSiteLogotypeBlockWhereInput<TRes> get SiteLogotype;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$StartPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$StartPageWhereInput<
                      Input$StartPageWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$StartPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$StartPageWhereInput<
                      Input$StartPageWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$StartPageWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$StartPageWhereInput<
                      Input$StartPageWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$StartPageWhereInput<TRes>
    implements CopyWith$Input$StartPageWhereInput<TRes> {
  _CopyWithImpl$Input$StartPageWhereInput(
    this._instance,
    this._then,
  );

  final Input$StartPageWhereInput _instance;

  final TRes Function(Input$StartPageWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? CompanyInformationPageLinks = _undefined,
    Object? ContactsPageLink = _undefined,
    Object? ContentArea = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? CustomerZonePageLinks = _undefined,
    Object? DisableIndexing = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? GlobalNewsPageLink = _undefined,
    Object? HideSiteFooter = _undefined,
    Object? HideSiteHeader = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MainContentArea = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MetaDescription = _undefined,
    Object? MetaKeywords = _undefined,
    Object? MetaTitle = _undefined,
    Object? Name = _undefined,
    Object? NewsPageLinks = _undefined,
    Object? PageImage = _undefined,
    Object? ParentLink = _undefined,
    Object? ProductPageLinks = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? SearchPageLink = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? SiteLogotype = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? TeaserText = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$StartPageWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (CompanyInformationPageLinks != _undefined)
          'CompanyInformationPageLinks':
              (CompanyInformationPageLinks as Input$LinkItemNodeWhereInput?),
        if (ContactsPageLink != _undefined)
          'ContactsPageLink':
              (ContactsPageLink as Input$ContentModelReferenceWhereInput?),
        if (ContentArea != _undefined)
          'ContentArea':
              (ContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (CustomerZonePageLinks != _undefined)
          'CustomerZonePageLinks':
              (CustomerZonePageLinks as Input$LinkItemNodeWhereInput?),
        if (DisableIndexing != _undefined)
          'DisableIndexing': (DisableIndexing as Input$BoolFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (GlobalNewsPageLink != _undefined)
          'GlobalNewsPageLink':
              (GlobalNewsPageLink as Input$ContentModelReferenceWhereInput?),
        if (HideSiteFooter != _undefined)
          'HideSiteFooter': (HideSiteFooter as Input$BoolFilterInput?),
        if (HideSiteHeader != _undefined)
          'HideSiteHeader': (HideSiteHeader as Input$BoolFilterInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MainContentArea != _undefined)
          'MainContentArea':
              (MainContentArea as Input$ContentAreaItemModelSearchWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MetaDescription != _undefined)
          'MetaDescription':
              (MetaDescription as Input$SearchableStringFilterInput?),
        if (MetaKeywords != _undefined)
          'MetaKeywords': (MetaKeywords as Input$StringFilterInput?),
        if (MetaTitle != _undefined)
          'MetaTitle': (MetaTitle as Input$SearchableStringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (NewsPageLinks != _undefined)
          'NewsPageLinks': (NewsPageLinks as Input$LinkItemNodeWhereInput?),
        if (PageImage != _undefined)
          'PageImage': (PageImage as Input$ContentModelReferenceWhereInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (ProductPageLinks != _undefined)
          'ProductPageLinks':
              (ProductPageLinks as Input$LinkItemNodeWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (SearchPageLink != _undefined)
          'SearchPageLink':
              (SearchPageLink as Input$ContentModelReferenceWhereInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (SiteLogotype != _undefined)
          'SiteLogotype':
              (SiteLogotype as Input$StartPageSiteLogotypeBlockWhereInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (TeaserText != _undefined)
          'TeaserText': (TeaserText as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$StartPageWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$StartPageWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$StartPageWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$LinkItemNodeWhereInput<TRes> get CompanyInformationPageLinks {
    final local$CompanyInformationPageLinks =
        _instance.CompanyInformationPageLinks;
    return local$CompanyInformationPageLinks == null
        ? CopyWith$Input$LinkItemNodeWhereInput.stub(_then(_instance))
        : CopyWith$Input$LinkItemNodeWhereInput(
            local$CompanyInformationPageLinks,
            (e) => call(CompanyInformationPageLinks: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContactsPageLink {
    final local$ContactsPageLink = _instance.ContactsPageLink;
    return local$ContactsPageLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContactsPageLink, (e) => call(ContactsPageLink: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea {
    final local$ContentArea = _instance.ContentArea;
    return local$ContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$ContentArea, (e) => call(ContentArea: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$LinkItemNodeWhereInput<TRes> get CustomerZonePageLinks {
    final local$CustomerZonePageLinks = _instance.CustomerZonePageLinks;
    return local$CustomerZonePageLinks == null
        ? CopyWith$Input$LinkItemNodeWhereInput.stub(_then(_instance))
        : CopyWith$Input$LinkItemNodeWhereInput(
            local$CustomerZonePageLinks, (e) => call(CustomerZonePageLinks: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing {
    final local$DisableIndexing = _instance.DisableIndexing;
    return local$DisableIndexing == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$DisableIndexing, (e) => call(DisableIndexing: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get GlobalNewsPageLink {
    final local$GlobalNewsPageLink = _instance.GlobalNewsPageLink;
    return local$GlobalNewsPageLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$GlobalNewsPageLink, (e) => call(GlobalNewsPageLink: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter {
    final local$HideSiteFooter = _instance.HideSiteFooter;
    return local$HideSiteFooter == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteFooter, (e) => call(HideSiteFooter: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader {
    final local$HideSiteHeader = _instance.HideSiteHeader;
    return local$HideSiteHeader == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$HideSiteHeader, (e) => call(HideSiteHeader: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea {
    final local$MainContentArea = _instance.MainContentArea;
    return local$MainContentArea == null
        ? CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentAreaItemModelSearchWhereInput(
            local$MainContentArea, (e) => call(MainContentArea: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription {
    final local$MetaDescription = _instance.MetaDescription;
    return local$MetaDescription == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaDescription, (e) => call(MetaDescription: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords {
    final local$MetaKeywords = _instance.MetaKeywords;
    return local$MetaKeywords == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MetaKeywords, (e) => call(MetaKeywords: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle {
    final local$MetaTitle = _instance.MetaTitle;
    return local$MetaTitle == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$MetaTitle, (e) => call(MetaTitle: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$LinkItemNodeWhereInput<TRes> get NewsPageLinks {
    final local$NewsPageLinks = _instance.NewsPageLinks;
    return local$NewsPageLinks == null
        ? CopyWith$Input$LinkItemNodeWhereInput.stub(_then(_instance))
        : CopyWith$Input$LinkItemNodeWhereInput(
            local$NewsPageLinks, (e) => call(NewsPageLinks: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage {
    final local$PageImage = _instance.PageImage;
    return local$PageImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PageImage, (e) => call(PageImage: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$LinkItemNodeWhereInput<TRes> get ProductPageLinks {
    final local$ProductPageLinks = _instance.ProductPageLinks;
    return local$ProductPageLinks == null
        ? CopyWith$Input$LinkItemNodeWhereInput.stub(_then(_instance))
        : CopyWith$Input$LinkItemNodeWhereInput(
            local$ProductPageLinks, (e) => call(ProductPageLinks: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get SearchPageLink {
    final local$SearchPageLink = _instance.SearchPageLink;
    return local$SearchPageLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$SearchPageLink, (e) => call(SearchPageLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$StartPageSiteLogotypeBlockWhereInput<TRes> get SiteLogotype {
    final local$SiteLogotype = _instance.SiteLogotype;
    return local$SiteLogotype == null
        ? CopyWith$Input$StartPageSiteLogotypeBlockWhereInput.stub(
            _then(_instance))
        : CopyWith$Input$StartPageSiteLogotypeBlockWhereInput(
            local$SiteLogotype, (e) => call(SiteLogotype: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText {
    final local$TeaserText = _instance.TeaserText;
    return local$TeaserText == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$TeaserText, (e) => call(TeaserText: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$StartPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$StartPageWhereInput<
                          Input$StartPageWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$StartPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$StartPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$StartPageWhereInput<
                          Input$StartPageWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$StartPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$StartPageWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$StartPageWhereInput<
                          Input$StartPageWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$StartPageWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$StartPageWhereInput<TRes>
    implements CopyWith$Input$StartPageWhereInput<TRes> {
  _CopyWithStubImpl$Input$StartPageWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$LinkItemNodeWhereInput? CompanyInformationPageLinks,
    Input$ContentModelReferenceWhereInput? ContactsPageLink,
    Input$ContentAreaItemModelSearchWhereInput? ContentArea,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$LinkItemNodeWhereInput? CustomerZonePageLinks,
    Input$BoolFilterInput? DisableIndexing,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$ContentModelReferenceWhereInput? GlobalNewsPageLink,
    Input$BoolFilterInput? HideSiteFooter,
    Input$BoolFilterInput? HideSiteHeader,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentAreaItemModelSearchWhereInput? MainContentArea,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? MetaDescription,
    Input$StringFilterInput? MetaKeywords,
    Input$SearchableStringFilterInput? MetaTitle,
    Input$SearchableStringFilterInput? Name,
    Input$LinkItemNodeWhereInput? NewsPageLinks,
    Input$ContentModelReferenceWhereInput? PageImage,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$LinkItemNodeWhereInput? ProductPageLinks,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$ContentModelReferenceWhereInput? SearchPageLink,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$StartPageSiteLogotypeBlockWhereInput? SiteLogotype,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? TeaserText,
    Input$StringFilterInput? Url,
    List<Input$StartPageWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$StartPageWhereInput?>? $_not,
    List<Input$StartPageWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$LinkItemNodeWhereInput<TRes> get CompanyInformationPageLinks =>
      CopyWith$Input$LinkItemNodeWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContactsPageLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes> get ContentArea =>
      CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$LinkItemNodeWhereInput<TRes> get CustomerZonePageLinks =>
      CopyWith$Input$LinkItemNodeWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get DisableIndexing =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get GlobalNewsPageLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteFooter =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get HideSiteHeader =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentAreaItemModelSearchWhereInput<TRes>
      get MainContentArea =>
          CopyWith$Input$ContentAreaItemModelSearchWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaDescription =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MetaKeywords =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get MetaTitle =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$LinkItemNodeWhereInput<TRes> get NewsPageLinks =>
      CopyWith$Input$LinkItemNodeWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PageImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$LinkItemNodeWhereInput<TRes> get ProductPageLinks =>
      CopyWith$Input$LinkItemNodeWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get SearchPageLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StartPageSiteLogotypeBlockWhereInput<TRes> get SiteLogotype =>
      CopyWith$Input$StartPageSiteLogotypeBlockWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get TeaserText =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$StringFilterInput {
  factory Input$StringFilterInput({
    int? boost,
    String? endsWith,
    String? eq,
    bool? exist,
    bool? fuzzy,
    List<String?>? $in,
    String? like,
    String? notEq,
    List<String?>? notIn,
    String? startsWith,
    List<Enum$SynonymSlot?>? synonyms,
  }) =>
      Input$StringFilterInput._({
        if (boost != null) r'boost': boost,
        if (endsWith != null) r'endsWith': endsWith,
        if (eq != null) r'eq': eq,
        if (exist != null) r'exist': exist,
        if (fuzzy != null) r'fuzzy': fuzzy,
        if ($in != null) r'in': $in,
        if (like != null) r'like': like,
        if (notEq != null) r'notEq': notEq,
        if (notIn != null) r'notIn': notIn,
        if (startsWith != null) r'startsWith': startsWith,
        if (synonyms != null) r'synonyms': synonyms,
      });

  Input$StringFilterInput._(this._$data);

  factory Input$StringFilterInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('boost')) {
      final l$boost = data['boost'];
      result$data['boost'] = (l$boost as int?);
    }
    if (data.containsKey('endsWith')) {
      final l$endsWith = data['endsWith'];
      result$data['endsWith'] = (l$endsWith as String?);
    }
    if (data.containsKey('eq')) {
      final l$eq = data['eq'];
      result$data['eq'] = (l$eq as String?);
    }
    if (data.containsKey('exist')) {
      final l$exist = data['exist'];
      result$data['exist'] = (l$exist as bool?);
    }
    if (data.containsKey('fuzzy')) {
      final l$fuzzy = data['fuzzy'];
      result$data['fuzzy'] = (l$fuzzy as bool?);
    }
    if (data.containsKey('in')) {
      final l$$in = data['in'];
      result$data['in'] =
          (l$$in as List<dynamic>?)?.map((e) => (e as String?)).toList();
    }
    if (data.containsKey('like')) {
      final l$like = data['like'];
      result$data['like'] = (l$like as String?);
    }
    if (data.containsKey('notEq')) {
      final l$notEq = data['notEq'];
      result$data['notEq'] = (l$notEq as String?);
    }
    if (data.containsKey('notIn')) {
      final l$notIn = data['notIn'];
      result$data['notIn'] =
          (l$notIn as List<dynamic>?)?.map((e) => (e as String?)).toList();
    }
    if (data.containsKey('startsWith')) {
      final l$startsWith = data['startsWith'];
      result$data['startsWith'] = (l$startsWith as String?);
    }
    if (data.containsKey('synonyms')) {
      final l$synonyms = data['synonyms'];
      result$data['synonyms'] = (l$synonyms as List<dynamic>?)
          ?.map((e) =>
              e == null ? null : fromJson$Enum$SynonymSlot((e as String)))
          .toList();
    }
    return Input$StringFilterInput._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get boost => (_$data['boost'] as int?);

  String? get endsWith => (_$data['endsWith'] as String?);

  String? get eq => (_$data['eq'] as String?);

  bool? get exist => (_$data['exist'] as bool?);

  bool? get fuzzy => (_$data['fuzzy'] as bool?);

  List<String?>? get $in => (_$data['in'] as List<String?>?);

  String? get like => (_$data['like'] as String?);

  String? get notEq => (_$data['notEq'] as String?);

  List<String?>? get notIn => (_$data['notIn'] as List<String?>?);

  String? get startsWith => (_$data['startsWith'] as String?);

  List<Enum$SynonymSlot?>? get synonyms =>
      (_$data['synonyms'] as List<Enum$SynonymSlot?>?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('boost')) {
      final l$boost = boost;
      result$data['boost'] = l$boost;
    }
    if (_$data.containsKey('endsWith')) {
      final l$endsWith = endsWith;
      result$data['endsWith'] = l$endsWith;
    }
    if (_$data.containsKey('eq')) {
      final l$eq = eq;
      result$data['eq'] = l$eq;
    }
    if (_$data.containsKey('exist')) {
      final l$exist = exist;
      result$data['exist'] = l$exist;
    }
    if (_$data.containsKey('fuzzy')) {
      final l$fuzzy = fuzzy;
      result$data['fuzzy'] = l$fuzzy;
    }
    if (_$data.containsKey('in')) {
      final l$$in = $in;
      result$data['in'] = l$$in?.map((e) => e).toList();
    }
    if (_$data.containsKey('like')) {
      final l$like = like;
      result$data['like'] = l$like;
    }
    if (_$data.containsKey('notEq')) {
      final l$notEq = notEq;
      result$data['notEq'] = l$notEq;
    }
    if (_$data.containsKey('notIn')) {
      final l$notIn = notIn;
      result$data['notIn'] = l$notIn?.map((e) => e).toList();
    }
    if (_$data.containsKey('startsWith')) {
      final l$startsWith = startsWith;
      result$data['startsWith'] = l$startsWith;
    }
    if (_$data.containsKey('synonyms')) {
      final l$synonyms = synonyms;
      result$data['synonyms'] = l$synonyms
          ?.map((e) => e == null ? null : toJson$Enum$SynonymSlot(e))
          .toList();
    }
    return result$data;
  }

  CopyWith$Input$StringFilterInput<Input$StringFilterInput> get copyWith =>
      CopyWith$Input$StringFilterInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$StringFilterInput || runtimeType != other.runtimeType) {
      return false;
    }
    final l$boost = boost;
    final lOther$boost = other.boost;
    if (_$data.containsKey('boost') != other._$data.containsKey('boost')) {
      return false;
    }
    if (l$boost != lOther$boost) {
      return false;
    }
    final l$endsWith = endsWith;
    final lOther$endsWith = other.endsWith;
    if (_$data.containsKey('endsWith') !=
        other._$data.containsKey('endsWith')) {
      return false;
    }
    if (l$endsWith != lOther$endsWith) {
      return false;
    }
    final l$eq = eq;
    final lOther$eq = other.eq;
    if (_$data.containsKey('eq') != other._$data.containsKey('eq')) {
      return false;
    }
    if (l$eq != lOther$eq) {
      return false;
    }
    final l$exist = exist;
    final lOther$exist = other.exist;
    if (_$data.containsKey('exist') != other._$data.containsKey('exist')) {
      return false;
    }
    if (l$exist != lOther$exist) {
      return false;
    }
    final l$fuzzy = fuzzy;
    final lOther$fuzzy = other.fuzzy;
    if (_$data.containsKey('fuzzy') != other._$data.containsKey('fuzzy')) {
      return false;
    }
    if (l$fuzzy != lOther$fuzzy) {
      return false;
    }
    final l$$in = $in;
    final lOther$$in = other.$in;
    if (_$data.containsKey('in') != other._$data.containsKey('in')) {
      return false;
    }
    if (l$$in != null && lOther$$in != null) {
      if (l$$in.length != lOther$$in.length) {
        return false;
      }
      for (int i = 0; i < l$$in.length; i++) {
        final l$$in$entry = l$$in[i];
        final lOther$$in$entry = lOther$$in[i];
        if (l$$in$entry != lOther$$in$entry) {
          return false;
        }
      }
    } else if (l$$in != lOther$$in) {
      return false;
    }
    final l$like = like;
    final lOther$like = other.like;
    if (_$data.containsKey('like') != other._$data.containsKey('like')) {
      return false;
    }
    if (l$like != lOther$like) {
      return false;
    }
    final l$notEq = notEq;
    final lOther$notEq = other.notEq;
    if (_$data.containsKey('notEq') != other._$data.containsKey('notEq')) {
      return false;
    }
    if (l$notEq != lOther$notEq) {
      return false;
    }
    final l$notIn = notIn;
    final lOther$notIn = other.notIn;
    if (_$data.containsKey('notIn') != other._$data.containsKey('notIn')) {
      return false;
    }
    if (l$notIn != null && lOther$notIn != null) {
      if (l$notIn.length != lOther$notIn.length) {
        return false;
      }
      for (int i = 0; i < l$notIn.length; i++) {
        final l$notIn$entry = l$notIn[i];
        final lOther$notIn$entry = lOther$notIn[i];
        if (l$notIn$entry != lOther$notIn$entry) {
          return false;
        }
      }
    } else if (l$notIn != lOther$notIn) {
      return false;
    }
    final l$startsWith = startsWith;
    final lOther$startsWith = other.startsWith;
    if (_$data.containsKey('startsWith') !=
        other._$data.containsKey('startsWith')) {
      return false;
    }
    if (l$startsWith != lOther$startsWith) {
      return false;
    }
    final l$synonyms = synonyms;
    final lOther$synonyms = other.synonyms;
    if (_$data.containsKey('synonyms') !=
        other._$data.containsKey('synonyms')) {
      return false;
    }
    if (l$synonyms != null && lOther$synonyms != null) {
      if (l$synonyms.length != lOther$synonyms.length) {
        return false;
      }
      for (int i = 0; i < l$synonyms.length; i++) {
        final l$synonyms$entry = l$synonyms[i];
        final lOther$synonyms$entry = lOther$synonyms[i];
        if (l$synonyms$entry != lOther$synonyms$entry) {
          return false;
        }
      }
    } else if (l$synonyms != lOther$synonyms) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$boost = boost;
    final l$endsWith = endsWith;
    final l$eq = eq;
    final l$exist = exist;
    final l$fuzzy = fuzzy;
    final l$$in = $in;
    final l$like = like;
    final l$notEq = notEq;
    final l$notIn = notIn;
    final l$startsWith = startsWith;
    final l$synonyms = synonyms;
    return Object.hashAll([
      _$data.containsKey('boost') ? l$boost : const {},
      _$data.containsKey('endsWith') ? l$endsWith : const {},
      _$data.containsKey('eq') ? l$eq : const {},
      _$data.containsKey('exist') ? l$exist : const {},
      _$data.containsKey('fuzzy') ? l$fuzzy : const {},
      _$data.containsKey('in')
          ? l$$in == null
              ? null
              : Object.hashAll(l$$in.map((v) => v))
          : const {},
      _$data.containsKey('like') ? l$like : const {},
      _$data.containsKey('notEq') ? l$notEq : const {},
      _$data.containsKey('notIn')
          ? l$notIn == null
              ? null
              : Object.hashAll(l$notIn.map((v) => v))
          : const {},
      _$data.containsKey('startsWith') ? l$startsWith : const {},
      _$data.containsKey('synonyms')
          ? l$synonyms == null
              ? null
              : Object.hashAll(l$synonyms.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$StringFilterInput<TRes> {
  factory CopyWith$Input$StringFilterInput(
    Input$StringFilterInput instance,
    TRes Function(Input$StringFilterInput) then,
  ) = _CopyWithImpl$Input$StringFilterInput;

  factory CopyWith$Input$StringFilterInput.stub(TRes res) =
      _CopyWithStubImpl$Input$StringFilterInput;

  TRes call({
    int? boost,
    String? endsWith,
    String? eq,
    bool? exist,
    bool? fuzzy,
    List<String?>? $in,
    String? like,
    String? notEq,
    List<String?>? notIn,
    String? startsWith,
    List<Enum$SynonymSlot?>? synonyms,
  });
}

class _CopyWithImpl$Input$StringFilterInput<TRes>
    implements CopyWith$Input$StringFilterInput<TRes> {
  _CopyWithImpl$Input$StringFilterInput(
    this._instance,
    this._then,
  );

  final Input$StringFilterInput _instance;

  final TRes Function(Input$StringFilterInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? boost = _undefined,
    Object? endsWith = _undefined,
    Object? eq = _undefined,
    Object? exist = _undefined,
    Object? fuzzy = _undefined,
    Object? $in = _undefined,
    Object? like = _undefined,
    Object? notEq = _undefined,
    Object? notIn = _undefined,
    Object? startsWith = _undefined,
    Object? synonyms = _undefined,
  }) =>
      _then(Input$StringFilterInput._({
        ..._instance._$data,
        if (boost != _undefined) 'boost': (boost as int?),
        if (endsWith != _undefined) 'endsWith': (endsWith as String?),
        if (eq != _undefined) 'eq': (eq as String?),
        if (exist != _undefined) 'exist': (exist as bool?),
        if (fuzzy != _undefined) 'fuzzy': (fuzzy as bool?),
        if ($in != _undefined) 'in': ($in as List<String?>?),
        if (like != _undefined) 'like': (like as String?),
        if (notEq != _undefined) 'notEq': (notEq as String?),
        if (notIn != _undefined) 'notIn': (notIn as List<String?>?),
        if (startsWith != _undefined) 'startsWith': (startsWith as String?),
        if (synonyms != _undefined)
          'synonyms': (synonyms as List<Enum$SynonymSlot?>?),
      }));
}

class _CopyWithStubImpl$Input$StringFilterInput<TRes>
    implements CopyWith$Input$StringFilterInput<TRes> {
  _CopyWithStubImpl$Input$StringFilterInput(this._res);

  TRes _res;

  call({
    int? boost,
    String? endsWith,
    String? eq,
    bool? exist,
    bool? fuzzy,
    List<String?>? $in,
    String? like,
    String? notEq,
    List<String?>? notIn,
    String? startsWith,
    List<Enum$SynonymSlot?>? synonyms,
  }) =>
      _res;
}

class Input$TeaserBlockOrderByInput {
  factory Input$TeaserBlockOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentModelReferenceOrderByInput? Link,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Text,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$TeaserBlockOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (Heading != null) r'Heading': Heading,
        if (Image != null) r'Image': Image,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (Link != null) r'Link': Link,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Text != null) r'Text': Text,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$TeaserBlockOrderByInput._(this._$data);

  factory Input$TeaserBlockOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : fromJson$Enum$OrderBy((l$Heading as String));
    }
    if (data.containsKey('Image')) {
      final l$Image = data['Image'];
      result$data['Image'] = l$Image == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$Image as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('Link')) {
      final l$Link = data['Link'];
      result$data['Link'] = l$Link == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$Link as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Text')) {
      final l$Text = data['Text'];
      result$data['Text'] =
          l$Text == null ? null : fromJson$Enum$OrderBy((l$Text as String));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$TeaserBlockOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Heading => (_$data['Heading'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get Image =>
      (_$data['Image'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get Link =>
      (_$data['Link'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Text => (_$data['Text'] as Enum$OrderBy?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] =
          l$Heading == null ? null : toJson$Enum$OrderBy(l$Heading);
    }
    if (_$data.containsKey('Image')) {
      final l$Image = Image;
      result$data['Image'] = l$Image?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('Link')) {
      final l$Link = Link;
      result$data['Link'] = l$Link?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Text')) {
      final l$Text = Text;
      result$data['Text'] = l$Text == null ? null : toJson$Enum$OrderBy(l$Text);
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$TeaserBlockOrderByInput<Input$TeaserBlockOrderByInput>
      get copyWith => CopyWith$Input$TeaserBlockOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$TeaserBlockOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$Image = Image;
    final lOther$Image = other.Image;
    if (_$data.containsKey('Image') != other._$data.containsKey('Image')) {
      return false;
    }
    if (l$Image != lOther$Image) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$Link = Link;
    final lOther$Link = other.Link;
    if (_$data.containsKey('Link') != other._$data.containsKey('Link')) {
      return false;
    }
    if (l$Link != lOther$Link) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Text = Text;
    final lOther$Text = other.Text;
    if (_$data.containsKey('Text') != other._$data.containsKey('Text')) {
      return false;
    }
    if (l$Text != lOther$Text) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$Heading = Heading;
    final l$Image = Image;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$Link = Link;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Text = Text;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('Image') ? l$Image : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('Link') ? l$Link : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Text') ? l$Text : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$TeaserBlockOrderByInput<TRes> {
  factory CopyWith$Input$TeaserBlockOrderByInput(
    Input$TeaserBlockOrderByInput instance,
    TRes Function(Input$TeaserBlockOrderByInput) then,
  ) = _CopyWithImpl$Input$TeaserBlockOrderByInput;

  factory CopyWith$Input$TeaserBlockOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$TeaserBlockOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentModelReferenceOrderByInput? Link,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Text,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Link;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
}

class _CopyWithImpl$Input$TeaserBlockOrderByInput<TRes>
    implements CopyWith$Input$TeaserBlockOrderByInput<TRes> {
  _CopyWithImpl$Input$TeaserBlockOrderByInput(
    this._instance,
    this._then,
  );

  final Input$TeaserBlockOrderByInput _instance;

  final TRes Function(Input$TeaserBlockOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? Heading = _undefined,
    Object? Image = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? Link = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Text = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$TeaserBlockOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (Heading != _undefined) 'Heading': (Heading as Enum$OrderBy?),
        if (Image != _undefined)
          'Image': (Image as Input$ContentModelReferenceOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (Link != _undefined)
          'Link': (Link as Input$ContentModelReferenceOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Text != _undefined) 'Text': (Text as Enum$OrderBy?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image {
    final local$Image = _instance.Image;
    return local$Image == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$Image, (e) => call(Image: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Link {
    final local$Link = _instance.Link;
    return local$Link == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$Link, (e) => call(Link: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }
}

class _CopyWithStubImpl$Input$TeaserBlockOrderByInput<TRes>
    implements CopyWith$Input$TeaserBlockOrderByInput<TRes> {
  _CopyWithStubImpl$Input$TeaserBlockOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? Heading,
    Input$ContentModelReferenceOrderByInput? Image,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentModelReferenceOrderByInput? Link,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Enum$OrderBy? Text,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Image =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get Link =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);
}

class Input$TeaserBlockWhereInput {
  factory Input$TeaserBlockWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentModelReferenceWhereInput? Link,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? Text,
    Input$StringFilterInput? Url,
    List<Input$TeaserBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$TeaserBlockWhereInput?>? $_not,
    List<Input$TeaserBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$TeaserBlockWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (Heading != null) r'Heading': Heading,
        if (Image != null) r'Image': Image,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (Link != null) r'Link': Link,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Text != null) r'Text': Text,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$TeaserBlockWhereInput._(this._$data);

  factory Input$TeaserBlockWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('Heading')) {
      final l$Heading = data['Heading'];
      result$data['Heading'] = l$Heading == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Heading as Map<String, dynamic>));
    }
    if (data.containsKey('Image')) {
      final l$Image = data['Image'];
      result$data['Image'] = l$Image == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$Image as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('Link')) {
      final l$Link = data['Link'];
      result$data['Link'] = l$Link == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$Link as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Text')) {
      final l$Text = data['Text'];
      result$data['Text'] = l$Text == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Text as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$TeaserBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$TeaserBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$TeaserBlockWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$TeaserBlockWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Heading =>
      (_$data['Heading'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get Image =>
      (_$data['Image'] as Input$ContentModelReferenceWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentModelReferenceWhereInput? get Link =>
      (_$data['Link'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get Text =>
      (_$data['Text'] as Input$SearchableStringFilterInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$TeaserBlockWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$TeaserBlockWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$TeaserBlockWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$TeaserBlockWhereInput?>?);

  List<Input$TeaserBlockWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$TeaserBlockWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('Heading')) {
      final l$Heading = Heading;
      result$data['Heading'] = l$Heading?.toJson();
    }
    if (_$data.containsKey('Image')) {
      final l$Image = Image;
      result$data['Image'] = l$Image?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('Link')) {
      final l$Link = Link;
      result$data['Link'] = l$Link?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Text')) {
      final l$Text = Text;
      result$data['Text'] = l$Text?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$TeaserBlockWhereInput<Input$TeaserBlockWhereInput>
      get copyWith => CopyWith$Input$TeaserBlockWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$TeaserBlockWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$Heading = Heading;
    final lOther$Heading = other.Heading;
    if (_$data.containsKey('Heading') != other._$data.containsKey('Heading')) {
      return false;
    }
    if (l$Heading != lOther$Heading) {
      return false;
    }
    final l$Image = Image;
    final lOther$Image = other.Image;
    if (_$data.containsKey('Image') != other._$data.containsKey('Image')) {
      return false;
    }
    if (l$Image != lOther$Image) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$Link = Link;
    final lOther$Link = other.Link;
    if (_$data.containsKey('Link') != other._$data.containsKey('Link')) {
      return false;
    }
    if (l$Link != lOther$Link) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Text = Text;
    final lOther$Text = other.Text;
    if (_$data.containsKey('Text') != other._$data.containsKey('Text')) {
      return false;
    }
    if (l$Text != lOther$Text) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$Heading = Heading;
    final l$Image = Image;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$Link = Link;
    final l$MasterLanguage = MasterLanguage;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Text = Text;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('Heading') ? l$Heading : const {},
      _$data.containsKey('Image') ? l$Image : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('Link') ? l$Link : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Text') ? l$Text : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$TeaserBlockWhereInput<TRes> {
  factory CopyWith$Input$TeaserBlockWhereInput(
    Input$TeaserBlockWhereInput instance,
    TRes Function(Input$TeaserBlockWhereInput) then,
  ) = _CopyWithImpl$Input$TeaserBlockWhereInput;

  factory CopyWith$Input$TeaserBlockWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$TeaserBlockWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentModelReferenceWhereInput? Link,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? Text,
    Input$StringFilterInput? Url,
    List<Input$TeaserBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$TeaserBlockWhereInput?>? $_not,
    List<Input$TeaserBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Link;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Text;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$TeaserBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$TeaserBlockWhereInput<
                      Input$TeaserBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$TeaserBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$TeaserBlockWhereInput<
                      Input$TeaserBlockWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$TeaserBlockWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$TeaserBlockWhereInput<
                      Input$TeaserBlockWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$TeaserBlockWhereInput<TRes>
    implements CopyWith$Input$TeaserBlockWhereInput<TRes> {
  _CopyWithImpl$Input$TeaserBlockWhereInput(
    this._instance,
    this._then,
  );

  final Input$TeaserBlockWhereInput _instance;

  final TRes Function(Input$TeaserBlockWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? Heading = _undefined,
    Object? Image = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? Link = _undefined,
    Object? MasterLanguage = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Text = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$TeaserBlockWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (Heading != _undefined)
          'Heading': (Heading as Input$SearchableStringFilterInput?),
        if (Image != _undefined)
          'Image': (Image as Input$ContentModelReferenceWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (Link != _undefined)
          'Link': (Link as Input$ContentModelReferenceWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Text != _undefined)
          'Text': (Text as Input$SearchableStringFilterInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$TeaserBlockWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$TeaserBlockWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$TeaserBlockWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading {
    final local$Heading = _instance.Heading;
    return local$Heading == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Heading, (e) => call(Heading: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image {
    final local$Image = _instance.Image;
    return local$Image == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$Image, (e) => call(Image: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Link {
    final local$Link = _instance.Link;
    return local$Link == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$Link, (e) => call(Link: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Text {
    final local$Text = _instance.Text;
    return local$Text == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Text, (e) => call(Text: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$TeaserBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$TeaserBlockWhereInput<
                          Input$TeaserBlockWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$TeaserBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$TeaserBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$TeaserBlockWhereInput<
                          Input$TeaserBlockWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$TeaserBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$TeaserBlockWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$TeaserBlockWhereInput<
                          Input$TeaserBlockWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$TeaserBlockWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$TeaserBlockWhereInput<TRes>
    implements CopyWith$Input$TeaserBlockWhereInput<TRes> {
  _CopyWithStubImpl$Input$TeaserBlockWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$SearchableStringFilterInput? Heading,
    Input$ContentModelReferenceWhereInput? Image,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentModelReferenceWhereInput? Link,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$SearchableStringFilterInput? Text,
    Input$StringFilterInput? Url,
    List<Input$TeaserBlockWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$TeaserBlockWhereInput?>? $_not,
    List<Input$TeaserBlockWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Heading =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Image =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get Link =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Text =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$VectorImageFileOrderByInput {
  factory Input$VectorImageFileOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$VectorImageFileOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (Content != null) r'Content': Content,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MimeType != null) r'MimeType': MimeType,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Thumbnail != null) r'Thumbnail': Thumbnail,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$VectorImageFileOrderByInput._(this._$data);

  factory Input$VectorImageFileOrderByInput.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('Content')) {
      final l$Content = data['Content'];
      result$data['Content'] = l$Content == null
          ? null
          : fromJson$Enum$OrderBy((l$Content as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MimeType')) {
      final l$MimeType = data['MimeType'];
      result$data['MimeType'] = l$MimeType == null
          ? null
          : fromJson$Enum$OrderBy((l$MimeType as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Thumbnail')) {
      final l$Thumbnail = data['Thumbnail'];
      result$data['Thumbnail'] = l$Thumbnail == null
          ? null
          : Input$BlobModelOrderByInput.fromJson(
              (l$Thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$VectorImageFileOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Enum$OrderBy? get Content => (_$data['Content'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MimeType => (_$data['MimeType'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Input$BlobModelOrderByInput? get Thumbnail =>
      (_$data['Thumbnail'] as Input$BlobModelOrderByInput?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('Content')) {
      final l$Content = Content;
      result$data['Content'] =
          l$Content == null ? null : toJson$Enum$OrderBy(l$Content);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MimeType')) {
      final l$MimeType = MimeType;
      result$data['MimeType'] =
          l$MimeType == null ? null : toJson$Enum$OrderBy(l$MimeType);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Thumbnail')) {
      final l$Thumbnail = Thumbnail;
      result$data['Thumbnail'] = l$Thumbnail?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$VectorImageFileOrderByInput<Input$VectorImageFileOrderByInput>
      get copyWith => CopyWith$Input$VectorImageFileOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$VectorImageFileOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$Content = Content;
    final lOther$Content = other.Content;
    if (_$data.containsKey('Content') != other._$data.containsKey('Content')) {
      return false;
    }
    if (l$Content != lOther$Content) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MimeType = MimeType;
    final lOther$MimeType = other.MimeType;
    if (_$data.containsKey('MimeType') !=
        other._$data.containsKey('MimeType')) {
      return false;
    }
    if (l$MimeType != lOther$MimeType) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Thumbnail = Thumbnail;
    final lOther$Thumbnail = other.Thumbnail;
    if (_$data.containsKey('Thumbnail') !=
        other._$data.containsKey('Thumbnail')) {
      return false;
    }
    if (l$Thumbnail != lOther$Thumbnail) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$Content = Content;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MimeType = MimeType;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Thumbnail = Thumbnail;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('Content') ? l$Content : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MimeType') ? l$MimeType : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Thumbnail') ? l$Thumbnail : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$VectorImageFileOrderByInput<TRes> {
  factory CopyWith$Input$VectorImageFileOrderByInput(
    Input$VectorImageFileOrderByInput instance,
    TRes Function(Input$VectorImageFileOrderByInput) then,
  ) = _CopyWithImpl$Input$VectorImageFileOrderByInput;

  factory CopyWith$Input$VectorImageFileOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$VectorImageFileOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail;
}

class _CopyWithImpl$Input$VectorImageFileOrderByInput<TRes>
    implements CopyWith$Input$VectorImageFileOrderByInput<TRes> {
  _CopyWithImpl$Input$VectorImageFileOrderByInput(
    this._instance,
    this._then,
  );

  final Input$VectorImageFileOrderByInput _instance;

  final TRes Function(Input$VectorImageFileOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? Content = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MimeType = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Thumbnail = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$VectorImageFileOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (Content != _undefined) 'Content': (Content as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MimeType != _undefined) 'MimeType': (MimeType as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Thumbnail != _undefined)
          'Thumbnail': (Thumbnail as Input$BlobModelOrderByInput?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail {
    final local$Thumbnail = _instance.Thumbnail;
    return local$Thumbnail == null
        ? CopyWith$Input$BlobModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$BlobModelOrderByInput(
            local$Thumbnail, (e) => call(Thumbnail: e));
  }
}

class _CopyWithStubImpl$Input$VectorImageFileOrderByInput<TRes>
    implements CopyWith$Input$VectorImageFileOrderByInput<TRes> {
  _CopyWithStubImpl$Input$VectorImageFileOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail =>
      CopyWith$Input$BlobModelOrderByInput.stub(_res);
}

class Input$VectorImageFileWhereInput {
  factory Input$VectorImageFileWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$VectorImageFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$VectorImageFileWhereInput?>? $_not,
    List<Input$VectorImageFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$VectorImageFileWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (Content != null) r'Content': Content,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MimeType != null) r'MimeType': MimeType,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Thumbnail != null) r'Thumbnail': Thumbnail,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$VectorImageFileWhereInput._(this._$data);

  factory Input$VectorImageFileWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('Content')) {
      final l$Content = data['Content'];
      result$data['Content'] = l$Content == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Content as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MimeType')) {
      final l$MimeType = data['MimeType'];
      result$data['MimeType'] = l$MimeType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MimeType as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Thumbnail')) {
      final l$Thumbnail = data['Thumbnail'];
      result$data['Thumbnail'] = l$Thumbnail == null
          ? null
          : Input$BlobModelWhereInput.fromJson(
              (l$Thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$VectorImageFileWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$VectorImageFileWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$VectorImageFileWhereInput.fromJson(
                  (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$VectorImageFileWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get Content =>
      (_$data['Content'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$StringFilterInput? get MimeType =>
      (_$data['MimeType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$BlobModelWhereInput? get Thumbnail =>
      (_$data['Thumbnail'] as Input$BlobModelWhereInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$VectorImageFileWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$VectorImageFileWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$VectorImageFileWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$VectorImageFileWhereInput?>?);

  List<Input$VectorImageFileWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$VectorImageFileWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('Content')) {
      final l$Content = Content;
      result$data['Content'] = l$Content?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MimeType')) {
      final l$MimeType = MimeType;
      result$data['MimeType'] = l$MimeType?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Thumbnail')) {
      final l$Thumbnail = Thumbnail;
      result$data['Thumbnail'] = l$Thumbnail?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$VectorImageFileWhereInput<Input$VectorImageFileWhereInput>
      get copyWith => CopyWith$Input$VectorImageFileWhereInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$VectorImageFileWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$Content = Content;
    final lOther$Content = other.Content;
    if (_$data.containsKey('Content') != other._$data.containsKey('Content')) {
      return false;
    }
    if (l$Content != lOther$Content) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MimeType = MimeType;
    final lOther$MimeType = other.MimeType;
    if (_$data.containsKey('MimeType') !=
        other._$data.containsKey('MimeType')) {
      return false;
    }
    if (l$MimeType != lOther$MimeType) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Thumbnail = Thumbnail;
    final lOther$Thumbnail = other.Thumbnail;
    if (_$data.containsKey('Thumbnail') !=
        other._$data.containsKey('Thumbnail')) {
      return false;
    }
    if (l$Thumbnail != lOther$Thumbnail) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$Content = Content;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MimeType = MimeType;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Thumbnail = Thumbnail;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('Content') ? l$Content : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MimeType') ? l$MimeType : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Thumbnail') ? l$Thumbnail : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$VectorImageFileWhereInput<TRes> {
  factory CopyWith$Input$VectorImageFileWhereInput(
    Input$VectorImageFileWhereInput instance,
    TRes Function(Input$VectorImageFileWhereInput) then,
  ) = _CopyWithImpl$Input$VectorImageFileWhereInput;

  factory CopyWith$Input$VectorImageFileWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$VectorImageFileWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$VectorImageFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$VectorImageFileWhereInput?>? $_not,
    List<Input$VectorImageFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Content;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$StringFilterInput<TRes> get MimeType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$VectorImageFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$VectorImageFileWhereInput<
                      Input$VectorImageFileWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$VectorImageFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$VectorImageFileWhereInput<
                      Input$VectorImageFileWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$VectorImageFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$VectorImageFileWhereInput<
                      Input$VectorImageFileWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$VectorImageFileWhereInput<TRes>
    implements CopyWith$Input$VectorImageFileWhereInput<TRes> {
  _CopyWithImpl$Input$VectorImageFileWhereInput(
    this._instance,
    this._then,
  );

  final Input$VectorImageFileWhereInput _instance;

  final TRes Function(Input$VectorImageFileWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? Content = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MimeType = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Thumbnail = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$VectorImageFileWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (Content != _undefined)
          'Content': (Content as Input$SearchableStringFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MimeType != _undefined)
          'MimeType': (MimeType as Input$StringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Thumbnail != _undefined)
          'Thumbnail': (Thumbnail as Input$BlobModelWhereInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$VectorImageFileWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$VectorImageFileWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$VectorImageFileWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Content {
    final local$Content = _instance.Content;
    return local$Content == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Content, (e) => call(Content: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MimeType {
    final local$MimeType = _instance.MimeType;
    return local$MimeType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MimeType, (e) => call(MimeType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail {
    final local$Thumbnail = _instance.Thumbnail;
    return local$Thumbnail == null
        ? CopyWith$Input$BlobModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$BlobModelWhereInput(
            local$Thumbnail, (e) => call(Thumbnail: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$VectorImageFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$VectorImageFileWhereInput<
                          Input$VectorImageFileWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$VectorImageFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$VectorImageFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$VectorImageFileWhereInput<
                          Input$VectorImageFileWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$VectorImageFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$VectorImageFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$VectorImageFileWhereInput<
                          Input$VectorImageFileWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$VectorImageFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$VectorImageFileWhereInput<TRes>
    implements CopyWith$Input$VectorImageFileWhereInput<TRes> {
  _CopyWithStubImpl$Input$VectorImageFileWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$VectorImageFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$VectorImageFileWhereInput?>? $_not,
    List<Input$VectorImageFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Content =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MimeType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail =>
      CopyWith$Input$BlobModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

class Input$VideoFileOrderByInput {
  factory Input$VideoFileOrderByInput({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Copyright,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentModelReferenceOrderByInput? PreviewImage,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      Input$VideoFileOrderByInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (Content != null) r'Content': Content,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Copyright != null) r'Copyright': Copyright,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MimeType != null) r'MimeType': MimeType,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (PreviewImage != null) r'PreviewImage': PreviewImage,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Thumbnail != null) r'Thumbnail': Thumbnail,
        if (Url != null) r'Url': Url,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_minimumScore != null) r'_minimumScore': $_minimumScore,
        if ($_modified != null) r'_modified': $_modified,
        if ($_ranking != null) r'_ranking': $_ranking,
        if ($_semanticWeight != null) r'_semanticWeight': $_semanticWeight,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$VideoFileOrderByInput._(this._$data);

  factory Input$VideoFileOrderByInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : fromJson$Enum$OrderBy((l$Ancestors as String));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelOrderByInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : fromJson$Enum$OrderBy((l$Changed as String));
    }
    if (data.containsKey('Content')) {
      final l$Content = data['Content'];
      result$data['Content'] = l$Content == null
          ? null
          : fromJson$Enum$OrderBy((l$Content as String));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : fromJson$Enum$OrderBy((l$ContentType as String));
    }
    if (data.containsKey('Copyright')) {
      final l$Copyright = data['Copyright'];
      result$data['Copyright'] = l$Copyright == null
          ? null
          : fromJson$Enum$OrderBy((l$Copyright as String));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : fromJson$Enum$OrderBy((l$Created as String));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : fromJson$Enum$OrderBy((l$IsCommonDraft as String));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelOrderByInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MimeType')) {
      final l$MimeType = data['MimeType'];
      result$data['MimeType'] = l$MimeType == null
          ? null
          : fromJson$Enum$OrderBy((l$MimeType as String));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] =
          l$Name == null ? null : fromJson$Enum$OrderBy((l$Name as String));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('PreviewImage')) {
      final l$PreviewImage = data['PreviewImage'];
      result$data['PreviewImage'] = l$PreviewImage == null
          ? null
          : Input$ContentModelReferenceOrderByInput.fromJson(
              (l$PreviewImage as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : fromJson$Enum$OrderBy((l$RelativePath as String));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : fromJson$Enum$OrderBy((l$RouteSegment as String));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] =
          l$Saved == null ? null : fromJson$Enum$OrderBy((l$Saved as String));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : fromJson$Enum$OrderBy((l$Shortcut as String));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] =
          l$SiteId == null ? null : fromJson$Enum$OrderBy((l$SiteId as String));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StartPublish as String));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] =
          l$Status == null ? null : fromJson$Enum$OrderBy((l$Status as String));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : fromJson$Enum$OrderBy((l$StopPublish as String));
    }
    if (data.containsKey('Thumbnail')) {
      final l$Thumbnail = data['Thumbnail'];
      result$data['Thumbnail'] = l$Thumbnail == null
          ? null
          : Input$BlobModelOrderByInput.fromJson(
              (l$Thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] =
          l$Url == null ? null : fromJson$Enum$OrderBy((l$Url as String));
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : fromJson$Enum$OrderBy((l$$_concreteType as String));
    }
    if (data.containsKey('_minimumScore')) {
      final l$$_minimumScore = data['_minimumScore'];
      result$data['_minimumScore'] = (l$$_minimumScore as num?)?.toDouble();
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : fromJson$Enum$OrderBy((l$$_modified as String));
    }
    if (data.containsKey('_ranking')) {
      final l$$_ranking = data['_ranking'];
      result$data['_ranking'] = l$$_ranking == null
          ? null
          : fromJson$Enum$Ranking((l$$_ranking as String));
    }
    if (data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = data['_semanticWeight'];
      result$data['_semanticWeight'] = (l$$_semanticWeight as num?)?.toDouble();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : fromJson$Enum$OrderBy((l$$_sortOrder as String));
    }
    return Input$VideoFileOrderByInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$OrderBy? get Ancestors => (_$data['Ancestors'] as Enum$OrderBy?);

  Input$CategoryModelOrderByInput? get Category =>
      (_$data['Category'] as Input$CategoryModelOrderByInput?);

  Enum$OrderBy? get Changed => (_$data['Changed'] as Enum$OrderBy?);

  Enum$OrderBy? get Content => (_$data['Content'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get ContentType => (_$data['ContentType'] as Enum$OrderBy?);

  Enum$OrderBy? get Copyright => (_$data['Copyright'] as Enum$OrderBy?);

  Enum$OrderBy? get Created => (_$data['Created'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get IsCommonDraft => (_$data['IsCommonDraft'] as Enum$OrderBy?);

  Input$ContentLanguageModelOrderByInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelOrderByInput?);

  Input$ContentLanguageModelOrderByInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelOrderByInput?);

  Enum$OrderBy? get MimeType => (_$data['MimeType'] as Enum$OrderBy?);

  Enum$OrderBy? get Name => (_$data['Name'] as Enum$OrderBy?);

  Input$ContentModelReferenceOrderByInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceOrderByInput?);

  Input$ContentModelReferenceOrderByInput? get PreviewImage =>
      (_$data['PreviewImage'] as Input$ContentModelReferenceOrderByInput?);

  Enum$OrderBy? get RelativePath => (_$data['RelativePath'] as Enum$OrderBy?);

  Enum$OrderBy? get RouteSegment => (_$data['RouteSegment'] as Enum$OrderBy?);

  Enum$OrderBy? get Saved => (_$data['Saved'] as Enum$OrderBy?);

  Enum$OrderBy? get Shortcut => (_$data['Shortcut'] as Enum$OrderBy?);

  Enum$OrderBy? get SiteId => (_$data['SiteId'] as Enum$OrderBy?);

  Enum$OrderBy? get StartPublish => (_$data['StartPublish'] as Enum$OrderBy?);

  Enum$OrderBy? get Status => (_$data['Status'] as Enum$OrderBy?);

  Enum$OrderBy? get StopPublish => (_$data['StopPublish'] as Enum$OrderBy?);

  Input$BlobModelOrderByInput? get Thumbnail =>
      (_$data['Thumbnail'] as Input$BlobModelOrderByInput?);

  Enum$OrderBy? get Url => (_$data['Url'] as Enum$OrderBy?);

  Enum$OrderBy? get $_concreteType =>
      (_$data['_concreteType'] as Enum$OrderBy?);

  double? get $_minimumScore => (_$data['_minimumScore'] as double?);

  Enum$OrderBy? get $_modified => (_$data['_modified'] as Enum$OrderBy?);

  Enum$Ranking? get $_ranking => (_$data['_ranking'] as Enum$Ranking?);

  double? get $_semanticWeight => (_$data['_semanticWeight'] as double?);

  Enum$OrderBy? get $_sortOrder => (_$data['_sortOrder'] as Enum$OrderBy?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] =
          l$Ancestors == null ? null : toJson$Enum$OrderBy(l$Ancestors);
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] =
          l$Changed == null ? null : toJson$Enum$OrderBy(l$Changed);
    }
    if (_$data.containsKey('Content')) {
      final l$Content = Content;
      result$data['Content'] =
          l$Content == null ? null : toJson$Enum$OrderBy(l$Content);
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] =
          l$ContentType == null ? null : toJson$Enum$OrderBy(l$ContentType);
    }
    if (_$data.containsKey('Copyright')) {
      final l$Copyright = Copyright;
      result$data['Copyright'] =
          l$Copyright == null ? null : toJson$Enum$OrderBy(l$Copyright);
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] =
          l$Created == null ? null : toJson$Enum$OrderBy(l$Created);
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] =
          l$IsCommonDraft == null ? null : toJson$Enum$OrderBy(l$IsCommonDraft);
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MimeType')) {
      final l$MimeType = MimeType;
      result$data['MimeType'] =
          l$MimeType == null ? null : toJson$Enum$OrderBy(l$MimeType);
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name == null ? null : toJson$Enum$OrderBy(l$Name);
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('PreviewImage')) {
      final l$PreviewImage = PreviewImage;
      result$data['PreviewImage'] = l$PreviewImage?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] =
          l$RelativePath == null ? null : toJson$Enum$OrderBy(l$RelativePath);
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] =
          l$RouteSegment == null ? null : toJson$Enum$OrderBy(l$RouteSegment);
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] =
          l$Saved == null ? null : toJson$Enum$OrderBy(l$Saved);
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] =
          l$Shortcut == null ? null : toJson$Enum$OrderBy(l$Shortcut);
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] =
          l$SiteId == null ? null : toJson$Enum$OrderBy(l$SiteId);
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] =
          l$StartPublish == null ? null : toJson$Enum$OrderBy(l$StartPublish);
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] =
          l$Status == null ? null : toJson$Enum$OrderBy(l$Status);
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] =
          l$StopPublish == null ? null : toJson$Enum$OrderBy(l$StopPublish);
    }
    if (_$data.containsKey('Thumbnail')) {
      final l$Thumbnail = Thumbnail;
      result$data['Thumbnail'] = l$Thumbnail?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url == null ? null : toJson$Enum$OrderBy(l$Url);
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : toJson$Enum$OrderBy(l$$_concreteType);
    }
    if (_$data.containsKey('_minimumScore')) {
      final l$$_minimumScore = $_minimumScore;
      result$data['_minimumScore'] = l$$_minimumScore;
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] =
          l$$_modified == null ? null : toJson$Enum$OrderBy(l$$_modified);
    }
    if (_$data.containsKey('_ranking')) {
      final l$$_ranking = $_ranking;
      result$data['_ranking'] =
          l$$_ranking == null ? null : toJson$Enum$Ranking(l$$_ranking);
    }
    if (_$data.containsKey('_semanticWeight')) {
      final l$$_semanticWeight = $_semanticWeight;
      result$data['_semanticWeight'] = l$$_semanticWeight;
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] =
          l$$_sortOrder == null ? null : toJson$Enum$OrderBy(l$$_sortOrder);
    }
    return result$data;
  }

  CopyWith$Input$VideoFileOrderByInput<Input$VideoFileOrderByInput>
      get copyWith => CopyWith$Input$VideoFileOrderByInput(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$VideoFileOrderByInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$Content = Content;
    final lOther$Content = other.Content;
    if (_$data.containsKey('Content') != other._$data.containsKey('Content')) {
      return false;
    }
    if (l$Content != lOther$Content) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Copyright = Copyright;
    final lOther$Copyright = other.Copyright;
    if (_$data.containsKey('Copyright') !=
        other._$data.containsKey('Copyright')) {
      return false;
    }
    if (l$Copyright != lOther$Copyright) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MimeType = MimeType;
    final lOther$MimeType = other.MimeType;
    if (_$data.containsKey('MimeType') !=
        other._$data.containsKey('MimeType')) {
      return false;
    }
    if (l$MimeType != lOther$MimeType) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$PreviewImage = PreviewImage;
    final lOther$PreviewImage = other.PreviewImage;
    if (_$data.containsKey('PreviewImage') !=
        other._$data.containsKey('PreviewImage')) {
      return false;
    }
    if (l$PreviewImage != lOther$PreviewImage) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Thumbnail = Thumbnail;
    final lOther$Thumbnail = other.Thumbnail;
    if (_$data.containsKey('Thumbnail') !=
        other._$data.containsKey('Thumbnail')) {
      return false;
    }
    if (l$Thumbnail != lOther$Thumbnail) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_minimumScore = $_minimumScore;
    final lOther$$_minimumScore = other.$_minimumScore;
    if (_$data.containsKey('_minimumScore') !=
        other._$data.containsKey('_minimumScore')) {
      return false;
    }
    if (l$$_minimumScore != lOther$$_minimumScore) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_ranking = $_ranking;
    final lOther$$_ranking = other.$_ranking;
    if (_$data.containsKey('_ranking') !=
        other._$data.containsKey('_ranking')) {
      return false;
    }
    if (l$$_ranking != lOther$$_ranking) {
      return false;
    }
    final l$$_semanticWeight = $_semanticWeight;
    final lOther$$_semanticWeight = other.$_semanticWeight;
    if (_$data.containsKey('_semanticWeight') !=
        other._$data.containsKey('_semanticWeight')) {
      return false;
    }
    if (l$$_semanticWeight != lOther$$_semanticWeight) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$Content = Content;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Copyright = Copyright;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MimeType = MimeType;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$PreviewImage = PreviewImage;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Thumbnail = Thumbnail;
    final l$Url = Url;
    final l$$_concreteType = $_concreteType;
    final l$$_minimumScore = $_minimumScore;
    final l$$_modified = $_modified;
    final l$$_ranking = $_ranking;
    final l$$_semanticWeight = $_semanticWeight;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('Content') ? l$Content : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Copyright') ? l$Copyright : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MimeType') ? l$MimeType : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('PreviewImage') ? l$PreviewImage : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Thumbnail') ? l$Thumbnail : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_minimumScore') ? l$$_minimumScore : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_ranking') ? l$$_ranking : const {},
      _$data.containsKey('_semanticWeight') ? l$$_semanticWeight : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$VideoFileOrderByInput<TRes> {
  factory CopyWith$Input$VideoFileOrderByInput(
    Input$VideoFileOrderByInput instance,
    TRes Function(Input$VideoFileOrderByInput) then,
  ) = _CopyWithImpl$Input$VideoFileOrderByInput;

  factory CopyWith$Input$VideoFileOrderByInput.stub(TRes res) =
      _CopyWithStubImpl$Input$VideoFileOrderByInput;

  TRes call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Copyright,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentModelReferenceOrderByInput? PreviewImage,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  });
  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink;
  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PreviewImage;
  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail;
}

class _CopyWithImpl$Input$VideoFileOrderByInput<TRes>
    implements CopyWith$Input$VideoFileOrderByInput<TRes> {
  _CopyWithImpl$Input$VideoFileOrderByInput(
    this._instance,
    this._then,
  );

  final Input$VideoFileOrderByInput _instance;

  final TRes Function(Input$VideoFileOrderByInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? Content = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Copyright = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MimeType = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? PreviewImage = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Thumbnail = _undefined,
    Object? Url = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_minimumScore = _undefined,
    Object? $_modified = _undefined,
    Object? $_ranking = _undefined,
    Object? $_semanticWeight = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$VideoFileOrderByInput._({
        ..._instance._$data,
        if (Ancestors != _undefined) 'Ancestors': (Ancestors as Enum$OrderBy?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelOrderByInput?),
        if (Changed != _undefined) 'Changed': (Changed as Enum$OrderBy?),
        if (Content != _undefined) 'Content': (Content as Enum$OrderBy?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceOrderByInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Enum$OrderBy?),
        if (Copyright != _undefined) 'Copyright': (Copyright as Enum$OrderBy?),
        if (Created != _undefined) 'Created': (Created as Enum$OrderBy?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelOrderByInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Enum$OrderBy?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelOrderByInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelOrderByInput?),
        if (MimeType != _undefined) 'MimeType': (MimeType as Enum$OrderBy?),
        if (Name != _undefined) 'Name': (Name as Enum$OrderBy?),
        if (ParentLink != _undefined)
          'ParentLink':
              (ParentLink as Input$ContentModelReferenceOrderByInput?),
        if (PreviewImage != _undefined)
          'PreviewImage':
              (PreviewImage as Input$ContentModelReferenceOrderByInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Enum$OrderBy?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Enum$OrderBy?),
        if (Saved != _undefined) 'Saved': (Saved as Enum$OrderBy?),
        if (Shortcut != _undefined) 'Shortcut': (Shortcut as Enum$OrderBy?),
        if (SiteId != _undefined) 'SiteId': (SiteId as Enum$OrderBy?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Enum$OrderBy?),
        if (Status != _undefined) 'Status': (Status as Enum$OrderBy?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Enum$OrderBy?),
        if (Thumbnail != _undefined)
          'Thumbnail': (Thumbnail as Input$BlobModelOrderByInput?),
        if (Url != _undefined) 'Url': (Url as Enum$OrderBy?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Enum$OrderBy?),
        if ($_minimumScore != _undefined)
          '_minimumScore': ($_minimumScore as double?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Enum$OrderBy?),
        if ($_ranking != _undefined) '_ranking': ($_ranking as Enum$Ranking?),
        if ($_semanticWeight != _undefined)
          '_semanticWeight': ($_semanticWeight as double?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Enum$OrderBy?),
      }));

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelOrderByInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelOrderByInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PreviewImage {
    final local$PreviewImage = _instance.PreviewImage;
    return local$PreviewImage == null
        ? CopyWith$Input$ContentModelReferenceOrderByInput.stub(
            _then(_instance))
        : CopyWith$Input$ContentModelReferenceOrderByInput(
            local$PreviewImage, (e) => call(PreviewImage: e));
  }

  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail {
    final local$Thumbnail = _instance.Thumbnail;
    return local$Thumbnail == null
        ? CopyWith$Input$BlobModelOrderByInput.stub(_then(_instance))
        : CopyWith$Input$BlobModelOrderByInput(
            local$Thumbnail, (e) => call(Thumbnail: e));
  }
}

class _CopyWithStubImpl$Input$VideoFileOrderByInput<TRes>
    implements CopyWith$Input$VideoFileOrderByInput<TRes> {
  _CopyWithStubImpl$Input$VideoFileOrderByInput(this._res);

  TRes _res;

  call({
    Enum$OrderBy? Ancestors,
    Input$CategoryModelOrderByInput? Category,
    Enum$OrderBy? Changed,
    Enum$OrderBy? Content,
    Input$ContentModelReferenceOrderByInput? ContentLink,
    Enum$OrderBy? ContentType,
    Enum$OrderBy? Copyright,
    Enum$OrderBy? Created,
    Input$ContentLanguageModelOrderByInput? ExistingLanguages,
    Enum$OrderBy? IsCommonDraft,
    Input$ContentLanguageModelOrderByInput? Language,
    Input$ContentLanguageModelOrderByInput? MasterLanguage,
    Enum$OrderBy? MimeType,
    Enum$OrderBy? Name,
    Input$ContentModelReferenceOrderByInput? ParentLink,
    Input$ContentModelReferenceOrderByInput? PreviewImage,
    Enum$OrderBy? RelativePath,
    Enum$OrderBy? RouteSegment,
    Enum$OrderBy? Saved,
    Enum$OrderBy? Shortcut,
    Enum$OrderBy? SiteId,
    Enum$OrderBy? StartPublish,
    Enum$OrderBy? Status,
    Enum$OrderBy? StopPublish,
    Input$BlobModelOrderByInput? Thumbnail,
    Enum$OrderBy? Url,
    Enum$OrderBy? $_concreteType,
    double? $_minimumScore,
    Enum$OrderBy? $_modified,
    Enum$Ranking? $_ranking,
    double? $_semanticWeight,
    Enum$OrderBy? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$CategoryModelOrderByInput<TRes> get Category =>
      CopyWith$Input$CategoryModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentLanguageModelOrderByInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$ContentModelReferenceOrderByInput<TRes> get PreviewImage =>
      CopyWith$Input$ContentModelReferenceOrderByInput.stub(_res);

  CopyWith$Input$BlobModelOrderByInput<TRes> get Thumbnail =>
      CopyWith$Input$BlobModelOrderByInput.stub(_res);
}

class Input$VideoFileWhereInput {
  factory Input$VideoFileWhereInput({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$SearchableStringFilterInput? Copyright,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentModelReferenceWhereInput? PreviewImage,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$VideoFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$VideoFileWhereInput?>? $_not,
    List<Input$VideoFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      Input$VideoFileWhereInput._({
        if (Ancestors != null) r'Ancestors': Ancestors,
        if (Category != null) r'Category': Category,
        if (Changed != null) r'Changed': Changed,
        if (Content != null) r'Content': Content,
        if (ContentLink != null) r'ContentLink': ContentLink,
        if (ContentType != null) r'ContentType': ContentType,
        if (Copyright != null) r'Copyright': Copyright,
        if (Created != null) r'Created': Created,
        if (ExistingLanguages != null) r'ExistingLanguages': ExistingLanguages,
        if (IsCommonDraft != null) r'IsCommonDraft': IsCommonDraft,
        if (Language != null) r'Language': Language,
        if (MasterLanguage != null) r'MasterLanguage': MasterLanguage,
        if (MimeType != null) r'MimeType': MimeType,
        if (Name != null) r'Name': Name,
        if (ParentLink != null) r'ParentLink': ParentLink,
        if (PreviewImage != null) r'PreviewImage': PreviewImage,
        if (RelativePath != null) r'RelativePath': RelativePath,
        if (RouteSegment != null) r'RouteSegment': RouteSegment,
        if (Saved != null) r'Saved': Saved,
        if (Shortcut != null) r'Shortcut': Shortcut,
        if (SiteId != null) r'SiteId': SiteId,
        if (StartPublish != null) r'StartPublish': StartPublish,
        if (Status != null) r'Status': Status,
        if (StopPublish != null) r'StopPublish': StopPublish,
        if (Thumbnail != null) r'Thumbnail': Thumbnail,
        if (Url != null) r'Url': Url,
        if ($_and != null) r'_and': $_and,
        if ($_concreteType != null) r'_concreteType': $_concreteType,
        if ($_fulltext != null) r'_fulltext': $_fulltext,
        if ($_modified != null) r'_modified': $_modified,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if ($_sortOrder != null) r'_sortOrder': $_sortOrder,
      });

  Input$VideoFileWhereInput._(this._$data);

  factory Input$VideoFileWhereInput.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('Ancestors')) {
      final l$Ancestors = data['Ancestors'];
      result$data['Ancestors'] = l$Ancestors == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Ancestors as Map<String, dynamic>));
    }
    if (data.containsKey('Category')) {
      final l$Category = data['Category'];
      result$data['Category'] = l$Category == null
          ? null
          : Input$CategoryModelWhereInput.fromJson(
              (l$Category as Map<String, dynamic>));
    }
    if (data.containsKey('Changed')) {
      final l$Changed = data['Changed'];
      result$data['Changed'] = l$Changed == null
          ? null
          : Input$DateFilterInput.fromJson((l$Changed as Map<String, dynamic>));
    }
    if (data.containsKey('Content')) {
      final l$Content = data['Content'];
      result$data['Content'] = l$Content == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Content as Map<String, dynamic>));
    }
    if (data.containsKey('ContentLink')) {
      final l$ContentLink = data['ContentLink'];
      result$data['ContentLink'] = l$ContentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ContentLink as Map<String, dynamic>));
    }
    if (data.containsKey('ContentType')) {
      final l$ContentType = data['ContentType'];
      result$data['ContentType'] = l$ContentType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$ContentType as Map<String, dynamic>));
    }
    if (data.containsKey('Copyright')) {
      final l$Copyright = data['Copyright'];
      result$data['Copyright'] = l$Copyright == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Copyright as Map<String, dynamic>));
    }
    if (data.containsKey('Created')) {
      final l$Created = data['Created'];
      result$data['Created'] = l$Created == null
          ? null
          : Input$DateFilterInput.fromJson((l$Created as Map<String, dynamic>));
    }
    if (data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = data['ExistingLanguages'];
      result$data['ExistingLanguages'] = l$ExistingLanguages == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$ExistingLanguages as Map<String, dynamic>));
    }
    if (data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = data['IsCommonDraft'];
      result$data['IsCommonDraft'] = l$IsCommonDraft == null
          ? null
          : Input$BoolFilterInput.fromJson(
              (l$IsCommonDraft as Map<String, dynamic>));
    }
    if (data.containsKey('Language')) {
      final l$Language = data['Language'];
      result$data['Language'] = l$Language == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$Language as Map<String, dynamic>));
    }
    if (data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = data['MasterLanguage'];
      result$data['MasterLanguage'] = l$MasterLanguage == null
          ? null
          : Input$ContentLanguageModelWhereInput.fromJson(
              (l$MasterLanguage as Map<String, dynamic>));
    }
    if (data.containsKey('MimeType')) {
      final l$MimeType = data['MimeType'];
      result$data['MimeType'] = l$MimeType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$MimeType as Map<String, dynamic>));
    }
    if (data.containsKey('Name')) {
      final l$Name = data['Name'];
      result$data['Name'] = l$Name == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$Name as Map<String, dynamic>));
    }
    if (data.containsKey('ParentLink')) {
      final l$ParentLink = data['ParentLink'];
      result$data['ParentLink'] = l$ParentLink == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$ParentLink as Map<String, dynamic>));
    }
    if (data.containsKey('PreviewImage')) {
      final l$PreviewImage = data['PreviewImage'];
      result$data['PreviewImage'] = l$PreviewImage == null
          ? null
          : Input$ContentModelReferenceWhereInput.fromJson(
              (l$PreviewImage as Map<String, dynamic>));
    }
    if (data.containsKey('RelativePath')) {
      final l$RelativePath = data['RelativePath'];
      result$data['RelativePath'] = l$RelativePath == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RelativePath as Map<String, dynamic>));
    }
    if (data.containsKey('RouteSegment')) {
      final l$RouteSegment = data['RouteSegment'];
      result$data['RouteSegment'] = l$RouteSegment == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$RouteSegment as Map<String, dynamic>));
    }
    if (data.containsKey('Saved')) {
      final l$Saved = data['Saved'];
      result$data['Saved'] = l$Saved == null
          ? null
          : Input$DateFilterInput.fromJson((l$Saved as Map<String, dynamic>));
    }
    if (data.containsKey('Shortcut')) {
      final l$Shortcut = data['Shortcut'];
      result$data['Shortcut'] = l$Shortcut == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Shortcut as Map<String, dynamic>));
    }
    if (data.containsKey('SiteId')) {
      final l$SiteId = data['SiteId'];
      result$data['SiteId'] = l$SiteId == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$SiteId as Map<String, dynamic>));
    }
    if (data.containsKey('StartPublish')) {
      final l$StartPublish = data['StartPublish'];
      result$data['StartPublish'] = l$StartPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StartPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Status')) {
      final l$Status = data['Status'];
      result$data['Status'] = l$Status == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$Status as Map<String, dynamic>));
    }
    if (data.containsKey('StopPublish')) {
      final l$StopPublish = data['StopPublish'];
      result$data['StopPublish'] = l$StopPublish == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$StopPublish as Map<String, dynamic>));
    }
    if (data.containsKey('Thumbnail')) {
      final l$Thumbnail = data['Thumbnail'];
      result$data['Thumbnail'] = l$Thumbnail == null
          ? null
          : Input$BlobModelWhereInput.fromJson(
              (l$Thumbnail as Map<String, dynamic>));
    }
    if (data.containsKey('Url')) {
      final l$Url = data['Url'];
      result$data['Url'] = l$Url == null
          ? null
          : Input$StringFilterInput.fromJson((l$Url as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$VideoFileWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_concreteType')) {
      final l$$_concreteType = data['_concreteType'];
      result$data['_concreteType'] = l$$_concreteType == null
          ? null
          : Input$StringFilterInput.fromJson(
              (l$$_concreteType as Map<String, dynamic>));
    }
    if (data.containsKey('_fulltext')) {
      final l$$_fulltext = data['_fulltext'];
      result$data['_fulltext'] = l$$_fulltext == null
          ? null
          : Input$SearchableStringFilterInput.fromJson(
              (l$$_fulltext as Map<String, dynamic>));
    }
    if (data.containsKey('_modified')) {
      final l$$_modified = data['_modified'];
      result$data['_modified'] = l$$_modified == null
          ? null
          : Input$DateFilterInput.fromJson(
              (l$$_modified as Map<String, dynamic>));
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = (l$$_not as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$VideoFileWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Input$VideoFileWhereInput.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_sortOrder')) {
      final l$$_sortOrder = data['_sortOrder'];
      result$data['_sortOrder'] = l$$_sortOrder == null
          ? null
          : Input$IntFilterInput.fromJson(
              (l$$_sortOrder as Map<String, dynamic>));
    }
    return Input$VideoFileWhereInput._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$StringFilterInput? get Ancestors =>
      (_$data['Ancestors'] as Input$StringFilterInput?);

  Input$CategoryModelWhereInput? get Category =>
      (_$data['Category'] as Input$CategoryModelWhereInput?);

  Input$DateFilterInput? get Changed =>
      (_$data['Changed'] as Input$DateFilterInput?);

  Input$SearchableStringFilterInput? get Content =>
      (_$data['Content'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ContentLink =>
      (_$data['ContentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get ContentType =>
      (_$data['ContentType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get Copyright =>
      (_$data['Copyright'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get Created =>
      (_$data['Created'] as Input$DateFilterInput?);

  Input$ContentLanguageModelWhereInput? get ExistingLanguages =>
      (_$data['ExistingLanguages'] as Input$ContentLanguageModelWhereInput?);

  Input$BoolFilterInput? get IsCommonDraft =>
      (_$data['IsCommonDraft'] as Input$BoolFilterInput?);

  Input$ContentLanguageModelWhereInput? get Language =>
      (_$data['Language'] as Input$ContentLanguageModelWhereInput?);

  Input$ContentLanguageModelWhereInput? get MasterLanguage =>
      (_$data['MasterLanguage'] as Input$ContentLanguageModelWhereInput?);

  Input$StringFilterInput? get MimeType =>
      (_$data['MimeType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get Name =>
      (_$data['Name'] as Input$SearchableStringFilterInput?);

  Input$ContentModelReferenceWhereInput? get ParentLink =>
      (_$data['ParentLink'] as Input$ContentModelReferenceWhereInput?);

  Input$ContentModelReferenceWhereInput? get PreviewImage =>
      (_$data['PreviewImage'] as Input$ContentModelReferenceWhereInput?);

  Input$StringFilterInput? get RelativePath =>
      (_$data['RelativePath'] as Input$StringFilterInput?);

  Input$StringFilterInput? get RouteSegment =>
      (_$data['RouteSegment'] as Input$StringFilterInput?);

  Input$DateFilterInput? get Saved =>
      (_$data['Saved'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Shortcut =>
      (_$data['Shortcut'] as Input$StringFilterInput?);

  Input$StringFilterInput? get SiteId =>
      (_$data['SiteId'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StartPublish =>
      (_$data['StartPublish'] as Input$DateFilterInput?);

  Input$StringFilterInput? get Status =>
      (_$data['Status'] as Input$StringFilterInput?);

  Input$DateFilterInput? get StopPublish =>
      (_$data['StopPublish'] as Input$DateFilterInput?);

  Input$BlobModelWhereInput? get Thumbnail =>
      (_$data['Thumbnail'] as Input$BlobModelWhereInput?);

  Input$StringFilterInput? get Url =>
      (_$data['Url'] as Input$StringFilterInput?);

  List<Input$VideoFileWhereInput?>? get $_and =>
      (_$data['_and'] as List<Input$VideoFileWhereInput?>?);

  Input$StringFilterInput? get $_concreteType =>
      (_$data['_concreteType'] as Input$StringFilterInput?);

  Input$SearchableStringFilterInput? get $_fulltext =>
      (_$data['_fulltext'] as Input$SearchableStringFilterInput?);

  Input$DateFilterInput? get $_modified =>
      (_$data['_modified'] as Input$DateFilterInput?);

  List<Input$VideoFileWhereInput?>? get $_not =>
      (_$data['_not'] as List<Input$VideoFileWhereInput?>?);

  List<Input$VideoFileWhereInput?>? get $_or =>
      (_$data['_or'] as List<Input$VideoFileWhereInput?>?);

  Input$IntFilterInput? get $_sortOrder =>
      (_$data['_sortOrder'] as Input$IntFilterInput?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('Ancestors')) {
      final l$Ancestors = Ancestors;
      result$data['Ancestors'] = l$Ancestors?.toJson();
    }
    if (_$data.containsKey('Category')) {
      final l$Category = Category;
      result$data['Category'] = l$Category?.toJson();
    }
    if (_$data.containsKey('Changed')) {
      final l$Changed = Changed;
      result$data['Changed'] = l$Changed?.toJson();
    }
    if (_$data.containsKey('Content')) {
      final l$Content = Content;
      result$data['Content'] = l$Content?.toJson();
    }
    if (_$data.containsKey('ContentLink')) {
      final l$ContentLink = ContentLink;
      result$data['ContentLink'] = l$ContentLink?.toJson();
    }
    if (_$data.containsKey('ContentType')) {
      final l$ContentType = ContentType;
      result$data['ContentType'] = l$ContentType?.toJson();
    }
    if (_$data.containsKey('Copyright')) {
      final l$Copyright = Copyright;
      result$data['Copyright'] = l$Copyright?.toJson();
    }
    if (_$data.containsKey('Created')) {
      final l$Created = Created;
      result$data['Created'] = l$Created?.toJson();
    }
    if (_$data.containsKey('ExistingLanguages')) {
      final l$ExistingLanguages = ExistingLanguages;
      result$data['ExistingLanguages'] = l$ExistingLanguages?.toJson();
    }
    if (_$data.containsKey('IsCommonDraft')) {
      final l$IsCommonDraft = IsCommonDraft;
      result$data['IsCommonDraft'] = l$IsCommonDraft?.toJson();
    }
    if (_$data.containsKey('Language')) {
      final l$Language = Language;
      result$data['Language'] = l$Language?.toJson();
    }
    if (_$data.containsKey('MasterLanguage')) {
      final l$MasterLanguage = MasterLanguage;
      result$data['MasterLanguage'] = l$MasterLanguage?.toJson();
    }
    if (_$data.containsKey('MimeType')) {
      final l$MimeType = MimeType;
      result$data['MimeType'] = l$MimeType?.toJson();
    }
    if (_$data.containsKey('Name')) {
      final l$Name = Name;
      result$data['Name'] = l$Name?.toJson();
    }
    if (_$data.containsKey('ParentLink')) {
      final l$ParentLink = ParentLink;
      result$data['ParentLink'] = l$ParentLink?.toJson();
    }
    if (_$data.containsKey('PreviewImage')) {
      final l$PreviewImage = PreviewImage;
      result$data['PreviewImage'] = l$PreviewImage?.toJson();
    }
    if (_$data.containsKey('RelativePath')) {
      final l$RelativePath = RelativePath;
      result$data['RelativePath'] = l$RelativePath?.toJson();
    }
    if (_$data.containsKey('RouteSegment')) {
      final l$RouteSegment = RouteSegment;
      result$data['RouteSegment'] = l$RouteSegment?.toJson();
    }
    if (_$data.containsKey('Saved')) {
      final l$Saved = Saved;
      result$data['Saved'] = l$Saved?.toJson();
    }
    if (_$data.containsKey('Shortcut')) {
      final l$Shortcut = Shortcut;
      result$data['Shortcut'] = l$Shortcut?.toJson();
    }
    if (_$data.containsKey('SiteId')) {
      final l$SiteId = SiteId;
      result$data['SiteId'] = l$SiteId?.toJson();
    }
    if (_$data.containsKey('StartPublish')) {
      final l$StartPublish = StartPublish;
      result$data['StartPublish'] = l$StartPublish?.toJson();
    }
    if (_$data.containsKey('Status')) {
      final l$Status = Status;
      result$data['Status'] = l$Status?.toJson();
    }
    if (_$data.containsKey('StopPublish')) {
      final l$StopPublish = StopPublish;
      result$data['StopPublish'] = l$StopPublish?.toJson();
    }
    if (_$data.containsKey('Thumbnail')) {
      final l$Thumbnail = Thumbnail;
      result$data['Thumbnail'] = l$Thumbnail?.toJson();
    }
    if (_$data.containsKey('Url')) {
      final l$Url = Url;
      result$data['Url'] = l$Url?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_concreteType')) {
      final l$$_concreteType = $_concreteType;
      result$data['_concreteType'] = l$$_concreteType?.toJson();
    }
    if (_$data.containsKey('_fulltext')) {
      final l$$_fulltext = $_fulltext;
      result$data['_fulltext'] = l$$_fulltext?.toJson();
    }
    if (_$data.containsKey('_modified')) {
      final l$$_modified = $_modified;
      result$data['_modified'] = l$$_modified?.toJson();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e?.toJson()).toList();
    }
    if (_$data.containsKey('_sortOrder')) {
      final l$$_sortOrder = $_sortOrder;
      result$data['_sortOrder'] = l$$_sortOrder?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$VideoFileWhereInput<Input$VideoFileWhereInput> get copyWith =>
      CopyWith$Input$VideoFileWhereInput(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Input$VideoFileWhereInput ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$Ancestors = Ancestors;
    final lOther$Ancestors = other.Ancestors;
    if (_$data.containsKey('Ancestors') !=
        other._$data.containsKey('Ancestors')) {
      return false;
    }
    if (l$Ancestors != lOther$Ancestors) {
      return false;
    }
    final l$Category = Category;
    final lOther$Category = other.Category;
    if (_$data.containsKey('Category') !=
        other._$data.containsKey('Category')) {
      return false;
    }
    if (l$Category != lOther$Category) {
      return false;
    }
    final l$Changed = Changed;
    final lOther$Changed = other.Changed;
    if (_$data.containsKey('Changed') != other._$data.containsKey('Changed')) {
      return false;
    }
    if (l$Changed != lOther$Changed) {
      return false;
    }
    final l$Content = Content;
    final lOther$Content = other.Content;
    if (_$data.containsKey('Content') != other._$data.containsKey('Content')) {
      return false;
    }
    if (l$Content != lOther$Content) {
      return false;
    }
    final l$ContentLink = ContentLink;
    final lOther$ContentLink = other.ContentLink;
    if (_$data.containsKey('ContentLink') !=
        other._$data.containsKey('ContentLink')) {
      return false;
    }
    if (l$ContentLink != lOther$ContentLink) {
      return false;
    }
    final l$ContentType = ContentType;
    final lOther$ContentType = other.ContentType;
    if (_$data.containsKey('ContentType') !=
        other._$data.containsKey('ContentType')) {
      return false;
    }
    if (l$ContentType != lOther$ContentType) {
      return false;
    }
    final l$Copyright = Copyright;
    final lOther$Copyright = other.Copyright;
    if (_$data.containsKey('Copyright') !=
        other._$data.containsKey('Copyright')) {
      return false;
    }
    if (l$Copyright != lOther$Copyright) {
      return false;
    }
    final l$Created = Created;
    final lOther$Created = other.Created;
    if (_$data.containsKey('Created') != other._$data.containsKey('Created')) {
      return false;
    }
    if (l$Created != lOther$Created) {
      return false;
    }
    final l$ExistingLanguages = ExistingLanguages;
    final lOther$ExistingLanguages = other.ExistingLanguages;
    if (_$data.containsKey('ExistingLanguages') !=
        other._$data.containsKey('ExistingLanguages')) {
      return false;
    }
    if (l$ExistingLanguages != lOther$ExistingLanguages) {
      return false;
    }
    final l$IsCommonDraft = IsCommonDraft;
    final lOther$IsCommonDraft = other.IsCommonDraft;
    if (_$data.containsKey('IsCommonDraft') !=
        other._$data.containsKey('IsCommonDraft')) {
      return false;
    }
    if (l$IsCommonDraft != lOther$IsCommonDraft) {
      return false;
    }
    final l$Language = Language;
    final lOther$Language = other.Language;
    if (_$data.containsKey('Language') !=
        other._$data.containsKey('Language')) {
      return false;
    }
    if (l$Language != lOther$Language) {
      return false;
    }
    final l$MasterLanguage = MasterLanguage;
    final lOther$MasterLanguage = other.MasterLanguage;
    if (_$data.containsKey('MasterLanguage') !=
        other._$data.containsKey('MasterLanguage')) {
      return false;
    }
    if (l$MasterLanguage != lOther$MasterLanguage) {
      return false;
    }
    final l$MimeType = MimeType;
    final lOther$MimeType = other.MimeType;
    if (_$data.containsKey('MimeType') !=
        other._$data.containsKey('MimeType')) {
      return false;
    }
    if (l$MimeType != lOther$MimeType) {
      return false;
    }
    final l$Name = Name;
    final lOther$Name = other.Name;
    if (_$data.containsKey('Name') != other._$data.containsKey('Name')) {
      return false;
    }
    if (l$Name != lOther$Name) {
      return false;
    }
    final l$ParentLink = ParentLink;
    final lOther$ParentLink = other.ParentLink;
    if (_$data.containsKey('ParentLink') !=
        other._$data.containsKey('ParentLink')) {
      return false;
    }
    if (l$ParentLink != lOther$ParentLink) {
      return false;
    }
    final l$PreviewImage = PreviewImage;
    final lOther$PreviewImage = other.PreviewImage;
    if (_$data.containsKey('PreviewImage') !=
        other._$data.containsKey('PreviewImage')) {
      return false;
    }
    if (l$PreviewImage != lOther$PreviewImage) {
      return false;
    }
    final l$RelativePath = RelativePath;
    final lOther$RelativePath = other.RelativePath;
    if (_$data.containsKey('RelativePath') !=
        other._$data.containsKey('RelativePath')) {
      return false;
    }
    if (l$RelativePath != lOther$RelativePath) {
      return false;
    }
    final l$RouteSegment = RouteSegment;
    final lOther$RouteSegment = other.RouteSegment;
    if (_$data.containsKey('RouteSegment') !=
        other._$data.containsKey('RouteSegment')) {
      return false;
    }
    if (l$RouteSegment != lOther$RouteSegment) {
      return false;
    }
    final l$Saved = Saved;
    final lOther$Saved = other.Saved;
    if (_$data.containsKey('Saved') != other._$data.containsKey('Saved')) {
      return false;
    }
    if (l$Saved != lOther$Saved) {
      return false;
    }
    final l$Shortcut = Shortcut;
    final lOther$Shortcut = other.Shortcut;
    if (_$data.containsKey('Shortcut') !=
        other._$data.containsKey('Shortcut')) {
      return false;
    }
    if (l$Shortcut != lOther$Shortcut) {
      return false;
    }
    final l$SiteId = SiteId;
    final lOther$SiteId = other.SiteId;
    if (_$data.containsKey('SiteId') != other._$data.containsKey('SiteId')) {
      return false;
    }
    if (l$SiteId != lOther$SiteId) {
      return false;
    }
    final l$StartPublish = StartPublish;
    final lOther$StartPublish = other.StartPublish;
    if (_$data.containsKey('StartPublish') !=
        other._$data.containsKey('StartPublish')) {
      return false;
    }
    if (l$StartPublish != lOther$StartPublish) {
      return false;
    }
    final l$Status = Status;
    final lOther$Status = other.Status;
    if (_$data.containsKey('Status') != other._$data.containsKey('Status')) {
      return false;
    }
    if (l$Status != lOther$Status) {
      return false;
    }
    final l$StopPublish = StopPublish;
    final lOther$StopPublish = other.StopPublish;
    if (_$data.containsKey('StopPublish') !=
        other._$data.containsKey('StopPublish')) {
      return false;
    }
    if (l$StopPublish != lOther$StopPublish) {
      return false;
    }
    final l$Thumbnail = Thumbnail;
    final lOther$Thumbnail = other.Thumbnail;
    if (_$data.containsKey('Thumbnail') !=
        other._$data.containsKey('Thumbnail')) {
      return false;
    }
    if (l$Thumbnail != lOther$Thumbnail) {
      return false;
    }
    final l$Url = Url;
    final lOther$Url = other.Url;
    if (_$data.containsKey('Url') != other._$data.containsKey('Url')) {
      return false;
    }
    if (l$Url != lOther$Url) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_concreteType = $_concreteType;
    final lOther$$_concreteType = other.$_concreteType;
    if (_$data.containsKey('_concreteType') !=
        other._$data.containsKey('_concreteType')) {
      return false;
    }
    if (l$$_concreteType != lOther$$_concreteType) {
      return false;
    }
    final l$$_fulltext = $_fulltext;
    final lOther$$_fulltext = other.$_fulltext;
    if (_$data.containsKey('_fulltext') !=
        other._$data.containsKey('_fulltext')) {
      return false;
    }
    if (l$$_fulltext != lOther$$_fulltext) {
      return false;
    }
    final l$$_modified = $_modified;
    final lOther$$_modified = other.$_modified;
    if (_$data.containsKey('_modified') !=
        other._$data.containsKey('_modified')) {
      return false;
    }
    if (l$$_modified != lOther$$_modified) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != null && lOther$$_not != null) {
      if (l$$_not.length != lOther$$_not.length) {
        return false;
      }
      for (int i = 0; i < l$$_not.length; i++) {
        final l$$_not$entry = l$$_not[i];
        final lOther$$_not$entry = lOther$$_not[i];
        if (l$$_not$entry != lOther$$_not$entry) {
          return false;
        }
      }
    } else if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$$_sortOrder = $_sortOrder;
    final lOther$$_sortOrder = other.$_sortOrder;
    if (_$data.containsKey('_sortOrder') !=
        other._$data.containsKey('_sortOrder')) {
      return false;
    }
    if (l$$_sortOrder != lOther$$_sortOrder) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$Ancestors = Ancestors;
    final l$Category = Category;
    final l$Changed = Changed;
    final l$Content = Content;
    final l$ContentLink = ContentLink;
    final l$ContentType = ContentType;
    final l$Copyright = Copyright;
    final l$Created = Created;
    final l$ExistingLanguages = ExistingLanguages;
    final l$IsCommonDraft = IsCommonDraft;
    final l$Language = Language;
    final l$MasterLanguage = MasterLanguage;
    final l$MimeType = MimeType;
    final l$Name = Name;
    final l$ParentLink = ParentLink;
    final l$PreviewImage = PreviewImage;
    final l$RelativePath = RelativePath;
    final l$RouteSegment = RouteSegment;
    final l$Saved = Saved;
    final l$Shortcut = Shortcut;
    final l$SiteId = SiteId;
    final l$StartPublish = StartPublish;
    final l$Status = Status;
    final l$StopPublish = StopPublish;
    final l$Thumbnail = Thumbnail;
    final l$Url = Url;
    final l$$_and = $_and;
    final l$$_concreteType = $_concreteType;
    final l$$_fulltext = $_fulltext;
    final l$$_modified = $_modified;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$$_sortOrder = $_sortOrder;
    return Object.hashAll([
      _$data.containsKey('Ancestors') ? l$Ancestors : const {},
      _$data.containsKey('Category') ? l$Category : const {},
      _$data.containsKey('Changed') ? l$Changed : const {},
      _$data.containsKey('Content') ? l$Content : const {},
      _$data.containsKey('ContentLink') ? l$ContentLink : const {},
      _$data.containsKey('ContentType') ? l$ContentType : const {},
      _$data.containsKey('Copyright') ? l$Copyright : const {},
      _$data.containsKey('Created') ? l$Created : const {},
      _$data.containsKey('ExistingLanguages') ? l$ExistingLanguages : const {},
      _$data.containsKey('IsCommonDraft') ? l$IsCommonDraft : const {},
      _$data.containsKey('Language') ? l$Language : const {},
      _$data.containsKey('MasterLanguage') ? l$MasterLanguage : const {},
      _$data.containsKey('MimeType') ? l$MimeType : const {},
      _$data.containsKey('Name') ? l$Name : const {},
      _$data.containsKey('ParentLink') ? l$ParentLink : const {},
      _$data.containsKey('PreviewImage') ? l$PreviewImage : const {},
      _$data.containsKey('RelativePath') ? l$RelativePath : const {},
      _$data.containsKey('RouteSegment') ? l$RouteSegment : const {},
      _$data.containsKey('Saved') ? l$Saved : const {},
      _$data.containsKey('Shortcut') ? l$Shortcut : const {},
      _$data.containsKey('SiteId') ? l$SiteId : const {},
      _$data.containsKey('StartPublish') ? l$StartPublish : const {},
      _$data.containsKey('Status') ? l$Status : const {},
      _$data.containsKey('StopPublish') ? l$StopPublish : const {},
      _$data.containsKey('Thumbnail') ? l$Thumbnail : const {},
      _$data.containsKey('Url') ? l$Url : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_concreteType') ? l$$_concreteType : const {},
      _$data.containsKey('_fulltext') ? l$$_fulltext : const {},
      _$data.containsKey('_modified') ? l$$_modified : const {},
      _$data.containsKey('_not')
          ? l$$_not == null
              ? null
              : Object.hashAll(l$$_not.map((v) => v))
          : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('_sortOrder') ? l$$_sortOrder : const {},
    ]);
  }
}

abstract class CopyWith$Input$VideoFileWhereInput<TRes> {
  factory CopyWith$Input$VideoFileWhereInput(
    Input$VideoFileWhereInput instance,
    TRes Function(Input$VideoFileWhereInput) then,
  ) = _CopyWithImpl$Input$VideoFileWhereInput;

  factory CopyWith$Input$VideoFileWhereInput.stub(TRes res) =
      _CopyWithStubImpl$Input$VideoFileWhereInput;

  TRes call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$SearchableStringFilterInput? Copyright,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentModelReferenceWhereInput? PreviewImage,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$VideoFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$VideoFileWhereInput?>? $_not,
    List<Input$VideoFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  });
  CopyWith$Input$StringFilterInput<TRes> get Ancestors;
  CopyWith$Input$CategoryModelWhereInput<TRes> get Category;
  CopyWith$Input$DateFilterInput<TRes> get Changed;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Content;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink;
  CopyWith$Input$StringFilterInput<TRes> get ContentType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Copyright;
  CopyWith$Input$DateFilterInput<TRes> get Created;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages;
  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language;
  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage;
  CopyWith$Input$StringFilterInput<TRes> get MimeType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get Name;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink;
  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PreviewImage;
  CopyWith$Input$StringFilterInput<TRes> get RelativePath;
  CopyWith$Input$StringFilterInput<TRes> get RouteSegment;
  CopyWith$Input$DateFilterInput<TRes> get Saved;
  CopyWith$Input$StringFilterInput<TRes> get Shortcut;
  CopyWith$Input$StringFilterInput<TRes> get SiteId;
  CopyWith$Input$DateFilterInput<TRes> get StartPublish;
  CopyWith$Input$StringFilterInput<TRes> get Status;
  CopyWith$Input$DateFilterInput<TRes> get StopPublish;
  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail;
  CopyWith$Input$StringFilterInput<TRes> get Url;
  TRes $_and(
      Iterable<Input$VideoFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$VideoFileWhereInput<
                      Input$VideoFileWhereInput>?>?)
          _fn);
  CopyWith$Input$StringFilterInput<TRes> get $_concreteType;
  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext;
  CopyWith$Input$DateFilterInput<TRes> get $_modified;
  TRes $_not(
      Iterable<Input$VideoFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$VideoFileWhereInput<
                      Input$VideoFileWhereInput>?>?)
          _fn);
  TRes $_or(
      Iterable<Input$VideoFileWhereInput?>? Function(
              Iterable<
                  CopyWith$Input$VideoFileWhereInput<
                      Input$VideoFileWhereInput>?>?)
          _fn);
  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder;
}

class _CopyWithImpl$Input$VideoFileWhereInput<TRes>
    implements CopyWith$Input$VideoFileWhereInput<TRes> {
  _CopyWithImpl$Input$VideoFileWhereInput(
    this._instance,
    this._then,
  );

  final Input$VideoFileWhereInput _instance;

  final TRes Function(Input$VideoFileWhereInput) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? Ancestors = _undefined,
    Object? Category = _undefined,
    Object? Changed = _undefined,
    Object? Content = _undefined,
    Object? ContentLink = _undefined,
    Object? ContentType = _undefined,
    Object? Copyright = _undefined,
    Object? Created = _undefined,
    Object? ExistingLanguages = _undefined,
    Object? IsCommonDraft = _undefined,
    Object? Language = _undefined,
    Object? MasterLanguage = _undefined,
    Object? MimeType = _undefined,
    Object? Name = _undefined,
    Object? ParentLink = _undefined,
    Object? PreviewImage = _undefined,
    Object? RelativePath = _undefined,
    Object? RouteSegment = _undefined,
    Object? Saved = _undefined,
    Object? Shortcut = _undefined,
    Object? SiteId = _undefined,
    Object? StartPublish = _undefined,
    Object? Status = _undefined,
    Object? StopPublish = _undefined,
    Object? Thumbnail = _undefined,
    Object? Url = _undefined,
    Object? $_and = _undefined,
    Object? $_concreteType = _undefined,
    Object? $_fulltext = _undefined,
    Object? $_modified = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? $_sortOrder = _undefined,
  }) =>
      _then(Input$VideoFileWhereInput._({
        ..._instance._$data,
        if (Ancestors != _undefined)
          'Ancestors': (Ancestors as Input$StringFilterInput?),
        if (Category != _undefined)
          'Category': (Category as Input$CategoryModelWhereInput?),
        if (Changed != _undefined)
          'Changed': (Changed as Input$DateFilterInput?),
        if (Content != _undefined)
          'Content': (Content as Input$SearchableStringFilterInput?),
        if (ContentLink != _undefined)
          'ContentLink':
              (ContentLink as Input$ContentModelReferenceWhereInput?),
        if (ContentType != _undefined)
          'ContentType': (ContentType as Input$StringFilterInput?),
        if (Copyright != _undefined)
          'Copyright': (Copyright as Input$SearchableStringFilterInput?),
        if (Created != _undefined)
          'Created': (Created as Input$DateFilterInput?),
        if (ExistingLanguages != _undefined)
          'ExistingLanguages':
              (ExistingLanguages as Input$ContentLanguageModelWhereInput?),
        if (IsCommonDraft != _undefined)
          'IsCommonDraft': (IsCommonDraft as Input$BoolFilterInput?),
        if (Language != _undefined)
          'Language': (Language as Input$ContentLanguageModelWhereInput?),
        if (MasterLanguage != _undefined)
          'MasterLanguage':
              (MasterLanguage as Input$ContentLanguageModelWhereInput?),
        if (MimeType != _undefined)
          'MimeType': (MimeType as Input$StringFilterInput?),
        if (Name != _undefined)
          'Name': (Name as Input$SearchableStringFilterInput?),
        if (ParentLink != _undefined)
          'ParentLink': (ParentLink as Input$ContentModelReferenceWhereInput?),
        if (PreviewImage != _undefined)
          'PreviewImage':
              (PreviewImage as Input$ContentModelReferenceWhereInput?),
        if (RelativePath != _undefined)
          'RelativePath': (RelativePath as Input$StringFilterInput?),
        if (RouteSegment != _undefined)
          'RouteSegment': (RouteSegment as Input$StringFilterInput?),
        if (Saved != _undefined) 'Saved': (Saved as Input$DateFilterInput?),
        if (Shortcut != _undefined)
          'Shortcut': (Shortcut as Input$StringFilterInput?),
        if (SiteId != _undefined)
          'SiteId': (SiteId as Input$StringFilterInput?),
        if (StartPublish != _undefined)
          'StartPublish': (StartPublish as Input$DateFilterInput?),
        if (Status != _undefined)
          'Status': (Status as Input$StringFilterInput?),
        if (StopPublish != _undefined)
          'StopPublish': (StopPublish as Input$DateFilterInput?),
        if (Thumbnail != _undefined)
          'Thumbnail': (Thumbnail as Input$BlobModelWhereInput?),
        if (Url != _undefined) 'Url': (Url as Input$StringFilterInput?),
        if ($_and != _undefined)
          '_and': ($_and as List<Input$VideoFileWhereInput?>?),
        if ($_concreteType != _undefined)
          '_concreteType': ($_concreteType as Input$StringFilterInput?),
        if ($_fulltext != _undefined)
          '_fulltext': ($_fulltext as Input$SearchableStringFilterInput?),
        if ($_modified != _undefined)
          '_modified': ($_modified as Input$DateFilterInput?),
        if ($_not != _undefined)
          '_not': ($_not as List<Input$VideoFileWhereInput?>?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$VideoFileWhereInput?>?),
        if ($_sortOrder != _undefined)
          '_sortOrder': ($_sortOrder as Input$IntFilterInput?),
      }));

  CopyWith$Input$StringFilterInput<TRes> get Ancestors {
    final local$Ancestors = _instance.Ancestors;
    return local$Ancestors == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Ancestors, (e) => call(Ancestors: e));
  }

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category {
    final local$Category = _instance.Category;
    return local$Category == null
        ? CopyWith$Input$CategoryModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$CategoryModelWhereInput(
            local$Category, (e) => call(Category: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Changed {
    final local$Changed = _instance.Changed;
    return local$Changed == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Changed, (e) => call(Changed: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Content {
    final local$Content = _instance.Content;
    return local$Content == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Content, (e) => call(Content: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink {
    final local$ContentLink = _instance.ContentLink;
    return local$ContentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ContentLink, (e) => call(ContentLink: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get ContentType {
    final local$ContentType = _instance.ContentType;
    return local$ContentType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$ContentType, (e) => call(ContentType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Copyright {
    final local$Copyright = _instance.Copyright;
    return local$Copyright == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Copyright, (e) => call(Copyright: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Created {
    final local$Created = _instance.Created;
    return local$Created == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$Created, (e) => call(Created: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages {
    final local$ExistingLanguages = _instance.ExistingLanguages;
    return local$ExistingLanguages == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$ExistingLanguages, (e) => call(ExistingLanguages: e));
  }

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft {
    final local$IsCommonDraft = _instance.IsCommonDraft;
    return local$IsCommonDraft == null
        ? CopyWith$Input$BoolFilterInput.stub(_then(_instance))
        : CopyWith$Input$BoolFilterInput(
            local$IsCommonDraft, (e) => call(IsCommonDraft: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language {
    final local$Language = _instance.Language;
    return local$Language == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$Language, (e) => call(Language: e));
  }

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage {
    final local$MasterLanguage = _instance.MasterLanguage;
    return local$MasterLanguage == null
        ? CopyWith$Input$ContentLanguageModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentLanguageModelWhereInput(
            local$MasterLanguage, (e) => call(MasterLanguage: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get MimeType {
    final local$MimeType = _instance.MimeType;
    return local$MimeType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$MimeType, (e) => call(MimeType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name {
    final local$Name = _instance.Name;
    return local$Name == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$Name, (e) => call(Name: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink {
    final local$ParentLink = _instance.ParentLink;
    return local$ParentLink == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$ParentLink, (e) => call(ParentLink: e));
  }

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PreviewImage {
    final local$PreviewImage = _instance.PreviewImage;
    return local$PreviewImage == null
        ? CopyWith$Input$ContentModelReferenceWhereInput.stub(_then(_instance))
        : CopyWith$Input$ContentModelReferenceWhereInput(
            local$PreviewImage, (e) => call(PreviewImage: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RelativePath {
    final local$RelativePath = _instance.RelativePath;
    return local$RelativePath == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RelativePath, (e) => call(RelativePath: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment {
    final local$RouteSegment = _instance.RouteSegment;
    return local$RouteSegment == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$RouteSegment, (e) => call(RouteSegment: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get Saved {
    final local$Saved = _instance.Saved;
    return local$Saved == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(local$Saved, (e) => call(Saved: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Shortcut {
    final local$Shortcut = _instance.Shortcut;
    return local$Shortcut == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Shortcut, (e) => call(Shortcut: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get SiteId {
    final local$SiteId = _instance.SiteId;
    return local$SiteId == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$SiteId, (e) => call(SiteId: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StartPublish {
    final local$StartPublish = _instance.StartPublish;
    return local$StartPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StartPublish, (e) => call(StartPublish: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Status {
    final local$Status = _instance.Status;
    return local$Status == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$Status, (e) => call(Status: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get StopPublish {
    final local$StopPublish = _instance.StopPublish;
    return local$StopPublish == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$StopPublish, (e) => call(StopPublish: e));
  }

  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail {
    final local$Thumbnail = _instance.Thumbnail;
    return local$Thumbnail == null
        ? CopyWith$Input$BlobModelWhereInput.stub(_then(_instance))
        : CopyWith$Input$BlobModelWhereInput(
            local$Thumbnail, (e) => call(Thumbnail: e));
  }

  CopyWith$Input$StringFilterInput<TRes> get Url {
    final local$Url = _instance.Url;
    return local$Url == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(local$Url, (e) => call(Url: e));
  }

  TRes $_and(
          Iterable<Input$VideoFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$VideoFileWhereInput<
                          Input$VideoFileWhereInput>?>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => e == null
              ? null
              : CopyWith$Input$VideoFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType {
    final local$$_concreteType = _instance.$_concreteType;
    return local$$_concreteType == null
        ? CopyWith$Input$StringFilterInput.stub(_then(_instance))
        : CopyWith$Input$StringFilterInput(
            local$$_concreteType, (e) => call($_concreteType: e));
  }

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext {
    final local$$_fulltext = _instance.$_fulltext;
    return local$$_fulltext == null
        ? CopyWith$Input$SearchableStringFilterInput.stub(_then(_instance))
        : CopyWith$Input$SearchableStringFilterInput(
            local$$_fulltext, (e) => call($_fulltext: e));
  }

  CopyWith$Input$DateFilterInput<TRes> get $_modified {
    final local$$_modified = _instance.$_modified;
    return local$$_modified == null
        ? CopyWith$Input$DateFilterInput.stub(_then(_instance))
        : CopyWith$Input$DateFilterInput(
            local$$_modified, (e) => call($_modified: e));
  }

  TRes $_not(
          Iterable<Input$VideoFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$VideoFileWhereInput<
                          Input$VideoFileWhereInput>?>?)
              _fn) =>
      call(
          $_not: _fn(_instance.$_not?.map((e) => e == null
              ? null
              : CopyWith$Input$VideoFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  TRes $_or(
          Iterable<Input$VideoFileWhereInput?>? Function(
                  Iterable<
                      CopyWith$Input$VideoFileWhereInput<
                          Input$VideoFileWhereInput>?>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => e == null
              ? null
              : CopyWith$Input$VideoFileWhereInput(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder {
    final local$$_sortOrder = _instance.$_sortOrder;
    return local$$_sortOrder == null
        ? CopyWith$Input$IntFilterInput.stub(_then(_instance))
        : CopyWith$Input$IntFilterInput(
            local$$_sortOrder, (e) => call($_sortOrder: e));
  }
}

class _CopyWithStubImpl$Input$VideoFileWhereInput<TRes>
    implements CopyWith$Input$VideoFileWhereInput<TRes> {
  _CopyWithStubImpl$Input$VideoFileWhereInput(this._res);

  TRes _res;

  call({
    Input$StringFilterInput? Ancestors,
    Input$CategoryModelWhereInput? Category,
    Input$DateFilterInput? Changed,
    Input$SearchableStringFilterInput? Content,
    Input$ContentModelReferenceWhereInput? ContentLink,
    Input$StringFilterInput? ContentType,
    Input$SearchableStringFilterInput? Copyright,
    Input$DateFilterInput? Created,
    Input$ContentLanguageModelWhereInput? ExistingLanguages,
    Input$BoolFilterInput? IsCommonDraft,
    Input$ContentLanguageModelWhereInput? Language,
    Input$ContentLanguageModelWhereInput? MasterLanguage,
    Input$StringFilterInput? MimeType,
    Input$SearchableStringFilterInput? Name,
    Input$ContentModelReferenceWhereInput? ParentLink,
    Input$ContentModelReferenceWhereInput? PreviewImage,
    Input$StringFilterInput? RelativePath,
    Input$StringFilterInput? RouteSegment,
    Input$DateFilterInput? Saved,
    Input$StringFilterInput? Shortcut,
    Input$StringFilterInput? SiteId,
    Input$DateFilterInput? StartPublish,
    Input$StringFilterInput? Status,
    Input$DateFilterInput? StopPublish,
    Input$BlobModelWhereInput? Thumbnail,
    Input$StringFilterInput? Url,
    List<Input$VideoFileWhereInput?>? $_and,
    Input$StringFilterInput? $_concreteType,
    Input$SearchableStringFilterInput? $_fulltext,
    Input$DateFilterInput? $_modified,
    List<Input$VideoFileWhereInput?>? $_not,
    List<Input$VideoFileWhereInput?>? $_or,
    Input$IntFilterInput? $_sortOrder,
  }) =>
      _res;

  CopyWith$Input$StringFilterInput<TRes> get Ancestors =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$CategoryModelWhereInput<TRes> get Category =>
      CopyWith$Input$CategoryModelWhereInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Changed =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Content =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ContentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get ContentType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Copyright =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Created =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get ExistingLanguages =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$BoolFilterInput<TRes> get IsCommonDraft =>
      CopyWith$Input$BoolFilterInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get Language =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$ContentLanguageModelWhereInput<TRes> get MasterLanguage =>
      CopyWith$Input$ContentLanguageModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get MimeType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get Name =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get ParentLink =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$ContentModelReferenceWhereInput<TRes> get PreviewImage =>
      CopyWith$Input$ContentModelReferenceWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RelativePath =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get RouteSegment =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get Saved =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Shortcut =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get SiteId =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StartPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Status =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get StopPublish =>
      CopyWith$Input$DateFilterInput.stub(_res);

  CopyWith$Input$BlobModelWhereInput<TRes> get Thumbnail =>
      CopyWith$Input$BlobModelWhereInput.stub(_res);

  CopyWith$Input$StringFilterInput<TRes> get Url =>
      CopyWith$Input$StringFilterInput.stub(_res);

  $_and(_fn) => _res;

  CopyWith$Input$StringFilterInput<TRes> get $_concreteType =>
      CopyWith$Input$StringFilterInput.stub(_res);

  CopyWith$Input$SearchableStringFilterInput<TRes> get $_fulltext =>
      CopyWith$Input$SearchableStringFilterInput.stub(_res);

  CopyWith$Input$DateFilterInput<TRes> get $_modified =>
      CopyWith$Input$DateFilterInput.stub(_res);

  $_not(_fn) => _res;

  $_or(_fn) => _res;

  CopyWith$Input$IntFilterInput<TRes> get $_sortOrder =>
      CopyWith$Input$IntFilterInput.stub(_res);
}

enum Enum$DateFacetUnit {
  DAY,
  HOUR,
  MINUTE,
  $unknown;

  factory Enum$DateFacetUnit.fromJson(String value) =>
      fromJson$Enum$DateFacetUnit(value);

  String toJson() => toJson$Enum$DateFacetUnit(this);
}

String toJson$Enum$DateFacetUnit(Enum$DateFacetUnit e) {
  switch (e) {
    case Enum$DateFacetUnit.DAY:
      return r'DAY';
    case Enum$DateFacetUnit.HOUR:
      return r'HOUR';
    case Enum$DateFacetUnit.MINUTE:
      return r'MINUTE';
    case Enum$DateFacetUnit.$unknown:
      return r'$unknown';
  }
}

Enum$DateFacetUnit fromJson$Enum$DateFacetUnit(String value) {
  switch (value) {
    case r'DAY':
      return Enum$DateFacetUnit.DAY;
    case r'HOUR':
      return Enum$DateFacetUnit.HOUR;
    case r'MINUTE':
      return Enum$DateFacetUnit.MINUTE;
    default:
      return Enum$DateFacetUnit.$unknown;
  }
}

enum Enum$FactorModifier {
  LOG,
  NONE,
  RECIPROCAL,
  SQRT,
  SQUARE,
  $unknown;

  factory Enum$FactorModifier.fromJson(String value) =>
      fromJson$Enum$FactorModifier(value);

  String toJson() => toJson$Enum$FactorModifier(this);
}

String toJson$Enum$FactorModifier(Enum$FactorModifier e) {
  switch (e) {
    case Enum$FactorModifier.LOG:
      return r'LOG';
    case Enum$FactorModifier.NONE:
      return r'NONE';
    case Enum$FactorModifier.RECIPROCAL:
      return r'RECIPROCAL';
    case Enum$FactorModifier.SQRT:
      return r'SQRT';
    case Enum$FactorModifier.SQUARE:
      return r'SQUARE';
    case Enum$FactorModifier.$unknown:
      return r'$unknown';
  }
}

Enum$FactorModifier fromJson$Enum$FactorModifier(String value) {
  switch (value) {
    case r'LOG':
      return Enum$FactorModifier.LOG;
    case r'NONE':
      return Enum$FactorModifier.NONE;
    case r'RECIPROCAL':
      return Enum$FactorModifier.RECIPROCAL;
    case r'SQRT':
      return Enum$FactorModifier.SQRT;
    case r'SQUARE':
      return Enum$FactorModifier.SQUARE;
    default:
      return Enum$FactorModifier.$unknown;
  }
}

enum Enum$LinkTypes {
  ANCESTORS,
  CHILDREN,
  DEFAULT,
  $unknown;

  factory Enum$LinkTypes.fromJson(String value) =>
      fromJson$Enum$LinkTypes(value);

  String toJson() => toJson$Enum$LinkTypes(this);
}

String toJson$Enum$LinkTypes(Enum$LinkTypes e) {
  switch (e) {
    case Enum$LinkTypes.ANCESTORS:
      return r'ANCESTORS';
    case Enum$LinkTypes.CHILDREN:
      return r'CHILDREN';
    case Enum$LinkTypes.DEFAULT:
      return r'DEFAULT';
    case Enum$LinkTypes.$unknown:
      return r'$unknown';
  }
}

Enum$LinkTypes fromJson$Enum$LinkTypes(String value) {
  switch (value) {
    case r'ANCESTORS':
      return Enum$LinkTypes.ANCESTORS;
    case r'CHILDREN':
      return Enum$LinkTypes.CHILDREN;
    case r'DEFAULT':
      return Enum$LinkTypes.DEFAULT;
    default:
      return Enum$LinkTypes.$unknown;
  }
}

enum Enum$Locales {
  ALL,
  NEUTRAL,
  en,
  sv,
  $unknown;

  factory Enum$Locales.fromJson(String value) => fromJson$Enum$Locales(value);

  String toJson() => toJson$Enum$Locales(this);
}

String toJson$Enum$Locales(Enum$Locales e) {
  switch (e) {
    case Enum$Locales.ALL:
      return r'ALL';
    case Enum$Locales.NEUTRAL:
      return r'NEUTRAL';
    case Enum$Locales.en:
      return r'en';
    case Enum$Locales.sv:
      return r'sv';
    case Enum$Locales.$unknown:
      return r'$unknown';
  }
}

Enum$Locales fromJson$Enum$Locales(String value) {
  switch (value) {
    case r'ALL':
      return Enum$Locales.ALL;
    case r'NEUTRAL':
      return Enum$Locales.NEUTRAL;
    case r'en':
      return Enum$Locales.en;
    case r'sv':
      return Enum$Locales.sv;
    default:
      return Enum$Locales.$unknown;
  }
}

enum Enum$OrderBy {
  ASC,
  DESC,
  $unknown;

  factory Enum$OrderBy.fromJson(String value) => fromJson$Enum$OrderBy(value);

  String toJson() => toJson$Enum$OrderBy(this);
}

String toJson$Enum$OrderBy(Enum$OrderBy e) {
  switch (e) {
    case Enum$OrderBy.ASC:
      return r'ASC';
    case Enum$OrderBy.DESC:
      return r'DESC';
    case Enum$OrderBy.$unknown:
      return r'$unknown';
  }
}

Enum$OrderBy fromJson$Enum$OrderBy(String value) {
  switch (value) {
    case r'ASC':
      return Enum$OrderBy.ASC;
    case r'DESC':
      return Enum$OrderBy.DESC;
    default:
      return Enum$OrderBy.$unknown;
  }
}

enum Enum$OrderByFacetType {
  COUNT,
  VALUE,
  $unknown;

  factory Enum$OrderByFacetType.fromJson(String value) =>
      fromJson$Enum$OrderByFacetType(value);

  String toJson() => toJson$Enum$OrderByFacetType(this);
}

String toJson$Enum$OrderByFacetType(Enum$OrderByFacetType e) {
  switch (e) {
    case Enum$OrderByFacetType.COUNT:
      return r'COUNT';
    case Enum$OrderByFacetType.VALUE:
      return r'VALUE';
    case Enum$OrderByFacetType.$unknown:
      return r'$unknown';
  }
}

Enum$OrderByFacetType fromJson$Enum$OrderByFacetType(String value) {
  switch (value) {
    case r'COUNT':
      return Enum$OrderByFacetType.COUNT;
    case r'VALUE':
      return Enum$OrderByFacetType.VALUE;
    default:
      return Enum$OrderByFacetType.$unknown;
  }
}

enum Enum$Ranking {
  BOOST_ONLY,
  DOC,
  RELEVANCE,
  SEMANTIC,
  $unknown;

  factory Enum$Ranking.fromJson(String value) => fromJson$Enum$Ranking(value);

  String toJson() => toJson$Enum$Ranking(this);
}

String toJson$Enum$Ranking(Enum$Ranking e) {
  switch (e) {
    case Enum$Ranking.BOOST_ONLY:
      return r'BOOST_ONLY';
    case Enum$Ranking.DOC:
      return r'DOC';
    case Enum$Ranking.RELEVANCE:
      return r'RELEVANCE';
    case Enum$Ranking.SEMANTIC:
      return r'SEMANTIC';
    case Enum$Ranking.$unknown:
      return r'$unknown';
  }
}

Enum$Ranking fromJson$Enum$Ranking(String value) {
  switch (value) {
    case r'BOOST_ONLY':
      return Enum$Ranking.BOOST_ONLY;
    case r'DOC':
      return Enum$Ranking.DOC;
    case r'RELEVANCE':
      return Enum$Ranking.RELEVANCE;
    case r'SEMANTIC':
      return Enum$Ranking.SEMANTIC;
    default:
      return Enum$Ranking.$unknown;
  }
}

enum Enum$SynonymSlot {
  ONE,
  TWO,
  $unknown;

  factory Enum$SynonymSlot.fromJson(String value) =>
      fromJson$Enum$SynonymSlot(value);

  String toJson() => toJson$Enum$SynonymSlot(this);
}

String toJson$Enum$SynonymSlot(Enum$SynonymSlot e) {
  switch (e) {
    case Enum$SynonymSlot.ONE:
      return r'ONE';
    case Enum$SynonymSlot.TWO:
      return r'TWO';
    case Enum$SynonymSlot.$unknown:
      return r'$unknown';
  }
}

Enum$SynonymSlot fromJson$Enum$SynonymSlot(String value) {
  switch (value) {
    case r'ONE':
      return Enum$SynonymSlot.ONE;
    case r'TWO':
      return Enum$SynonymSlot.TWO;
    default:
      return Enum$SynonymSlot.$unknown;
  }
}

enum Enum$ext_Locales {
  ALL,
  NEUTRAL,
  en,
  $unknown;

  factory Enum$ext_Locales.fromJson(String value) =>
      fromJson$Enum$ext_Locales(value);

  String toJson() => toJson$Enum$ext_Locales(this);
}

String toJson$Enum$ext_Locales(Enum$ext_Locales e) {
  switch (e) {
    case Enum$ext_Locales.ALL:
      return r'ALL';
    case Enum$ext_Locales.NEUTRAL:
      return r'NEUTRAL';
    case Enum$ext_Locales.en:
      return r'en';
    case Enum$ext_Locales.$unknown:
      return r'$unknown';
  }
}

Enum$ext_Locales fromJson$Enum$ext_Locales(String value) {
  switch (value) {
    case r'ALL':
      return Enum$ext_Locales.ALL;
    case r'NEUTRAL':
      return Enum$ext_Locales.NEUTRAL;
    case r'en':
      return Enum$ext_Locales.en;
    default:
      return Enum$ext_Locales.$unknown;
  }
}

enum Enum$system_Locales {
  ALL,
  NEUTRAL,
  $unknown;

  factory Enum$system_Locales.fromJson(String value) =>
      fromJson$Enum$system_Locales(value);

  String toJson() => toJson$Enum$system_Locales(this);
}

String toJson$Enum$system_Locales(Enum$system_Locales e) {
  switch (e) {
    case Enum$system_Locales.ALL:
      return r'ALL';
    case Enum$system_Locales.NEUTRAL:
      return r'NEUTRAL';
    case Enum$system_Locales.$unknown:
      return r'$unknown';
  }
}

Enum$system_Locales fromJson$Enum$system_Locales(String value) {
  switch (value) {
    case r'ALL':
      return Enum$system_Locales.ALL;
    case r'NEUTRAL':
      return Enum$system_Locales.NEUTRAL;
    default:
      return Enum$system_Locales.$unknown;
  }
}

enum Enum$__TypeKind {
  SCALAR,
  OBJECT,
  INTERFACE,
  UNION,
  ENUM,
  INPUT_OBJECT,
  LIST,
  NON_NULL,
  $unknown;

  factory Enum$__TypeKind.fromJson(String value) =>
      fromJson$Enum$__TypeKind(value);

  String toJson() => toJson$Enum$__TypeKind(this);
}

String toJson$Enum$__TypeKind(Enum$__TypeKind e) {
  switch (e) {
    case Enum$__TypeKind.SCALAR:
      return r'SCALAR';
    case Enum$__TypeKind.OBJECT:
      return r'OBJECT';
    case Enum$__TypeKind.INTERFACE:
      return r'INTERFACE';
    case Enum$__TypeKind.UNION:
      return r'UNION';
    case Enum$__TypeKind.ENUM:
      return r'ENUM';
    case Enum$__TypeKind.INPUT_OBJECT:
      return r'INPUT_OBJECT';
    case Enum$__TypeKind.LIST:
      return r'LIST';
    case Enum$__TypeKind.NON_NULL:
      return r'NON_NULL';
    case Enum$__TypeKind.$unknown:
      return r'$unknown';
  }
}

Enum$__TypeKind fromJson$Enum$__TypeKind(String value) {
  switch (value) {
    case r'SCALAR':
      return Enum$__TypeKind.SCALAR;
    case r'OBJECT':
      return Enum$__TypeKind.OBJECT;
    case r'INTERFACE':
      return Enum$__TypeKind.INTERFACE;
    case r'UNION':
      return Enum$__TypeKind.UNION;
    case r'ENUM':
      return Enum$__TypeKind.ENUM;
    case r'INPUT_OBJECT':
      return Enum$__TypeKind.INPUT_OBJECT;
    case r'LIST':
      return Enum$__TypeKind.LIST;
    case r'NON_NULL':
      return Enum$__TypeKind.NON_NULL;
    default:
      return Enum$__TypeKind.$unknown;
  }
}

enum Enum$__DirectiveLocation {
  QUERY,
  MUTATION,
  SUBSCRIPTION,
  FIELD,
  FRAGMENT_DEFINITION,
  FRAGMENT_SPREAD,
  INLINE_FRAGMENT,
  VARIABLE_DEFINITION,
  SCHEMA,
  SCALAR,
  OBJECT,
  FIELD_DEFINITION,
  ARGUMENT_DEFINITION,
  INTERFACE,
  UNION,
  ENUM,
  ENUM_VALUE,
  INPUT_OBJECT,
  INPUT_FIELD_DEFINITION,
  $unknown;

  factory Enum$__DirectiveLocation.fromJson(String value) =>
      fromJson$Enum$__DirectiveLocation(value);

  String toJson() => toJson$Enum$__DirectiveLocation(this);
}

String toJson$Enum$__DirectiveLocation(Enum$__DirectiveLocation e) {
  switch (e) {
    case Enum$__DirectiveLocation.QUERY:
      return r'QUERY';
    case Enum$__DirectiveLocation.MUTATION:
      return r'MUTATION';
    case Enum$__DirectiveLocation.SUBSCRIPTION:
      return r'SUBSCRIPTION';
    case Enum$__DirectiveLocation.FIELD:
      return r'FIELD';
    case Enum$__DirectiveLocation.FRAGMENT_DEFINITION:
      return r'FRAGMENT_DEFINITION';
    case Enum$__DirectiveLocation.FRAGMENT_SPREAD:
      return r'FRAGMENT_SPREAD';
    case Enum$__DirectiveLocation.INLINE_FRAGMENT:
      return r'INLINE_FRAGMENT';
    case Enum$__DirectiveLocation.VARIABLE_DEFINITION:
      return r'VARIABLE_DEFINITION';
    case Enum$__DirectiveLocation.SCHEMA:
      return r'SCHEMA';
    case Enum$__DirectiveLocation.SCALAR:
      return r'SCALAR';
    case Enum$__DirectiveLocation.OBJECT:
      return r'OBJECT';
    case Enum$__DirectiveLocation.FIELD_DEFINITION:
      return r'FIELD_DEFINITION';
    case Enum$__DirectiveLocation.ARGUMENT_DEFINITION:
      return r'ARGUMENT_DEFINITION';
    case Enum$__DirectiveLocation.INTERFACE:
      return r'INTERFACE';
    case Enum$__DirectiveLocation.UNION:
      return r'UNION';
    case Enum$__DirectiveLocation.ENUM:
      return r'ENUM';
    case Enum$__DirectiveLocation.ENUM_VALUE:
      return r'ENUM_VALUE';
    case Enum$__DirectiveLocation.INPUT_OBJECT:
      return r'INPUT_OBJECT';
    case Enum$__DirectiveLocation.INPUT_FIELD_DEFINITION:
      return r'INPUT_FIELD_DEFINITION';
    case Enum$__DirectiveLocation.$unknown:
      return r'$unknown';
  }
}

Enum$__DirectiveLocation fromJson$Enum$__DirectiveLocation(String value) {
  switch (value) {
    case r'QUERY':
      return Enum$__DirectiveLocation.QUERY;
    case r'MUTATION':
      return Enum$__DirectiveLocation.MUTATION;
    case r'SUBSCRIPTION':
      return Enum$__DirectiveLocation.SUBSCRIPTION;
    case r'FIELD':
      return Enum$__DirectiveLocation.FIELD;
    case r'FRAGMENT_DEFINITION':
      return Enum$__DirectiveLocation.FRAGMENT_DEFINITION;
    case r'FRAGMENT_SPREAD':
      return Enum$__DirectiveLocation.FRAGMENT_SPREAD;
    case r'INLINE_FRAGMENT':
      return Enum$__DirectiveLocation.INLINE_FRAGMENT;
    case r'VARIABLE_DEFINITION':
      return Enum$__DirectiveLocation.VARIABLE_DEFINITION;
    case r'SCHEMA':
      return Enum$__DirectiveLocation.SCHEMA;
    case r'SCALAR':
      return Enum$__DirectiveLocation.SCALAR;
    case r'OBJECT':
      return Enum$__DirectiveLocation.OBJECT;
    case r'FIELD_DEFINITION':
      return Enum$__DirectiveLocation.FIELD_DEFINITION;
    case r'ARGUMENT_DEFINITION':
      return Enum$__DirectiveLocation.ARGUMENT_DEFINITION;
    case r'INTERFACE':
      return Enum$__DirectiveLocation.INTERFACE;
    case r'UNION':
      return Enum$__DirectiveLocation.UNION;
    case r'ENUM':
      return Enum$__DirectiveLocation.ENUM;
    case r'ENUM_VALUE':
      return Enum$__DirectiveLocation.ENUM_VALUE;
    case r'INPUT_OBJECT':
      return Enum$__DirectiveLocation.INPUT_OBJECT;
    case r'INPUT_FIELD_DEFINITION':
      return Enum$__DirectiveLocation.INPUT_FIELD_DEFINITION;
    default:
      return Enum$__DirectiveLocation.$unknown;
  }
}

const possibleTypesMap = <String, Set<String>>{
  'IContent': {
    'ArticlePage',
    'ButtonBlock',
    'ContactBlock',
    'ContactPage',
    'ContainerPage',
    'Content',
    'EditorialBlock',
    'GenericMedia',
    'ImageFile',
    'JumbotronBlock',
    'LandingPage',
    'NewsPage',
    'PageListBlock',
    'ProductPage',
    'SearchPage',
    'SiteLogotypeBlock',
    'SitePageData',
    'StandardPage',
    'StartPage',
    'TeaserBlock',
    'VectorImageFile',
    'VideoFile',
  },
  'IData': {
    'ArticlePage',
    'ButtonBlock',
    'City',
    'ContactBlock',
    'ContactPage',
    'ContainerPage',
    'Content',
    'Data',
    'EditorialBlock',
    'GenericMedia',
    'ImageFile',
    'JumbotronBlock',
    'LandingPage',
    'NewsPage',
    'PageListBlock',
    'ProductPage',
    'SearchPage',
    'SiteDefinition',
    'SiteLogotypeBlock',
    'SitePageData',
    'StandardPage',
    'StartPage',
    'TeaserBlock',
    'VectorImageFile',
    'VideoFile',
  },
  'ISitePageData': {
    'ArticlePage',
    'ContactPage',
    'ContainerPage',
    'LandingPage',
    'NewsPage',
    'ProductPage',
    'SearchPage',
    'SitePageData',
    'StandardPage',
    'StartPage',
  },
};
